//　============================================
//
//　关键字
//　・TODO：剩余工作
//　・代码编辑时要牢记/MSAP更改
//
//　============================================

using GMap.NET;                         //GMap.NET Core
using GMap.NET.MapProviders;            //GMap.NET 地图提供商
using GMap.NET.WindowsPresentation;     //GMap.NET C# WPF用
using GMapNetInterFace;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;       //Process相关
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms;     //添加引用
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Threading;
using System.Xml.Linq;
using System.Xml.XPath;
using System.Windows.Controls.Primitives;
using Microsoft.Win32;
using System.IO.Ports;

// MDI
using WPF.MDI;

// log4net
using log4net;
using NAudio.CoreAudioApi;

using XMonitor_GUI.CustomMarkers;      //要显示在地图上的标记
using XMonitor_GUI.Window;

using TouchControls;    
using SettingData;
using XmlBase;
using Plot;
using Point;
using Pipe;
using Config;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using FlightPlanning;
using System.Text.RegularExpressions;
using System.Management;

namespace XMonitor_GUI
{
    static class Constants
    {
        public const int _commandInterval = 500;		//命令间隔500ms
        #region 命令按钮名称
        // User1 命令按钮
        public const string _commandUser1_0 = "User1";
        public const string _commandUser1_1 = "返航";		//GoHome
        public const string _commandUser1_2 = "前模式";		//Prev

        // User2 命令按钮
        public const string _commandUser2_0 = "User2";
        public const string _commandUser2_1 = "着陆";	//
        public const string _commandUser2_2 = "重新开始";	//
        public const string _commandUser2_3 = "暂停";	//

        // User3 命令按钮
        public const string _commandUser3_0 = "User3";
        //		public const string _commandUser3_1 = "重新开始";	//
        public const string _commandUser3_1 = "起飞";
        public const string _commandUser3_2 = "停止";	//

        // User4 命令按钮
        public const string _commandUser4_0 = "User4";
        public const string _commandUser4_1 = "轨迹清除";	//
        public const string _commandUser4_2 = "以下模式";	//	

        //PosSet 的命令按钮
        //      public const string _commandPosSet = "WP转移";	//
        public const string _commandPosSet = "路点上传";

        //PosClear 的命令按钮
        public const string _commandPosClear = "WP削除";

        //WptSpd 的命令按钮
        public const string _commandPosSpd0 = "指定速度";
        public const string _commandPosSpd1 = "低速(1)";
        public const string _commandPosSpd2 = "中速(3)";
        public const string _commandPosSpd3 = "高速(5)";
        #endregion

        // 计数模式开关阈值
        public const int _playCount = 10;
        public const int _disconnectCount = 50;
        public const int _mapPosition = 1;			// 以地图为中心和无人机标记距离 1 公里

        #region 警告
        public static double _alertBatteryValue = 21.8;
        public const double _alertGPSValue = 5;
        public const double _alertLinkValue = 33;
        public const double _alertRCValue = 33;

        public const int _lowLvMcuProcTimeW = 95;	//注意：下位CPU使用率
        public const int _lowLvMcuProcTimeA = 100;	//警告：下位CPU使用率
        public const int _highLvMcuProcTimeW = 95;	//注意：下位CPU使用率
        public const int _highLvMcuProcTimeA = 100;	//警告：下位CPU使用率

        // 自动飞行下的报错信息
        public const int _alertAPMessageCount = 2;
        private static string[] _alertAPMessage = 
		{
			"[安全]正确连接飞机无线电源模块。\n",
			"[安全]飞机倾斜，放置水平的地面上。\n"
		};
        public static string _alertMSAPMessage(int _no)
        {
            return _alertAPMessage[_no];
        }
        // 监测数据监测预警
        public const int _alertMessageCount = 14;
        private static string[,] _alertMessageC = new string[14, 3]
		{
			{"[必须]  扬声器静音释放。\n","",""},
			{"[必须]  扬声器音量到最大。\n","",""},
			{"[未连接]　请检查飞机上的通信是否连接。\n","",""},
			{"[静止状态]　可以开始空转\n","",""},
			{"注意!!  pc电池电量过低。\n","警告!!  pc电池电量过低。\n","危险!!  pc电池电量过低。\n"},
			{"","注意!!　飞机电池电量过低。\n","紧急!!　飞机电池电量过低。\n"},
			{"","注意!!　GPS星数过低\n","紧急!!　GPS星数过低\n"},
			{"","注意!!　数传通信不好\n","紧急!!　数传通信不好\n"},
			{"","注意!!　接收机通信中断\n","紧急!!　接收机通信中断\n"},
			{"","注意!!　机体CPU(L)使用率超过额定值\n","紧急!!　机体CPU(L)使用率超过额定值\n"},
			{"","注意!!　机体CPU(H)使用率超过额定值。\n","紧急!!　机体CPU(H)使用率超过额定值。\n"},
			{"[未连接]　请检查与电台连接。\n","",""},
			{"","","[管理]请正确连接飞机电源\n"},
			{"","","[管理]机身是否异常\n"}
		};
        public static string _alertMessage(int _no, int _mode)
        {
            return _alertMessageC[_no, _mode];
        }
        public static String AP_HardWare_VersionShow="", AP_SoftWare_VersionShow="", AP_EquipmentID_VersionShow="";//AP字符串设置为全局
        public static String IMU_HardWare_VersionShow = "", IMU_SoftWare_VersionShow = "", IMU_EquipmentID_VersionShow = "";//IMU字符串设置为全局
        public static String GPS_HardWare_VersionShow = "", GPS_SoftWare_VersionShow = "", GPS_EquipmentID_VersionShow = "";//GPS字符串设置为全局
        public static String HUB_HardWare_VersionShow = "", HUB_SoftWare_VersionShow = "", HUB_EquipmentID_VersionShow = "";//IMU字符串设置为全局
        public static String MAG_HardWare_VersionShow = "", MAG_SoftWare_VersionShow = "", MAG_EquipmentID_VersionShow = "";//MAG字符串设置为全局
        public static String LED_HardWare_VersionShow = "", LED_SoftWare_VersionShow = "", LED_EquipmentID_VersionShow = "";//LED字符串设置为全局
        public static String FDR_HardWare_VersionShow = "", FDR_SoftWare_VersionShow = "", FDR_EquipmentID_VersionShow = "";//FDR字符串设置为全局
        public static String DTU_HardWare_VersionShow = "", DTU_SoftWare_VersionShow = "", DTU_EquipmentID_VersionShow = "";//DTU字符串设置为全局
        public static String RTK_HardWare_VersionShow = "", RTK_SoftWare_VersionShow = "", RTK_EquipmentID_VersionShow = "";//RTK字符串设置为全局

        public static int AutoWing_Switch_Open_Flag = 0;//开关打开标志
        public static int AutoWing_Led_Flag = -1;//led亮暗调节标志
        public static int Led_nighttolight_state = 0;//led开关及亮暗的各种状态值

        public static int AutoWing_WorkIndex_Flag = 0;//作业参数设置标志
        public static int AutoWing_ModelFlight_Flag = 0;//飞机模型标志
        public static int AutoWing_PIDSet_Flag = -1;//pid设置标志
        /// <summary>
        /// 遥控器校准设置用到的变量
        /// </summary>
        public static int AutoWing_Tel_Control_flag = 0;//遥控器校准开始标志
        public static int AutoWing_Tel_Finish_flag = 0;//遥控器校准完成进入修正界面
        public static int AutoWing_Tel_Modifymiddle_Flag = 0;//遥控器中点修正标志
        public static int AutoWing_Tel_Modifynext_Flag = 0;//遥控器中点修正界面下一步
        public static int AutoWing_Tel_ReModifymiddle_Flag = 0;//遥控器失败后重新校准标志
        public static int AutoWing_Tel_Makesure_flag = 0;//遥控器校准方向确定标志
        public static int AutoWing_Tel_Steps = 0;//遥控器校准参数
        public static int AutoWing_Tel_StepsValue = 0;//遥控器校准参数
        /// <summary>
        /// 设置用到的变量
        /// </summary>
        public static float Set_work_speed =0;//作业速度
        public static float Set_work_radius =0;//作业距离
        public static float Set_pensa_radius =0;//喷洒幅度
        public static float Set_work_height = 0;//作业高度
        public static int   Set_DataSelect_QUADE =0;//机型组合值
        public static int   Set_tape_speedvalue = 0;//怠速值
        public static float Set_gyro_kp_rp =0;
        public static float Set_gyro_ki_rp=0;
        public static float Set_gyro_kd_rp=0;
        public static float Set_gyro_kp_y=0;
        public static float Set_gyro_ki_y=0;
        public static float Set_gyro_kd_y=0;
        public static float Set_prop_kp_rp=0;
        public static float Set_prop_ki_rp=0;
        public static float Set_prop_kp_y=0;
        public static float Set_prop_ki_y = 0;


        /// <summary>
        /// 设置上层pid参数
        /// </summary>
        public static float Set_zitai_p = 0;
        public static float Set_zitai_i = 0;
        public static float Set_zitai_d = 0;
        public static float Set_hangxiang_p = 0;
        public static float Set_hangxiang_i = 0;
        public static float Set_hangxiang_d = 0;
        public static float Set_sudu_p = 0;
        public static float Set_sudu_i = 0;
        public static float Set_sudu_d = 0;
        public static float Set_gaodu_p = 0;
        public static float Set_gaodu_i = 0;
        public static float Set_gaodu_d = 0;
        public static int AutoWing_ShangCengPIDSet_Flag = -1;//pid设置标志

        /// <summary>
        /// 设置显示上层pid参数
        /// </summary>
        public static float Show_zitai_p = 0;
        public static float Show_zitai_i = 0;
        public static float Show_zitai_d = 0;
        public static float Show_hangxiang_p = 0;
        public static float Show_hangxiang_i = 0;
        public static float Show_hangxiang_d = 0;
        public static float Show_sudu_p = 0;
        public static float Show_sudu_i = 0;
        public static float Show_sudu_d = 0;
        public static float Show_gaodu_p = 0;
        public static float Show_gaodu_i = 0;
        public static float Show_gaodu_d = 0;
/// <summary>
/// 设置参数显示用到的变量
/// </summary>
        public static float Show_work_speed = 0;//作业速度
        public static float Show_work_radius = 0;//作业距离
        public static float Show_pensa_radius = 0;//喷洒幅度
        public static float Show_work_height = 0;//作业高度
        public static int Show_DataSelect_QUADE = 0;//机型组合值
        public static int Show_tape_speedvalue = 0;//怠速值
        public static float Show_gyro_kp_rp = 0;
        public static float Show_gyro_ki_rp = 0;
        public static float Show_gyro_kd_rp = 0;
        public static float Show_gyro_kp_y = 0;
        public static float Show_gyro_ki_y = 0;
        public static float Show_gyro_kd_y = 0;
        public static float Show_prop_kp_rp = 0;
        public static float Show_prop_ki_rp = 0;
        public static float Show_prop_kp_y = 0;
        public static float Show_prop_ki_y = 0;
        public static int Jump_To5or50Hz_Flag = 0;

/// <summary>
/// 遥控器校准显示用到的变量
/// </summary>
        public static long Show_New_YK_roll =0;//New_YK_roll
		public static long Show_New_YK_pitch = 0;//New_YK_pitch
	    public static long Show_New_YK_throttle = 0;//New_YK_throttle
        public static long Show_New_YK_yaw = 0;//New_YK_yaw
        public static long Show_New_YK_switch1 = 0;//New_YK_switch1
	    public static long Show_New_YK_switch2 = 0;//New_YK_switch2
	    public static long Show_New_YK_switch3 = 0;//New_YK_switch3
		public static long Show_New_YK_switch4 = 0;//New_YK_switch4
	    public static long Show_New_YK_Minroll = 0;//New_YK_Minroll
	    public static long Show_New_YK_Minpitch = 0;//New_YK_Minpitch
	    public static long Show_New_YK_Minthrottle =0;//New_YK_Minthrottle
	    public static long Show_New_YK_MinYaw = 0;//New_YK_MinYaw
	    public static long Show_New_YK_Minswitch1 = 0;//New_YK_Minswitch1
	    public static long Show_New_YK_Minswitch2 = 0;//New_YK_Minswitch2
		public static long Show_New_YK_Minswitch3 = 0;//New_YK_Minswitch3
		public static long Show_New_YK_Minswitch4 = 0;//New_YK_Minswitch4
		public static long Show_New_YK_Maxroll = 0;//New_YK_Maxroll
		public static long Show_New_YK_Maxpitch = 0;//New_YK_Maxpitch
	    public static long Show_New_YK_Maxthrottle = 0;//New_YK_Maxthrottle
	    public static long Show_New_YK_MaxYaw = 0;//New_YK_MaxYaw
		public static long Show_New_YK_Maxswitch1 = 0;//New_YK_Maxswitch1
		public static long Show_New_YK_Maxswitch2 = 0;//New_YK_Maxswitch2
		public static long Show_New_YK_Maxswitch3 = 0;//New_YK_Maxswitch3
		public static long Show_New_YK_Maxswitch4 = 0;//New_YK_Maxswitch4
        public static long Show_SuccessOrFail = 0;//SuccessOrFail

///////////////////////////////归一化之后的变量////////////////////////////////////////////////////////////
        public static long Show_RebackOrNotReback = 0;//是否反向
        public static float Show_guiyi_YK_roll = 0;
        public static float Show_guiyi_YK_pitch = 0;
        public static float Show_guiyi_YK_throttle = 0;
        public static float Show_guiyi_YK_yaw = 0;
        public static float Show_guiyi_YK_switch1 = 0;
        public static float Show_guiyi_YK_switch2 = 0;
        public static float Show_guiyi_YK_switch3 = 0;
        public static float Show_guiyi_YK_switch4 = 0;
  /// <summary>
  /// /固件升级
  /// </summary>
        public static int Jump_Flag =0;
		public static int Jump_INitialFlag =0;
        public static int Fireware_index_flag = 0;
        public static int Update_Equipment_ID = 0;

        public static String User_Wifi_Set_IP;
        public static String User_Wifi_Set_Port;

/////////////数据回放用到的文件名字/////////////////////
        public static FileStream History_DataPlay_Back;
        public static StreamReader History_DataReader_Back;
        public static bool Play_Data_Back_Flag;
        public static Int32 Progres_DataCount=0;
        public static int Stop_or_Reback_Flag = 0;
///////////////保养倒计时////////////////////////////////
        public static double User_Set_Maintaintimer = 0;//设置的保养时间
        public static double User_Set_MaintainStartToEndTime = 0;//从保养结束增加设置的下次的保养时间
        public static double User_Current_Timer = 0;//当前时间用户计算的
        public static int Connect_YesOrNot_Flag = 0;//连接是否正常

//////////////电机测试用到的变量///////////////////////////////////
        public static int Motor_Show_Flag = 0;
        public static int AutoWing_MotorTest_Flag = 0;
        public static int Motor1_Test_Index = 0;
        public static int Motor2_Test_Index = 0;
/////////////设置起飞点/////////////////////////////////////////////
        public static double Start_ChooseLat = 0.0;
        public static double Start_ChooseLng = 0.0;
        public static int Start_ChooseID = 0;
////////////设置障碍点////////////////////////////////////////////
        public static bool Obstacle_IfInclude_Flag = false;//是否包含障碍点
        public static int Obstacle_StartAdd_Flag = 0;//障碍点添加是否启动
        public static double Used_Obstacle_Lat = 0.0;//障碍点纬度
        public static double Used_Obstacle_Lng = 0.0;//障碍点经度
        public static double Used_Obstacle_Radius = 1.0;//障碍点经度
/////////////////恢复到移动前的状态////////////////////////////////////
        public static double WayPointMove_Flag = 0;//复位标志位
///////////////////////内缩///////////////////////////////
        public static double Retracted_Dis = 0.0;

        ////////////////////////////水泵设置显示及设置用到的变量///////////////////////////////////////////
        public static int Intelligent_Pump_MaxValue_Show = 30;
        public static int Intelligent_Pump_MinValue_Show = 20;
        public static float Intelligent_Vel_MaxValue_Show = 0;
        public static float Intelligent_Vel_MinValue_Show = 0;
        public static int Intelligent_Motor_Value_Show = 0;
        public static int Fixed_Pump_Value_Show = 20;
        public static int Fixed_Motor_Value_Show = 0;

        public static int Intelligent_Pump_MaxValue_Set = 0;
        public static int Intelligent_Pump_MinValue_Set = 0;
        public static int Intelligent_Vel_MaxValue_Set = 0;
        public static int Intelligent_Vel_MinValue_Set = 0;
        public static int Intelligent_Motor_Value_Set = 0;
        public static int Fixed_Pump_Value_Set = 0;
        public static int Fixed_Motor_Value_Set = 0;

        public static int Set_Pump_Flag = -1;
        public static int Set_PumpDianji_Flag = 0;//用于点击发送的
//////////////////////////////////////////////磁偏角及A、B点拐弯点相关参数设置/////////////////////////////
        public static float Mag_Offset_Angle_Show = 0;//磁偏角
        public static float AB_ApproachLine_Range_Show = 0;//追线距离限幅
        public static float AB_ApproachLine_DeadZone_Show = 0;//追线距离死区
        public static float AB_ApproachPoint_Range_Show = 0;//追点距离限幅
        public static float AB_HorizoMove_Acc_Show = 0;//AB点平移时加速度
        public static float AB_HorizoMove_Range_Show = 0;//AB点平移距离限幅
        public static float AB_FowardMove_Acc_Show = 0;//AB点前行时加速度
        public static float AB_VelToPosition_Percent_Show = 0;//速度到位置比例系数
        public static float AB_BToThreshold_Percent_Show = 0;//AB点B点到达Threshold比例
        public static float AB_AToThreshold_Percen_Show = 0; //AB点A点到达Threshold比例
        public static float AB_BackThreshold_Show = 0;//返航阈值

        public static int Mag_Offset_Angle_Set = 0;//磁偏角
        public static float AB_ApproachLine_Range_Set = 0;//追线距离限幅
        public static float AB_ApproachLine_DeadZone_Set = 0;//追线距离死区
        public static float AB_ApproachPoint_Range_Set = 0;//追点距离限幅
        public static float AB_HorizoMove_Acc_Set = 0;//AB点平移时加速度
        public static float AB_HorizoMove_Range_Set = 0;//AB点平移距离限幅
        public static float AB_FowardMove_Acc_Set = 0;//AB点前行时加速度
        public static float AB_VelToPosition_Percent_Set = 0;//速度到位置比例系数
        public static float AB_BToThreshold_Percent_Set = 0;//AB点B点到达Threshold比例
        public static float AB_AToThreshold_Percen_Set = 0; //AB点A点到达Threshold比例
        public static float AB_BackThreshold_Set = 0;//返航阈值

        public static int Set_Mag_And_AB_Flag = 0;
        ///////////////////////////修改飞控编号相关的////////////////////////////////////
        public static string AP_SETID_String = "";
        public static string AP_SHOWID_String = "";
        public static int Set_APID_Flag = 0;
        //////////////////////////加速度噪音值显示////////////////////////////////////////
        public static float Acc_Noise_ValueShow = 0;
        public static int Prop_Failure_Code = 0;


/////////////////////////////////////安全策略设置和显示//////////////////
        public static float Set_UAV_Noticefirstvolt = 0;
        public static float Set_UAV_Noticesecondvolt = 0;
        public static float Set_UAV_Noticesecondaction = 0;
        public static float Set_UAV_Noticedistance = 0;
        public static float Set_UAV_Noticeheight = 0;
        public static float Set_UAV_Noticelosecontrolaction = 0;
        public static float Set_UAV_Noticefanhanggaodu = 0;
        public static float Show_UAV_Noticefirstvolt =0;
        public static float Show_UAV_Noticesecondvolt =0;
        public static float Show_UAV_Noticesecondaction=0;
        public static float Show_UAV_Noticelosecontrolaction=0;
        public static float Show_UAV_Noticedistance=0;
        public static float Show_UAV_Noticeheight = 0;
        public static float Show_UAV_Noticefanhanggaodu = 0;
        public static float AutoWing_NoticeIndex_Flag = 0;
/////////////////////////////////植保作业参数//////////////////////////
        public static float Set_UAV_ZhiBaoSpeed = 0;
        public static float Set_UAV_ZhiBaoFuDu = 0;
        public static float Set_UAV_ZhiBaoAction = 0;
        public static float Show_UAV_ZhiBaoSpeed =0;
        public static float Show_UAV_ZhiBaoFuDu = 0;
        public static float Show_UAV_ZhiBaoAction = 0;
        public static float AutoWing_ZhiBaoZuoYe_Flag = 0;
///////////////////////////////航拍作业参数/////////////////
        public static float Set_UAV_HangPaiSpeed =0;
        public static float Set_UAV_HangPaiUpSpeed = 0;
        public static float Set_UAV_HangPaiDownSpeed = 0;


        public static float Set_UAV_M9Low =0;
        public static float Set_UAV_M9Middle =0;
        public static float Set_UAV_M9High =0;
        public static float Set_UAV_M10Low =0;
        public static float Set_UAV_M10Middle =0;
        public static float Set_UAV_M10High = 0;
        public static float Show_UAV_HangPaiSpeed =0;
        public static float Show_UAV_HangPaiUpSpeed = 0;
        public static float Show_UAV_HangPaiDownSpeed = 0;
        public static float Show_UAV_M9Low=0;
        public static float Show_UAV_M9Middle=0;
        public static float Show_UAV_M9High=0;
        public static float Show_UAV_M10Low=0;
        public static float Show_UAV_M10Middle=0;
        public static float Show_UAV_M10High = 0;
        public static float AutoWing_HangPai_Flag = 0;
//////////////////////////////基础设置相关参数////////////////////////////
        public static float Set_UAV_Speed = 0;
        public static float Set_UAV_Height = 0;
        public static float Set_UAV_UpSpeed = 0;
        public static float Set_UAV_DownSpeed = 0;
        public static float Set_UAV_AttitudeRange = 0;
        public static float Set_UAV_Maxhangxiangjiaosudu = 0;
        public static float Show_UAV_Speed =0;
        public static float Show_UAV_Height =0;
        public static float Show_UAV_UpSpeed =0;
        public static float Show_UAV_DownSpeed =0;
        public static float Show_UAV_AttitudeRange = 0;
        public static float Show_UAV_Maxhangxiangjiaosudu = 0;
/////////////////////////////////航拍植保切换/////////////////////
        public static int Set_UAV_CurrentStyle =0;
        public static float Show_UAV_CurrentStyle = 0;
        public static float AutoWing_HangPaiAndZhibaoChangge_Flag=0;

        public static float Style_Change_HangPaiAndZhiBao_Flag = 0;
        ////////////////////////////调整锁定标志/////////////////////////////////////////////
        public static int Turn_Lock_flag = 0;
//////////////////////////////水泵设置断药动作//////////////////////////////////////////////
        public static int Show_shuiben_duanyao_action = 0;
        public static int Set_shuiben_duanyao_action = 0;
//////////////////////////////是否循环直接任务的标志位///////////////////////////////////////
        public static int If_WaypointReAction_Flag = 0;
        public static int Angle_Auto_Make_Flag = 0;
//////////////////////////////执行完是否返航标志位//////////////////////////////////////////
        public static int If_Reback_Flag = 0;

/////////////////////////////刷新IMU数据信息/////////////////////////////////////////////////
         public static double mm_IMUDataRoll =0.0;
         public static double mm_IMUDataPitch =0.0;
         public static double mm_IMUDataYaw =0.0;
         public static double mm_GyroDataRollRate =0.0;
         public static double mm_GyroDataPitchRate =0.0;
         public static double mm_GyroDataYawRate =0.0;
         public static double mm_AccDataX =0.0;
         public static double mm_AccDataY =0.0;
         public static double mm_AccDataZ =0.0;
         public static double mm_MagDataX =0.0;
         public static double mm_MagDataY =0.0;
         public static double mm_MagDataZ =0.0;

        #endregion

    }
    /// <summary>
    /// MainWindow.xaml 相互交互逻辑
    /// </summary>
    /// <remarks>
    /// X 监视器主屏幕
    /// </remarks>
    public partial class MainWindow
    {


        double First_Moment_lat = 0.0;
        double First_Moment_lon = 0.0;
        double Second_Moment_lat = 0.0;
        double Second_Moment_lon = 0.0;

        /// <summary>
        /// /////////////心跳重连机制////
        /// </summary>
        int RePort_Connect_Count = 0;
/// <summary>
/// 优化轨迹算法的定义部分
/// </summary>
         int History_Optimization_Flag = 0;
         int Current_Optimization_Flag = 0;
         int History_Nihe_Flag = 0;
         int Current_Nihe_Flag = 0;


         double[] Trajectory_Optimization_A = new double[100];
         double[] Trajectory_Optimization_B = new double[100];
         double[] Trajectory_Optimization_C = new double[100];
         double lishi_lat = 0.0;
         double lishi_lon = 0.0;
         int pos_num_get = 0;
/////////////////////////////////////////////////////////////////////////////////
        int Show_Fail_Style = 0;
/////////////////////////////////内缩半径////////////////////////////////////////
        double Retracted_Dis = 0.0;
////////////////////////////////恢复初始状态下的经纬度空间//////////////////////
        double[] Reback_lat = new double[50];
        double[] Reback_lon = new double[50];
        int Reback_Num = 0;
/// <summary>
/// 障碍点////////////
/// </summary>
        PointLatLng[] Square_FirstToFourth_Point = new PointLatLng[4];

        double test_Angle_ = 0.0;
        int Area_Count = 0;
        double Extern_TwoPointDis = 0.0;
        double Fly_Regional_Area_Extern=0.0;
        double Fly_Route_Length_Extern = 0.0;
        double Fly_Estimated_Time_Extern = 0.0;

        int StopOrReback_Flag = 0;
        int Map_pan_flag = 0;
        ///////////////////方案生成之后需要锁定添加功能
        bool Lock_Marker_Flag = false;
        ///////////////////////////固件升级暂停线程发送////////////////////////
        int Stop_SendMession_Flag = 0;
        ////////////////////////////打点///////////////////////////////////////
        int Click_Point_Start_Flag = 0;
        int Reset_Count = 0;
        ////////////////////////////统计方案结果///////////////////////////////
        double Fly_PenSa_Radius = 0.0;//喷洒半径
        ////////////////////////////方案撤销///////////////////////////////////
        int m_make_click = 0;
        double[] Plan_Save_Lat = new double[50];//用于存储的纬度
        double[] Plan_Save_Lon = new double[50];//用于存储的经度
        //////////////////////////////旋转超时等待计数/////////////////////////
        int TenSeconds_Count = 0;
        //////////////////////////////等待效果创建/////////////////////////////
        WaitProgressWindow dlg;
        //////////////////////////////等待效果创建//////////////////////////////
        ///////////////////////////////socket连接超时事件////////////////////////
        protected EventWaitHandle m_event;
        ///////////////////////////////socket连接超时事件////////////////////////
        /// <summary>
        /// ///////////////////////////wifi相关的/////////////////////////////////
        /// </summary>
        public static MainWindow pWin = null;//定义窗体
        System.Net.Sockets.Socket Wifi_Socket;
        Thread threadWatch;
        bool Wifi_Success_Connect_Flag = false;
        #region 宣言
        ////////////////////////////////////////串口自动打开标志////////////////////////////////////
        public bool open_com_flag = false;
        /*=====================================版本信息申明空间=====================================*/
        Version_Information All_Equipment_Info = new Version_Information();
        /********************************绘制覆盖面**********************************************/
        double first_la_X = 0.0;
        double first_lo_X = 0.0;
        double second_la_X = 0.0;
        double second_lo_X = 0.0;
        int design_flag_X = 0;
        float Cover_Angle = 0;
        float angle = 0;
        double m_dMeterPerDeg_Latitude = 111569.58;
        double m_dMeterPerDeg_Longitude = 90717.31;
        bool Start_Cover_Flag = false;
        int Ten_Quency_Count = 0;
        /********************************用于设置marker高度航向速度参数的***********************/
        double Marker_Set_Height = 0.0;
        double Marker_Set_Heading = 0.0;
        double Marker_Set_Velocity = 0.0;
        /*********************************双击事件的定义****************************************/
        System.Windows.Point p1_X, p2_X;					//　
        /*********************************三维显示********************************************/
        double threeD_yawangle = 0.0;
        /**********************************xbee通信health**************************************/
        int Xbee_Health_Count = 0;
        PingManager Xbee_Health;
        /*********************************生成植保路点相关的***********************************/
        double[] zhf_lat = new double[500];
        double[] zhf_lon = new double[500];
        double[] make_road_lat = new double[500];
        double[] make_road_lon = new double[500];
        double[] make_roadandobstacle_lat = new double[500];
        double[] make_roadandobstacle_lon = new double[500];
        double[] make_guoduroad1_lat = new double[500];
        double[] make_guoduroad1_lon = new double[500];
        double[] make_guoduroad2_lat = new double[500];
        double[] make_guoduroad2_lon = new double[500];
        double[] make_guoduroad3_lat = new double[500];
        double[] make_guoduroad3_lon = new double[500];
        double[] Field_Distance_Twopoint = new double[50];
        double[] Field_Nums_Twopoint = new double[500];
        double Field_Distance_onetotwo = 0.0;
        double Field_Distance_zerotothree = 0.0;
        double Field_Distance_twotothree = 0.0;

        int[] yesornot_pensa_flag = new int[500];//对应是否喷洒的标识符
        int[] usedyesornot_pensa_flag = new int[500];//实际使用的是否喷洒的标识

        // 保存目标文件
        string FilePath = string.Empty;
        /**********************************新的添加标志物的相关的********************************/
        double[] ProjectList_MiddleSavelat = new double[500];                       //临时存储
        double[] ProjectList_MiddleSavelon = new double[500];                       //临时存储

        double[] ProjectList_MiddleSaveheading = new double[500];                       //临时存储航向
        double[] ProjectList_MiddleSaveheight = new double[500];                       //临时存储高度
        double[] ProjectList_MiddleSavevelocity = new double[500];                       //临时存储速度

        int ProjectList_MiddleSavecount;
        List<Project> ProjectList_X;                      // Mission/Waypoint/Path管理类
        List<Project> ProjectList_Marker;                 //专门用来存储marker点的坐标信息
        List<Project> ProjectList_Distance;                 //专门用来存储marker点之间的距离信息
        List<Project> ProjectList_AreaChoose;               //专门用来存储区域点选择的信息
        List<Project> ProjectList_ObstacleInfo;               //专门用来存储区障碍点的信息               

        List<List<Project>> ProjectRecord_X;				// 记录所有操作的管理类
        public const int _maxMultiWaypoint_X = 1024;	//　最多的路点数
        List<int> WaypointSelect_X = new List<int>();     // 选择WaypointID
        List<int> AreaWaypointSelect_X = new List<int>();     // 选择区域
        int DrawMode_X;									// 0标准 1线 2矩形 3圈 4往返1 5往返2
        int BaseSelect;									// 选择WaypointID
        int PointCount;

        /**************************绘制轨迹变量申明****************************************/
        int DrawTrack_Count = 0;
        double Hone_lat_poi = 0;
        double Home_lon_poi = 0;
        int Home_flag = 0;
        /**************************绘制轨迹变量申明****************************************/
        /************************************************************************************/
        /**************串口通信相关数据定义*******************/
        /**************************************************************************************/
        public int PacketSizeImu = 17;//IMU包的数据长度
        public int PacketSizeAcceleroMeter = 11;//加速度包的数据长度
        public int PacketSizeGeomagnetic = 11;//地磁计的包的数据长度
        public int PacketSizeProp = 13;    //遥控器包的数据长度
        public int PacketSizeSwitch = 13;   //开关包的数据长度
        public int PacketSizeRoadPoint = 19;    //路点包的数据长度//侏罗纪11 //pro版本19
        public int PacketSizeMotor = 17;    //电机包的数据长度
        public int PacketSizeSpeed = 11;      //速度包的数据长度
        public int PacketSizeGps = 25;       //GPS包的数据长度
        public int PacketSizeState = 21;     //状态包的数据长度//侏罗纪17 //pro版本的17
        public int PacketSizeXbee = 7;     //xbee包的数据长度
        byte cRxData;
        bool cRxDataflg = false;
        byte[] cIndexHeader = { 0, 0, 0, 0, 0 };
        int nRxDataCount = 0;
        int nPacketSize = 0;
        byte[] m_RxData = new byte[512];
        ShowDataClass AllAerocraftData = new ShowDataClass();
        public SerialPortModel Port { get; set; }
        public bool IsRecSend1 { get; set; }
        public bool IsRecSend2 { get; set; }
        public bool IsStop { get; set; }
        /************************************************************************************/
        /**************串口通信相关数据定义*******************/
        /**************************************************************************************/
        /*************************************************************************************/
        /*************标志位及发送的指令*****************************************************/
        /**********************************************************************************/
        public int AutoWing_OneKeyBack_Flag = 0;
        public int FlightReturn = 2;//直线返航

        public int AutoWing_AutoLanding_Flag = 0;

        public int FlightLanding = 1;//自主着陆
        public int AutoWing_OneKeyBack_Line_Flag = 0;
        public int AutoWing_OneKeyBack_Path_Flag = 0;
        public int AutoWing_AutoTakeOff_Flag = 0;
        public int FlightTakeOff = 1;//自主起飞

        public int AutoWing_RoadPoint_Flag = 0;
        int WayPoint_NumS = 0;//载入路点的总个数
        int First_Send_Flag = 0;
        /// <summary>
        /// 航拍添加的数组
        /// </summary>
        double[] WayPoint_Lat = new double[100];
        double[] WayPoint_Lon = new double[100];
        double[] WayPoint_Height = new double[100];
        double[] WayPoint_HoverTimer = new double[100];
        int[] WayPoint_SetIndex = new int[100];
        int[] WayPoint_KeepIndex1 = new int[100];
        double[] WayPoint_Yaw = new double[100];
        double[] WayPoint_HengxiangSudu = new double[100];
        double[] WayPoint_ZongshangSudu = new double[100];
        double[] WayPoint_ZongxiaSudu = new double[100];
        double[] WayPoint_KeepIndex2 = new double[100];


        double[] UsedWayPoint_Height = new double[100];
        double[] UsedWayPoint_HoverTimer = new double[100];
        int[] UsedWayPoint_SetIndex = new int[100];
        int[] UsedWayPoint_KeepIndex1 = new int[100];
        double[] UsedWayPoint_Yaw = new double[100];
        double[] UsedWayPoint_HengxiangSudu = new double[100];
        double[] UsedWayPoint_ZongshangSudu = new double[100];
        double[] UsedWayPoint_ZongxiaSudu = new double[100];
        double[] UsedWayPoint_KeepIndex2 = new double[100];


        int Which_Road_Point = 0;
        int Which_Data_Bag = 1;
        int TakePhotoSend_Flag = 0;
        double AltitudeSend_Value = 0;
        float VelSend_Flag = 0;
        float VelSend_Value = 0;
        double YawSend_Value = 0;
        int PlanSend_Flag = 0;
        int SetCameraAngleSend_Flag = 0;

        ////////////////////////开始绘制轨迹标志/////////////////////////////
        int Start_DrawRoute_Flag = 1;
        /*************************************************************************************/
        /*************标志位及发送的指令*****************************************************/
        /**********************************************************************************/
        /************************数据保存******************************************/
        public List<ShowDataClass> list_Save_Data = new List<ShowDataClass>();
        int Dat_Save_Flag = 0;
        int Save_Count = 0;
        /************************数据保存******************************************/
        bool EndFlag = true;                            // 线程循环标志
        bool ResultUpdate;
        bool AlertFlag = true;
        int FinishMode = 0;

        GMapMarker UAVMarker;                           // 当前无人机标志
        GMapMarker UAVMarker_two;

        GMapMarker WaypointMarker;                      // 无人机目标标志
        GMapMarker NWaypointMarker;                     // 无人机目标标记 (航点设置无人机)
        GMapMarker HomeMarker;							// Home标志
        GMapRoute UAVRoute;                             // UAV轨迹

        GMapRoute UAVRoute_two;

        GMapMarker SubMarker;							// GPS
        GMapRoute SubRoute;                             // GPS


        PointData GpsModule;							// GPS经纬度

        bool PipeConnected;
        System.Net.Sockets.Socket Client;                                  // 套接字（socket）通信
        //PipeServer pServer;							
        XmlManager DataConstellation;                   // XML 数据管理
        SetData SettingData;							// GUI 配置管理数据
        TouchControl MultiTouchControl;                 // 触摸
        DataWindow Dwindow;                             // 无人机信息数据屏幕
        MultiWaypointWindow MMWinfow;

        int WaypointCount = 0;                          // 航点数量（基本创建一个）
        System.Windows.Forms.Timer CommandTimer;        // 按下并且按住
        int CommandFlag = 0;                            // 命令按钮标志      
        bool PlayFlag = false;                          // 日志暂停和开始标志
        bool PlayState = false;							// true:飞行日志 false:UAV通信
        int PlayCount = 0;								// 播放时间计数
        bool WindowSwitch = true;						// true:横型表示　false:纵型表示
        int DisconnectCount = -1;						// 连接释放计数
        int ConnectCount;								// 连接数

        // 选项屏幕
        int _ModelWindowID = 0;							//
        int _WaypointWindowID = 0;						//
        bool OptionWindowEvent = false;					//

        // Popup表示
        Popup Popup;									// 描述消息弹出命令按钮，等等。
        System.Windows.Controls.Label Label;			// 标签为命令按钮等的说明消息
        int _popupCount = 0;
        int _popupMode = 0;


        //过程
        //        PerformanceCounter pc = new PerformanceCounter("Processor", "% Processor Time", "_Total");
        // 时间
        System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
        System.Diagnostics.Stopwatch WaitTime = new System.Diagnostics.Stopwatch();

        // 结构处理
        object obj = new object();

        // 日志
        private static readonly ILog _logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        // 音频设备
        private MMDevice _mmd = null;

        // 基站 GPSMode
        int GPSMode = 0;
        #endregion

        #region MainWindow
        /// <summary>
        /// MainWindow
        /// </summary>
        /// <remarks>
        /// 主窗口处理 (XML 文件编辑 / 核心部分启动过程 / 每个初始化设置)
        /// </remarks>
        public MainWindow()
        {
#if DEBUG
			_logger.Debug("[TEST]再调试跟踪中使用");
			_logger.Info("[TEST]信息（操作信息等）");
			_logger.Warn("[TEST]注意／警告（故障提醒）");
			_logger.Error("[TEST]未能停止系统");
			_logger.Fatal("[TEST]致命故障停止系统");
#endif
            try
            {
                _logger.Info("MainWindow-S");

                //将事件与事件处理程序关联
                //你可以写到适当的位置，如窗体的构造函数
                //SystemEvents.SessionEnding +=new SessionEndingEventHandler(SystemEvents_SessionEnding);
                SrttingDirectoryCheck();
#if DEBUG
				// 运行的核心
				if (System.IO.File.Exists(System.IO.Path.GetFullPath(@"../Core/Start_X-Monitor_CoreD.bat")) == true)
				{
					Process.Start(System.IO.Path.GetFullPath(@"../Core/Start_X-Monitor_CoreD.bat"));
				}
				else
				{
					System.Windows.MessageBox.Show("(102) 不能运行的核心。\n" + System.IO.Path.GetFullPath(@"../Core/Start_X-Monitor_CoreD.bat"));
					FinishMode = -1;	
					Close();
				}
#else
                // 运行的核心
                if (System.IO.File.Exists(System.IO.Path.GetFullPath(@"../Core/Start_X-Monitor_Core.bat")) == true)
                {
                    ProcessStartInfo psInfo = new ProcessStartInfo();
                    psInfo.FileName = System.IO.Path.GetFullPath(@"../Core/Start_X-Monitor_Core.bat");		// 要运行文件
                    psInfo.WindowStyle = ProcessWindowStyle.Hidden;		// DOS 窗口处于隐藏状态
                    psInfo.CreateNoWindow = true;						// 不要打开控制台窗口
                    psInfo.UseShellExecute = false;						// 不使用 shell 函数
                    Process.Start(psInfo);
                    _logger.Info("CoreUnit Process.Start:" + System.IO.Path.GetFullPath(@"../Core/Start_X-Monitor_Core.bat"));
                }
                else
                {
                    System.Windows.MessageBox.Show("(102)Core Execution Failure。\n" + System.IO.Path.GetFullPath(@"../Core/Start_X-Monitor_Core.bat"));
                    _logger.Error("(102)Core Execution Failure。\n" + System.IO.Path.GetFullPath(@"../Core/Start_X-Monitor_Core.bat"));
                    FinishMode = -1;
                    Close();
                }
#endif
                _logger.Info("InitializeComponent-S:");

                // 核心开始检查
                //CoreOpenCheck();
                Thread.Sleep(1000);
                // MainWindow初始化
                InitializeComponent();
                _logger.Info("Init-s:");
                // 初始设定 
                Init();
                Init_WorkRadius_Index();
                Init_PortIndex();//串口的初始设定
                _logger.Info("ConnectLoop-s:");
                // 正在等待连接为核心
                if (!ConnectLoop())
                {
                    FinishMode = -1;
                    Close();
                    return;
                }
                _logger.Info("InitializeComponent-E:");

                // 试点的日志保留时间
                //OpenPilotLogWindow();	// TODO
                //		OpenMessageWindow();
                //========================创建用于保存的文件夹================================//
                if (!(File.Exists("C:\\AutoWing")))
                {
                    System.IO.Directory.CreateDirectory("C:\\AutoWing");
                }
                // 线程循环
                WorkThread();
                btnOpenPort.Click += delegate(object sender, RoutedEventArgs e)
                {
                    if ((bool)btnOpenPort.IsChecked)
                    {
                        //if ((string)cmbPortName.SelectedItem == null)
                        //{
                        //    System.Windows.MessageBox.Show("请先插入数传");
                        //    btnOpenPort.IsChecked = false;
                        //    return;
                        //}
                        //  Port.PortName = (string)cmbPortName.SelectedItem;
                        int m_com = GetComNum();
                        if (m_com == -1)
                        {
                            //Function_Wait();
                            //    System.Windows.MessageBox.Show("请先插入数传");
                            btnOpenPort.IsChecked = false;
                            return;
                        }
                        try
                        {
                            Port.PortName = "COM" + m_com.ToString();
                            Port.BaudRate = Convert.ToInt32(cmbBaudRate.SelectedItem);
                            Port.Open();
                            Dat_Save_Flag = 1;
                            Constants.Motor_Show_Flag = 1;
                            open_com_flag = true;
                        }
                        catch (Exception ex)
                        {
                            System.Windows.MessageBox.Show(ex.Message);
                            btnOpenPort.IsChecked = false;
                            return;
                        }
                        cmbBaudRate.IsEnabled = false;
                        cmbPortName.IsEnabled = false;
                    }
                    else
                    {
                        Port.Close();
                        cmbBaudRate.IsEnabled = true;
                        cmbPortName.IsEnabled = true;
                    }
                };
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show("(101) Initialization Error: " + ex.Message);
                _logger.Error("(101) Initialization Error: " + ex.Message);
                FinishMode = -1;
                Close();
            }
            pWin = this;
        }
        /// <summary>
        /// 主窗口结束时间事件
        /// </summary>
        /// <remarks>
        /// 主窗口最后确定关闭检查/配置文件更新 (核心，关闭)
        /// </remarks>
        private void MainWindowCosing(object sender, CancelEventArgs e)
        {
            try
            {
                if (EndFlag)
                {
                    if (FinishMode == 0)
                    {
                        #region 关闭
                        // 关闭确认对话框
                        if (System.Windows.Forms.MessageBox.Show("Exit The Monitor?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.No)
                        {
                            e.Cancel = true;
                            EndFlag = true;
                        }
                        else
                        {
                            if (SettingData.ModeSetting == "Multiple Points" && DataConstellation.BindingData.nFlightMode == 2)
                            {
                                MultiWaypointClose();
                            }
                            FinishMode = -1;
                            //定时器停止
                            sw.Stop();

                            // 线程循环结束
                            EndFlag = false;

                            Dwindow.Close();
                            MMWinfow.Close();


                            UAVMarker.Mode = int.MaxValue;
                            WaypointMarker.Mode = int.MaxValue;
                            NWaypointMarker.Mode = int.MaxValue;
                            HomeMarker.Mode = int.MaxValue;

                            UAVMarker.Clear();
                            WaypointMarker.Clear();
                            NWaypointMarker.Clear();
                            HomeMarker.Clear();

                            MainMap.Markers.Clear();
                            MainMap.Dispose();
                            //MainMap.Manager.BoostCacheEngine = true;

                            //if (WindowState == WindowState.Normal)
                            {
                                // 存储设置值窗格
                                Properties.Settings.Default.MainWindow_Left = Left;
                                Properties.Settings.Default.MainWindow_Top = Top;
                                Properties.Settings.Default.MainWindow_Width = Width;
                                Properties.Settings.Default.MainWindow_Height = Height;
                                Properties.Settings.Default.Lat = MainMap.Position.Lat;
                                Properties.Settings.Default.Lng = MainMap.Position.Lng;
                                Properties.Settings.Default.AlertLink = DataConstellation.BindingData.Health.AlertLinkValue;
                                Properties.Settings.Default.AlertRCrec = DataConstellation.BindingData.Health.AlertRCrecValue;
                                Properties.Settings.Default.AlertVoltage = DataConstellation.BindingData.Health.AlertVolValue;
                                Properties.Settings.Default.VoltageMin = DataConstellation.BindingData.Health.VolMinValue;
                                Properties.Settings.Default.VoltageMax = DataConstellation.BindingData.Health.VolMaxValue;
                                Properties.Settings.Default.AlertLinkSound = SettingData.AlertLinkSoundFlag;
                                Properties.Settings.Default.AlertVoltageSound = SettingData.AlertVoltageSoundFlag;
                                Properties.Settings.Default.AlertLinkView = SettingData.AlertLinkViewFlag;
                                Properties.Settings.Default.AlertVoltageView = SettingData.AlertVoltageViewFlag;
                                Properties.Settings.Default.AlertGPS = DataConstellation.BindingData.Health.AlertGPSValue;
                                Properties.Settings.Default.AlertGPSView = SettingData.AlertGPSViewFlag;
                                Properties.Settings.Default.AlertGPSSound = SettingData.AlertGPSSoundFlag;
                                Properties.Settings.Default.Provider = MainMap.MapProvider.ToString();
                                // 保存到文件 
                                Properties.Settings.Default.Save();
                            }
                            #region 初始值日志
                            _logger.Info("[CLOSE]XMonitorVersion:" + Properties.Settings.Default.XMonitorVersion.ToString());
                            _logger.Info("[CLOSE]DeviceMode:" + SettingData.DeviceMode.ToString());
                            _logger.Info("[CLOSE]Online:" + SettingData.Online.ToString());
                            _logger.Info("[CLOSE]MapProvider:" + MainMap.MapProvider.ToString());
                            _logger.Info("[CLOSE]ProviderCopyright:" + SettingData.ProviderCopyright);
                            _logger.Info("[CLOSE]AlertLink:" + Properties.Settings.Default.AlertLink.ToString());
                            _logger.Info("[CLOSE]AlertRCrec:" + Properties.Settings.Default.AlertRCrec.ToString());
                            _logger.Info("[CLOSE]AlertVoltage:" + Properties.Settings.Default.AlertVoltage.ToString());
                            _logger.Info("[CLOSE]VoltageMax:" + Properties.Settings.Default.VoltageMax.ToString());
                            _logger.Info("[CLOSE]VoltageMin:" + Properties.Settings.Default.VoltageMin.ToString());
                            _logger.Info("[CLOSE]AlertGPS:" + Properties.Settings.Default.AlertGPS.ToString());
                            #endregion

                            //释放事件
                            //也可能在窗体的Dispose 方法调用基类 Dispose 方法之前
                            Microsoft.Win32.SystemEvents.PowerModeChanged -= new Microsoft.Win32.PowerModeChangedEventHandler(SystemEvents_PowerModeChanged);
                        }
                        #endregion
                    }
                    else if (FinishMode == 1)
                    {
                        #region 版本的终结
                        FinishMode = -1;
                        //不同的版本:
                        //停止定时器
                        sw.Stop();

                        //MainMonitorClear(0);

                        System.Windows.MessageBox.Show("Minisurveyo、X-Monitor地面站终结。\n 或者未经授权。"
                            + "\n  X-Monitor: Ver " + Properties.Settings.Default.XMonitorVersion
                            + "\n  Minisurveyor(L): Ver " + DataConstellation.BindingData.Health.FirmwareVersionL
                            + "\n  Minisurveyor(H): Ver " + DataConstellation.BindingData.Health.FirmwareVersionH);
                        _logger.Error("(000) Minisurveyo、X-Monitor不是正确的版本。"
                            + "  X-Monitor: Ver " + Properties.Settings.Default.XMonitorVersion
                            + "  Minisurveyor(L): Ver " + DataConstellation.BindingData.Health.FirmwareVersionL
                            + "  Minisurveyor(H): Ver " + DataConstellation.BindingData.Health.FirmwareVersionH);
                        // 线程循环结束
                        EndFlag = false;

                        Dwindow.Close();
                        MMWinfow.Close();

                        UAVMarker.Mode = int.MaxValue;
                        WaypointMarker.Mode = int.MaxValue;
                        NWaypointMarker.Mode = int.MaxValue;
                        HomeMarker.Mode = int.MaxValue;

                        UAVMarker.Clear();
                        WaypointMarker.Clear();
                        NWaypointMarker.Clear();
                        HomeMarker.Clear();

                        MainMap.Markers.Clear();
                        MainMap.Dispose();
                        #endregion
                    }
                    else
                    {
                        // 其他
                        #region 结束
                        //定时器停止
                        sw.Stop();

                        // 线程循环结束
                        EndFlag = false;

                        Dwindow.Close();
                        MMWinfow.Close();

                        UAVMarker.Mode = int.MaxValue;
                        WaypointMarker.Mode = int.MaxValue;
                        NWaypointMarker.Mode = int.MaxValue;
                        HomeMarker.Mode = int.MaxValue;

                        UAVMarker.Clear();
                        WaypointMarker.Clear();
                        NWaypointMarker.Clear();
                        HomeMarker.Clear();

                        MainMap.Markers.Clear();
                        MainMap.Dispose();
                        #endregion
                    }
                }
                else
                {
                    System.Windows.MessageBox.Show("Monitor Exit。");
                }
                if (!EndFlag)
                {

#if DEBUG
					// 运行的核心
					if (System.IO.File.Exists(System.IO.Path.GetFullPath(@"../Core/Stop_X-Monitor_CoreD.bat")) == true)
					{
						Process.Start(System.IO.Path.GetFullPath(@"../Core/Stop_X-Monitor_CoreD.bat"));
					}
					else
					{
						System.Windows.MessageBox.Show("(002) 无法完成核心。\n手动，请退出\n" + System.IO.Path.GetFullPath(@"../Core/X-Monitor/bin/Stop_X-Monitor_CoreD.bat"));
					}
#else
                    // 运行的核心
                    if (System.IO.File.Exists(System.IO.Path.GetFullPath(@"../Core/Stop_X-Monitor_Core.bat")) == true)
                    {
                        ProcessStartInfo psInfo = new ProcessStartInfo();
                        psInfo.FileName = System.IO.Path.GetFullPath(@"../Core/Stop_X-Monitor_Core.bat");		// 要运行文件
                        psInfo.WindowStyle = ProcessWindowStyle.Hidden;		// DOS 窗口处于隐藏状态
                        psInfo.CreateNoWindow = true;						// 不要打开控制台窗口
                        psInfo.UseShellExecute = false;						// 不使用 shell 函数
                        Process.Start(psInfo);
                    }
                    else
                    {
                        System.Windows.MessageBox.Show("(002)Unfinished, Please Cancel Manually\n" + System.IO.Path.GetFullPath(@"../Core/X-Monitor/bin/Stop_X-Monitor_Core.bat"));
                        _logger.Error("(002)Unfinished, Please Cancel Manually\n" + System.IO.Path.GetFullPath(@"../Core/X-Monitor/bin/Stop_X-Monitor_Core.bat"));
                    }
#endif
                }
                Popup.IsOpen = false;
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show("(001) Close Error: " + ex.Message);
                _logger.Error("(001) Close Error: " + ex.Message);
                FinishMode = -1;
                Close();
            }

        }

        public bool MainWindowsEnabled()
        {
            return EndFlag;
        }

        private void OpenPilotLogWindow()
        {
            PilotLogWindow Pwindow = new PilotLogWindow();

            Pwindow.ShowDialog();                       //只有在窗口关闭返回主窗口

            // ================================================================================
            // 设置应用程序处理
            if (Pwindow.DialogResult == true)
            {
            }
            else
            {
                FinishMode = -1;
                Close();
            }
        }
        private void OpenMessageWindow()
        {
            Task.Factory.StartNew(() =>
            {
                try
                {
                    // 异步处理
                    Dispatcher.BeginInvoke((Action)(() =>
                    {
                        MessageWindow Mwindow = new MessageWindow();
                        Mwindow.flag = false;
                        if (Mwindow.Initialize())
                        {
                            Mwindow.ShowDialog();
                        }

                        if (Mwindow.Online)
                        {
                            SettingData.Online = true;
                            //MainMap.Manager.Mode = AccessMode.ServerAndCache;
                        }
                        else
                        {
                            SettingData.Online = false;
                            //MainMap.Manager.Mode = AccessMode.CacheOnly;
                        }
                        Mwindow.Close();
                    }));

                }
                catch (Exception ex)
                {
                    System.Windows.MessageBox.Show("Message Error: " + ex.Message);
                    _logger.Error("Message Error: " + ex.Message);
                }
            });



            // Mwindow.Show();

            //// ================================================================================
            //// 设置应用程序处理
            //if (Mwindow.DialogResult == true)
            //{
            //    Mwindow.Close();
            //}
            //else
            //{
            //}
        }

        private void SrttingDirectoryCheck()
        {
            try
            {
                string localPath = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\";
                string appPath = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location);
                Debug.WriteLine("appPath: " + appPath);
                _logger.Info("System.IO.Path.GetDirectoryName:" + localPath);
                _logger.Info("System.IO.Path.GetDirectoryName:" + appPath);

                //更改当前目录
                System.Environment.CurrentDirectory = appPath;

                // 请检查目录是否存在
                if (!System.IO.Directory.Exists(localPath))
                {
                    // 创建一个新文件夹
                    System.IO.DirectoryInfo di = System.IO.Directory.CreateDirectory(localPath + @"X-Monitor\Setting\Core");
                    di = System.IO.Directory.CreateDirectory(localPath + @"X-Monitor\Setting\GUI");
                    di = System.IO.Directory.CreateDirectory(localPath + @"X-Monitor\Temp");
                    di = System.IO.Directory.CreateDirectory(localPath + @"X-Monitor\FlightLog");

                    // 正在复制安装文件
                    System.IO.File.Copy(appPath + @"\Setting.xml", localPath + @"X-Monitor\Setting\Core\Setting.xml");
                    System.IO.File.Copy(appPath + @"\Xml\Settings.xml", localPath + @"X-Monitor\Setting\GUI\Settings.xml");

                    // 从 XML 文件加载 xml 数据
                    XDocument _xml = XDocument.Load(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\Core\Setting.xml");

                    // Core/Setting.xml 文件路径更改
                    string path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\FlightLog\";
                    _xml.Root.XPathSelectElement("FlightLog/FilePath").Value = path;
                    _xml.Save(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\Core\Setting.xml");

                    // 临时文件路径更改
                    _xml = XDocument.Load(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\GUI\Settings.xml");
                    _xml.Root.XPathSelectElement("Settings/FilePath/FlightLog").Value = path;
                    path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Temp\";
                    _xml.Root.XPathSelectElement("Settings/FilePath/TempFile").Value = path;
                    _xml.Save(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\GUI\Settings.xml");

                    Properties.Settings.Default.Initialization = true;  //
                }


                SrttingFileCheck(localPath, appPath);



                // 从 XML 文件加载 xml 数据
                XDocument xml = XDocument.Load(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\Core\Setting.xml");
                string flightLogPath = xml.Root.XPathSelectElement("FlightLog/FilePath").Value;
                _logger.Info("FlightLog/FilePath:" + flightLogPath);

                // 执行初始启动只 (指定的文件路径)
                if (!Properties.Settings.Default.Initialization || !System.IO.Directory.Exists(flightLogPath))
                {

                    // 核心文件路径更改
                    string path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\FlightLog\";
                    var port = xml.Root.XPathSelectElement("Comm/MainPort").Value;
                    if (Properties.Settings.Default.COMPort == "COM0")
                    {
                        xml.Root.XPathSelectElement("FlightLog/FilePath").Value = path;
                    }
                    else
                    {
                        xml.Root.XPathSelectElement("FlightLog/FilePath").Value = path + Properties.Settings.Default.COMPort + @"\";
                    }
                    xml.Save(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\Core\Setting.xml");

                    // 临时文件路径更改
                    xml = XDocument.Load(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\GUI\Settings.xml");
                    xml.Root.XPathSelectElement("Settings/FilePath/FlightLog").Value = path;
                    path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Temp\";
                    xml.Root.XPathSelectElement("Settings/FilePath/TempFile").Value = path;
                    xml.Save(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\GUI\Settings.xml");

                    Properties.Settings.Default.Initialization = true;  //
                }


                System.Threading.Thread.Sleep(1000); //1000ms
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show("(101-1) Initialization Error: " + ex.Message);
                _logger.Error("(101-1) Initialization Error: " + ex.Message);
                FinishMode = -1;
                Close();
            }

        }
        private void SrttingFileCheck(string localPath, string appPath)
        {
            try
            {
                // GUI/Settings.xml
                if (!System.IO.File.Exists(localPath + @"X-Monitor\Setting\GUI\Settings.xml"))
                {
                    // 正在复制安装文件
                    System.IO.File.Copy(appPath + @"\..\Core\Setting.xml", localPath + @"X-Monitor\Setting\Core\Setting.xml", true);

                    string path = "";
                    if (!System.IO.File.Exists(localPath + @"X-Monitor\Setting\GUI\Settings.xml"))
                    {
                        System.IO.File.Copy(appPath + @"\Xml\Settings.xml", localPath + @"X-Monitor\Setting\GUI\Settings.xml", true);

                        // 临时文件路径更改
                        XDocument _xml = XDocument.Load(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\GUI\Settings.xml");
                        path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\FlightLog\";

                        _xml.Root.XPathSelectElement("Settings/FilePath/FlightLog").Value = path;
                        path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Temp\";
                        _xml.Root.XPathSelectElement("Settings/FilePath/TempFile").Value = path;
                        _xml.Save(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\GUI\Settings.xml");
                    }

                    // 从 XML 文件加载 xml 数据
                    XDocument _xml2 = XDocument.Load(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\Core\Setting.xml");

                    //Core/Setting.xml 文件路径更改
                    path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\FlightLog\";
                    _xml2.Root.XPathSelectElement("FlightLog/FilePath").Value = path;
                    _xml2.Save(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\Core\Setting.xml");


                }
                else
                {
                    //文件检查
                    System.IO.FileInfo fi = new System.IO.FileInfo(localPath + @"X-Monitor\Setting\GUI\Settings.xml");

                    long filesize = fi.Length;		//获取文件的大小
                    if (filesize < 1000)
                    {
                        // 正在复制安装文件
                        System.IO.File.Copy(appPath + @"\..\Core\Setting.xml", localPath + @"X-Monitor\Setting\Core\Setting.xml", true);

                        string path = "";
                        if (!System.IO.File.Exists(localPath + @"X-Monitor\Setting\GUI\Settings.xml"))
                        {
                            System.IO.File.Copy(appPath + @"\Xml\Settings.xml", localPath + @"X-Monitor\Setting\GUI\Settings.xml", true);

                            //临时文件路径更改
                            XDocument _xml = XDocument.Load(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\GUI\Settings.xml");
                            path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\FlightLog\";

                            _xml.Root.XPathSelectElement("Settings/FilePath/FlightLog").Value = path;
                            path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Temp\";
                            _xml.Root.XPathSelectElement("Settings/FilePath/TempFile").Value = path;
                            _xml.Save(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\GUI\Settings.xml");
                        }

                        // 从 XML 文件加载 xml 数据
                        XDocument _xml2 = XDocument.Load(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\Core\Setting.xml");

                        //Core/Setting.xml 文件路径更改
                        path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\FlightLog\";
                        _xml2.Root.XPathSelectElement("FlightLog/FilePath").Value = path;
                        _xml2.Save(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\Core\Setting.xml");


                    }
                }
                // Core/Setting.xml
                if (!System.IO.File.Exists(localPath + @"X-Monitor\Setting\Core\Setting.xml"))
                {
                    // 正在复制安装文件
                    System.IO.File.Copy(appPath + @"\..\Core\Setting.xml", localPath + @"X-Monitor\Setting\Core\Setting.xml", true);

                    string path = "";
                    if (!System.IO.File.Exists(localPath + @"X-Monitor\Setting\GUI\Settings.xml"))
                    {
                        System.IO.File.Copy(appPath + @"\Xml\Settings.xml", localPath + @"X-Monitor\Setting\GUI\Settings.xml", true);

                        // 临时文件路径更改
                        XDocument _xml = XDocument.Load(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\GUI\Settings.xml");
                        path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\FlightLog\";

                        _xml.Root.XPathSelectElement("Settings/FilePath/FlightLog").Value = path;
                        path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Temp\";
                        _xml.Root.XPathSelectElement("Settings/FilePath/TempFile").Value = path;
                        _xml.Save(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\GUI\Settings.xml");
                    }

                    // 从 XML 文件加载 xml 数据
                    XDocument _xml2 = XDocument.Load(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\Core\Setting.xml");

                    // Core/Setting.xml 文件路径更改
                    path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\FlightLog\";
                    _xml2.Root.XPathSelectElement("FlightLog/FilePath").Value = path;
                    _xml2.Save(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\Core\Setting.xml");


                }
                else
                {
                    // 文件检查
                    System.IO.FileInfo fi = new System.IO.FileInfo(localPath + @"X-Monitor\Setting\Core\Setting.xml");

                    long filesize = fi.Length;		//获取文件的大小
                    if (filesize == 0)
                    {
                        // 正在复制安装文件
                        System.IO.File.Copy(appPath + @"\..\Core\Setting.xml", localPath + @"X-Monitor\Setting\Core\Setting.xml", true);

                        string path = "";
                        if (!System.IO.File.Exists(localPath + @"X-Monitor\Setting\GUI\Settings.xml"))
                        {
                            System.IO.File.Copy(appPath + @"\Xml\Settings.xml", localPath + @"X-Monitor\Setting\GUI\Settings.xml", true);

                            // 临时文件路径更改
                            XDocument _xml = XDocument.Load(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\GUI\Settings.xml");
                            path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\FlightLog\";

                            _xml.Root.XPathSelectElement("Settings/FilePath/FlightLog").Value = path;
                            path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Temp\";
                            _xml.Root.XPathSelectElement("Settings/FilePath/TempFile").Value = path;
                            _xml.Save(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\GUI\Settings.xml");
                        }

                        // 从 XML 文件加载 xml 数据
                        XDocument _xml2 = XDocument.Load(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\Core\Setting.xml");

                        // Core/Setting.xml 文件路径更改
                        path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\FlightLog\";
                        _xml2.Root.XPathSelectElement("FlightLog/FilePath").Value = path;
                        _xml2.Save(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\Core\Setting.xml");
                    }
                }
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show("(101-2) Initialization Error: " + ex.Message);
                _logger.Error("(101-2) Initialization Error: " + ex.Message);
                FinishMode = -1;
                Close();
            }

        }

        //当您尝试注销时，关闭
        //private void SystemEvents_SessionEnding(object sender, SessionEndingEventArgs e)
        //{
        //	string s = "";
        //	if (e.Reason == SessionEndReasons.Logoff)
        //	{
        //		s = "ログオフしようとしています。";
        //	}
        //	else if (e.Reason == SessionEndReasons.SystemShutdown)
        //	{
        //		s = "シャットダウンしようとしています。";
        //	}
        //	if (System.Windows.Forms.MessageBox.Show(s + "\n\nキャンセルしますか？", "質問", MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
        //	{
        //		//キャンセルする
        //		e.Cancel = true;
        //	}
        //}

        // 核心开始检查
        private void CoreOpenCheck()
        {
            System.Diagnostics.Process[] hProcesses = System.Diagnostics.Process.GetProcessesByName("X-Monitor(Core)");
            string stPrompt = string.Empty;
            foreach (System.Diagnostics.Process hProcess in hProcesses)
            {
                stPrompt += hProcess.Id + System.Environment.NewLine;
            }
            if (stPrompt == string.Empty)
            {
                System.Windows.MessageBox.Show("(000-A) Initialization Error(Core)");
                _logger.Error("(000-A) Initialization Error(Core)");
                FinishMode = -1;
                Close();
            }
        }
        #endregion

        #region 初始设置
        /// <summary>
        /// X-Monitor初始化类
        /// </summary>
        /// <remarks>
        /// X-Monitor初始化 (平板 / 屏幕设置 /GMap.Net。 设置 / 数据设置)
        /// </remarks>
        private void Init()
        {
            SettingData = new SetData();
            #region 平板电脑设置
            // ================================================================================
            // 平板电脑检测和配置
            SettingData.DeviceMode = true;              // true:Mouse   false:Touch
            foreach (TabletDevice tabletDevice in Tablet.TabletDevices)
            {
                //触摸功能检测
                if (tabletDevice.Type == TabletDeviceType.Touch)
                {
                    SettingData.DeviceMode = false;     // true:Mouse   false:Touch
                }
            }
            MainMap.TouchEnabled = false;               // 为触摸操作鼠标操作期间禁用 (关闭笔的地图传输功能)
            ChangeTouchMouse(SettingData.DeviceMode, true);   // 触摸-鼠标操作开关

            // ================================================================================
            // 多点触摸操作-初始设置
            System.Windows.Point initp = new System.Windows.Point();
            MultiTouchControl = new TouchControl(0, 0, 0, initp, initp, initp, 0, 0, 0, 0, false);

            #endregion

            #region 初始设置
            // ================================================================================
            // 背景设置
            Resources["WindowBackgroundBrush"] = new SolidColorBrush(Color.FromRgb(27, 57, 63));
            ZoomName.ZoomBackground = new SolidColorBrush(Color.FromRgb(27, 57, 63));
            ZoomName.ZoomBackground.Opacity = 0.9;
            Resources["CanvasBackgroundBrush"] = ZoomName.ZoomBackground;

            // ================================================================================
            // GMap.NET初始设置
            SettingData.Online = true;
            MainMap.Manager.Mode = AccessMode.ServerAndCache;
            GMapProvider.WebProxy = System.Net.WebRequest.GetSystemWebProxy();
            GMapProvider.WebProxy.Credentials = System.Net.CredentialCache.DefaultCredentials;
            MainMap.MapProvider = GMapProviders.BingSatelliteMap; //OpenStreetMap GaoDeSatellite       OviSatelliteMap           BingSatelliteMap                 //地图提供商
            Copyright.Content = GMapProviders.BingSatelliteMap.Copyright;                            // 地图提供商版权所有

            if (Properties.Settings.Default.Lat != 0 && Properties.Settings.Default.Lng != 0)
            {
                MainMap.Position = new PointLatLng(Properties.Settings.Default.Lat, Properties.Settings.Default.Lng);               // 地图显示经度纬度
            }
            else
            {
                //MainMap.Position = new PointLatLng(35.6309798101829, 140.10317891836166);	//千葉大学
                MainMap.Position = new PointLatLng(31.9162754963, 118.8053374789);	//南京九龙湖
            }
            // MainMap.ShowTileGridLines = false;                                                     // GMap.NET 地图平铺网格显示/隐藏
            //	MapProviderSelected(Properties.Settings.Default.Provider);
            /*================================版本信息初始化=======================================*/
            for (int i = 0; i < 20; i++)
            {
                All_Equipment_Info.IMU_HardWare_Version[i] = 32;
                All_Equipment_Info.IMU_SoftWare_Version[i] = 32;
                All_Equipment_Info.IMU_Equipment_ID[i] = 32;
                All_Equipment_Info.AP_HardWare_Version[i] = 32;
                All_Equipment_Info.AP_SoftWare_Version[i] = 32;
                All_Equipment_Info.AP_Equipment_ID[i] = 32;
                All_Equipment_Info.LED_HardWare_Version[i] = 32;
                All_Equipment_Info.LED_SoftWare_Version[i] = 32;
                All_Equipment_Info.LED_Equipment_ID[i] = 32;
                All_Equipment_Info.MAG_HardWare_Version[i] = 32;
                All_Equipment_Info.MAG_SoftWare_Version[i] = 32;
                All_Equipment_Info.MAG_Equipment_ID[i] = 32;
                All_Equipment_Info.GPS_HardWare_Version[i] = 32;
                All_Equipment_Info.GPS_SoftWare_Version[i] = 32;
                All_Equipment_Info.GPS_Equipment_ID[i] = 32;
                All_Equipment_Info.HUB_Equipment_ID[i] = 32;
                All_Equipment_Info.HUB_HardWare_Version[i] = 32;
                All_Equipment_Info.HUB_SoftWare_Version[i] = 32;
                All_Equipment_Info.FDR_HardWare_Version[i] = 32;
                All_Equipment_Info.FDR_SoftWare_Version[i] = 32;
                All_Equipment_Info.FDR_Equipment_ID[i] = 32;

                All_Equipment_Info.DTU_HardWare_Version[i] = 32;
                All_Equipment_Info.DTU_SoftWare_Version[i] = 32;
                All_Equipment_Info.DTU_Equipment_ID[i] = 32;

            }
            if (File.Exists("C:\\AutoWing\\Maintain_Timers.txt"))
            {
                StreamReader sr = File.OpenText("C:\\AutoWing\\Maintain_Timers.txt");
                int k = 0;//当前读取的是第几行
                String[] str = new String[2];
                while (sr.Peek() != -1)
                {
                    str[k] = sr.ReadLine();
                    k++;
                }
                Constants.User_Set_Maintaintimer = Convert.ToDouble(str[0]);//上次设置的保养时间
                Constants.User_Set_MaintainStartToEndTime = Convert.ToDouble(str[1]);//保养结束后的时间加设置的保养时间
                sr.Close();
            }
            else
            {
                Constants.User_Set_Maintaintimer = 36;
                Constants.User_Set_MaintainStartToEndTime = 36;
            }


            if (File.Exists("C:\\AutoWing\\HangpaiZhibaoStyle_Style.txt"))
            {
                StreamReader sr = File.OpenText("C:\\AutoWing\\HangpaiZhibaoStyle_Style.txt");
                int k = 0;//当前读取的是第几行
                String[] str = new String[1];
                while (sr.Peek() != -1)
                {
                    str[k] = sr.ReadLine();
                    k++;
                }
                Constants.Style_Change_HangPaiAndZhiBao_Flag = Convert.ToInt32(str[0]);//历史设置的模式
                sr.Close();
            }
            else
            {
                Constants.Style_Change_HangPaiAndZhiBao_Flag = 0;
            }

            if (Constants.Style_Change_HangPaiAndZhiBao_Flag==0)
            {
                Function_ZhiBao_Show();
            }
            else
            {
                Function_Hangpai_Show();
            }

            if (MainMap.MapProvider.ToString() == "国土地理院地图(航空)")
            {
                DisName.Foreground = Brushes.White;
                Copyright.Foreground = Brushes.White;
                TouchIcon.Background = Brushes.White;
                SettingIcon.Background = Brushes.White;
                PlayerSlide.TimeForeground = Brushes.White;
                MarkerIcon.Background = Brushes.White;
                GridLine.BorderBrush = Brushes.White;
                BuildView(Brushes.White);
            }
            else
            {
              //  DisName.Foreground = new SolidColorBrush(Color.FromRgb(31, 26, 80));
                Copyright.Foreground = new SolidColorBrush(Color.FromRgb(31, 26, 80));
             //   TouchIcon.Background = new SolidColorBrush(Color.FromRgb(31, 26, 80));
             //   SettingIcon.Background = new SolidColorBrush(Color.FromRgb(31, 26, 80));
                PlayerSlide.TimeForeground = new SolidColorBrush(Color.FromRgb(31, 26, 80));
             //   MarkerIcon.Background = new SolidColorBrush(Color.FromRgb(31, 26, 80));
                GridLine.BorderBrush = new SolidColorBrush(Color.FromRgb(31, 26, 80));
                BuildView(new SolidColorBrush(Color.FromRgb(31, 26, 80)));
            }
            if (Properties.Settings.Default.Function2 == "MapProvider")
            {
                if ((GMapProviders.GoogleHybridMap.ToString() == MainMap.MapProvider.ToString()))
                {
                    DisName.Foreground = Brushes.White;
                    Copyright.Foreground = Brushes.White;
                    TouchIcon.Background = Brushes.White;
                    SettingIcon.Background = Brushes.White;
                    PlayerSlide.TimeForeground = Brushes.White;
                    MarkerIcon.Background = Brushes.White;
                    GridLine.BorderBrush = Brushes.White;
                    Dis1.Stroke = Brushes.White;
                    BuildView(Brushes.White);
                }
            }
            // ================================================================================
            // 
            DataConstellation = new XmlManager();	// 初始化
            DataConstellation.Initialize();			// 初始化设定

            // ================================================================================
            // 初始化设定
            SettingData.Set = true;
            SettingData.ModeSetting = "未设定";
            SettingData.SerialPortSetting = "未连接";
            SettingData.AlertVoltageViewFlag = Properties.Settings.Default.AlertVoltageView;
            SettingData.AlertVoltageSoundFlag = Properties.Settings.Default.AlertVoltageSound;
            SettingData.AlertLinkSoundFlag = Properties.Settings.Default.AlertLinkSound;
            SettingData.AlertLinkViewFlag = Properties.Settings.Default.AlertLinkView;
            SettingData.AlertGPSViewFlag = Properties.Settings.Default.AlertGPSView;
            SettingData.AlertGPSSoundFlag = Properties.Settings.Default.AlertGPSSound;

            DataConstellation.BindingData.Health.AlertLinkValue = Properties.Settings.Default.AlertLink;
            DataConstellation.BindingData.Health.AlertRCrecValue = Properties.Settings.Default.AlertRCrec;
            DataConstellation.BindingData.Health.AlertVolValue = Properties.Settings.Default.AlertVoltage;
            DataConstellation.BindingData.Health.VolMinValue = Properties.Settings.Default.VoltageMin;
            DataConstellation.BindingData.Health.VolMaxValue = Properties.Settings.Default.VoltageMax;
            DataConstellation.BindingData.Health.AlertGPSValue = Properties.Settings.Default.AlertGPS;

            SettingData.TrajectoryMode = 1;             // 1:地图中心坐标 2:机体中心坐标 3: Waypoint中心坐标
            SettingData.TrajectoryFlag = false;
            SettingData.LatLngPoint = MainMap.Position;
            SettingData.ProviderCopyright = (string)Copyright.Content;
            SettingData.MapProvider = MainMap.MapProvider;
            SettingData.CoreIPaddress = Properties.Settings.Default.CoreIPaddress;
            SettingData.CorePort = Properties.Settings.Default.CorePort;

            // ================================================================================
            //　HealthData表示系统初始设定
            BatteryName.ValueMax = DataConstellation.BindingData.Health.VolMaxValue;
            BatteryName.ValueMin = DataConstellation.BindingData.Health.VolMinValue;
            BatteryName.ValueAlert = DataConstellation.BindingData.Health.AlertVolValue;
            GPSName.ValueAlert = DataConstellation.BindingData.Health.AlertGPSValue;
            LinkName.ValueAlert = DataConstellation.BindingData.Health.AlertLinkValue;
            RCrecName.ValueAlert = DataConstellation.BindingData.Health.AlertRCrecValue;

            // 计算网格之间的距离
            GPoint p = MainMap.FromLatLngToLocal(MainMap.Position);
            PointLatLng Point = MainMap.FromLocalToLatLng((int)p.X + GRID_SIZE, (int)p.Y);
            double dis = Math.Round(MainMap.MapProvider.Projection.GetDistance(MainMap.Position, Point), 4, MidpointRounding.AwayFromZero);
            dis *= 1000;    // km -> m
            DisName.Content = dis.ToString() + " m";

            #region 当前点获取
            SubRoute = new GMapRoute(new List<PointLatLng>());
            SubRoute.LineBrush = Brushes.Blue;
            MainMap.Markers.Add(SubRoute);
            SubMarker = new GMapMarker(new PointLatLng());
            {
                SubMarker.Shape = new CustomMarker(SubMarker, "Sub", "Resources/Sub.png");
                SubMarker.Offset = new System.Windows.Point(-15, -25);
                SubMarker.ZIndex = int.MaxValue - 4;
                //MainMap.Markers.Add(SubMarker);
            }
            if (Properties.Settings.Default.Function1.IndexOf("SubMarker") != -1)
            {
                MainMap.Markers.Add(SubMarker);
            }
            #endregion


            //初始化路径列表
            UAVRoute = new GMapRoute(new List<PointLatLng>());
            UAVRoute.LineBrush = Brushes.Red;
            MainMap.Markers.Add(UAVRoute);

            UAVRoute_two = new GMapRoute(new List<PointLatLng>());
            UAVRoute_two.LineBrush = Brushes.Green;
            MainMap.Markers.Add(UAVRoute_two);
            // UAVmarker当前经纬度/方位角
            UAVMarker = new GMapMarker(new PointLatLng());
            {
                UAVMarker.Shape = new Position(UAVMarker);
                UAVMarker.Offset = new System.Windows.Point(-15, -25);
                UAVMarker.ZIndex = int.MaxValue;
                MainMap.Markers.Add(UAVMarker);
            }
            #region Home(返回点) 的获取
            HomeMarker = new GMapMarker(new PointLatLng());
            {
                HomeMarker.Shape = new CustomMarker(HomeMarker, "Home", "Resources/home.png");
                HomeMarker.Offset = new System.Windows.Point(-15, -25);
                HomeMarker.ZIndex = int.MaxValue - 3;
                MainMap.Markers.Add(HomeMarker);
            }
            #endregion

            #region Waypoint
            PosSpd.Content = Constants._commandPosSpd0;
            WaypointMarker = new GMapMarker(new PointLatLng());
            {
                WaypointMarker.Altitude = 0;
                WaypointMarker.Azimuth = 0;
             //   WaypointMarker.Speed = Properties.Settings.Default.Waypoint_Speed;
                WaypointMarker.Speed = 0;
                WaypointMarker.Shape = new XMonitor_GUI.CustomMarkers.Waypoint(this, WaypointMarker, SettingData.DeviceMode);
                WaypointMarker.Offset = new System.Windows.Point(-25, -40);
                WaypointMarker.ZIndex = int.MaxValue - 2;
            }
            #endregion

            #region UAV设定Waypoint
            NWaypointMarker = new GMapMarker(new PointLatLng());
            {
                NWaypointMarker.Altitude = Altitude.WaypointAlt;
                NWaypointMarker.Speed = Properties.Settings.Default.Waypoint_Speed;
                NWaypointMarker.Shape = new CustomMarker(NWaypointMarker, "Destination", "Resources/NWaypoint.png");
                NWaypointMarker.Offset = new System.Windows.Point(-15, -25);
                NWaypointMarker.ZIndex = int.MaxValue - 1;
                //MainMap.Markers.Add(NWaypointMarker);
            }
            #endregion

            // ================================================================================
            // 窗口初始化
            Dwindow = new DataWindow(); //无人机信息数据屏幕
            MMWinfow = new MultiWaypointWindow();

            // ================================================================================
            // 命令操作长按功能
            CommandTimer = new System.Windows.Forms.Timer();
            CommandTimer.Tick += new EventHandler(CommandTimer_Tick);


            #endregion

            GpsModule = new PointData();

            //
            Container.Children.CollectionChanged += OptionsWindowCollectionChanged;

            // 命令按钮切换
            CommandButtonNameChange(DataConstellation.CommandMode);

            // 控件隐藏
            PlayerSlide.Visibility = Visibility.Hidden;

            sw.Start();

            // 反映设置窗口的值
            Left = Properties.Settings.Default.MainWindow_Left;
            Top = Properties.Settings.Default.MainWindow_Top;
            Width = Properties.Settings.Default.MainWindow_Width;
            Height = Properties.Settings.Default.MainWindow_Height;

            DataConstellation.BindingData.Health.AlertLinkValue = Properties.Settings.Default.AlertLink;
            DataConstellation.BindingData.Health.AlertRCrecValue = Properties.Settings.Default.AlertRCrec;
            DataConstellation.BindingData.Health.AlertVolValue = Properties.Settings.Default.AlertVoltage;
            DataConstellation.BindingData.Health.VolMaxValue = Properties.Settings.Default.VoltageMax;
            DataConstellation.BindingData.Health.VolMinValue = Properties.Settings.Default.VoltageMin;
            DataConstellation.BindingData.Health.AlertGPSValue = Properties.Settings.Default.AlertGPS;
            Properties.Settings.Default.Provider = MainMap.MapProvider.ToString();
#if DEBUG
			//调试主屏幕上的显示文本
			test.Visibility = Visibility.Visible;
#endif
            Popup = new Popup();							//ポップアップ表示（初始化。。。。）
            Label = new System.Windows.Controls.Label();    //显示弹出式窗口

            Popup.Placement = PlacementMode.Mouse;
            {
                Label.Background = Brushes.Blue;
                Label.Foreground = Brushes.White;
                Label.BorderBrush = Brushes.WhiteSmoke;
                Label.BorderThickness = new Thickness(2);
                Label.Padding = new Thickness(5);
                Label.FontSize = 12;
                Label.Content = "";
            }
            Popup.Child = Label;

            VersionName.Text = Properties.Settings.Default.XMonitorVersion;


            if (Properties.Settings.Default.ConfigRecord == null)
            {
                Properties.Settings.Default.ConfigRecord = new Config.ConfigData();
                Properties.Settings.Default.ConfigRecord.AddressList = new List<Config.AddressData>();
            }

            //pServer = new PipeServer();
            //// 方法和事件注册
            //// 指定当你完成发送回复消息 (事件) 的方法。
            //pServer.FinishTransmissionEvent += new PipeServer.FinishTransmissionDelegate(PipeServer_FinishTransmission);


            //// 方法和事件注册
            //// 指定当你完成发送回复消息 (事件) 的方法。
            //pServer.StartListenEvent += new PipeServer.StartListenMethodDelegate(PipeServer_StartListen);

            XDocument xml = XDocument.Load(System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\Setting\Core\Setting.xml");
            SettingData.FlightLogFilePath = xml.Root.XPathSelectElement("FlightLog/FilePath").Value;
            SettingData.DivideSizeInByte = int.Parse(xml.Root.XPathSelectElement("FlightLog/DivideSizeInByte").Value);
            SettingData.StoragePeriodInDay = int.Parse(xml.Root.XPathSelectElement("FlightLog/StoragePeriodInDay").Value);
            SettingData.RecStopTimeFromDataStop = int.Parse(xml.Root.XPathSelectElement("FlightLog/RecStopTimeFromDataStop").Value);

            MenuIsEnabled(0);

            #region 日志初始值
            _logger.Info("[INIT]XMonitorVersion:" + Properties.Settings.Default.XMonitorVersion.ToString());
            _logger.Info("[INIT]DeviceMode:" + SettingData.DeviceMode.ToString());
            _logger.Info("[INIT]Online:" + SettingData.Online.ToString());
            _logger.Info("[INIT]MapProvider:" + MainMap.MapProvider.ToString());
            _logger.Info("[INIT]ProviderCopyright:" + SettingData.ProviderCopyright);
            _logger.Info("[INIT]AlertLink:" + Properties.Settings.Default.AlertLink.ToString());
            _logger.Info("[INIT]AlertRCrec:" + Properties.Settings.Default.AlertRCrec.ToString());
            _logger.Info("[INIT]AlertVoltage:" + Properties.Settings.Default.AlertVoltage.ToString());
            _logger.Info("[INIT]VoltageMax:" + Properties.Settings.Default.VoltageMax.ToString());
            _logger.Info("[INIT]VoltageMin:" + Properties.Settings.Default.VoltageMin.ToString());
            _logger.Info("[INIT]AlertGPS:" + Properties.Settings.Default.AlertGPS.ToString());
            #endregion

            // 当用户拥有系统挂起或恢复时发生。
            Microsoft.Win32.SystemEvents.PowerModeChanged += new Microsoft.Win32.PowerModeChangedEventHandler(SystemEvents_PowerModeChanged);

            #region 音频设备
            MMDeviceEnumerator enumerator = new MMDeviceEnumerator();
            _mmd = enumerator.GetDefaultAudioEndpoint(DataFlow.Render, Role.Multimedia);

            ////////////////////////////////新添加的注册右击触发marker标志物的添加的事件//////////////////////////////////////////////////////////////
            this.MainMap.MouseRightButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.MarkerControl_MouseRightButtonDown_X);
            this.MainMap.MouseMove += new System.Windows.Input.MouseEventHandler(this.MainMap_MouseMove_X);
            this.MainMap.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.MainMap_MouseDown_X);
            this.MainMap.MouseUp += new System.Windows.Input.MouseButtonEventHandler(this.MainMap_MouseUp_X);
            this.MainMap.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.Uav_WayPoint_X);

            this.Work_Record.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.Uav_WayPoint_X);
            this.Work_Record.MouseMove += new System.Windows.Input.MouseEventHandler(this.MainMap_MouseMove_X);
            this.Work_Record.MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.MainMap_MouseDown_X);
            this.Work_Record.MouseUp += new System.Windows.Input.MouseButtonEventHandler(this.MainMap_MouseUp_X);
            ProjectList_X = new List<Project>();
            ProjectRecord_X = new List<List<Project>>();
            ProjectList_Marker = new List<Project>();
            ProjectList_Distance = new List<Project>();
            ProjectList_AreaChoose = new List<Project>();
            ProjectList_ObstacleInfo = new List<Project>();
            //////////////////////////////health/////////////////////////////////////////////////////////////////////////////////////////
            Xbee_Health = new PingManager();

            #endregion
        }
/// <summary>
/// 喷洒半径初始化
/// </summary>
       private void Init_WorkRadius_Index()
        {
            Show_Index.Items.Add(3);
            Show_Index.Items.Add(4);
            Show_Index.Items.Add(5);
            Show_Index.Items.Add(6);
            Show_Index.Items.Add(7);
            Show_Index.Items.Add(8);
            Show_Index.Items.Add(9);
            Show_Index.SelectedIndex = 2;
        }
        /// <summary>
        /// //串口初始化设置
        /// </summary>
        private void Init_PortIndex()
        {
            cmbBaudRate.Items.Add(1200);
            cmbBaudRate.Items.Add(2400);
            cmbBaudRate.Items.Add(4800);
            cmbBaudRate.Items.Add(9600);
            cmbBaudRate.Items.Add(14400);
            cmbBaudRate.Items.Add(19200);
            cmbBaudRate.Items.Add(38400);
            cmbBaudRate.Items.Add(56000);
            cmbBaudRate.Items.Add(57600);
            cmbBaudRate.Items.Add(115200);
            Port = new SerialPortModel();//实例化一个Port对象
            Port.DataReceived += new SerialDataReceivedEventHandler(Port_DataReceived);
            this.DataContext = this;
            cmbPortName.SelectedIndex = Properties.Settings.Default.PortName;
            cmbBaudRate.SelectedIndex = Properties.Settings.Default.BaudRate;
        }
        /// <summary>
        /// ////串口数据接收
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void Port_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            int length = 0;//每次进来数据长度先清零
            length = Port.BytesToRead;//获取传过来的数据的长度
            for (int i = 0; i < length; i++)
            {
                cRxData = (byte)Port.ReadByte();//一个字节一个字节读取过来
                if (cRxDataflg == true)
                {
                    //将数组存储的缓冲区
                    m_RxData[nRxDataCount++] = cRxData;//找到头之后往数组中存数据
                    if (nRxDataCount >= nPacketSize)//一旦存满一个包的数据量
                    {
                        cRxDataflg = false;//将标志位复位
                        //校验和计算
                        UInt16 Bcc = 0;
                        UInt16 Bcc2 = 0;
                        for (int ii = 2; ii < (nPacketSize - 2); ii++)
                        {
                            Bcc += Convert.ToUInt16((Convert.ToUInt16(m_RxData[ii]) & 0x00FF));//求取校验和存储在无符号16位
                        }
                        Bcc2 = Convert.ToUInt16((((Convert.ToUInt16(m_RxData[nPacketSize - 2])) << 8) & 0xFF00) | ((Convert.ToUInt16(m_RxData[nPacketSize - 1])) & 0x00FF));
                        //检查校验结果
                        if (Bcc == Bcc2)
                        {
                            if (Constants.Play_Data_Back_Flag==false)
                            {
                                UpDate();
                            }
                        }
                    }

                }
                else
                {
                    //存储序列中的头
                    cIndexHeader[0] = cIndexHeader[1];
                    cIndexHeader[1] = cIndexHeader[2];
                    cIndexHeader[2] = cIndexHeader[3];
                    cIndexHeader[3] = cIndexHeader[4];
                    cIndexHeader[4] = cRxData;
                    if (cIndexHeader[0] == (byte)0xB5 && cIndexHeader[1] == (byte)0x5B)
                    {
                        //接收头部分
                        for (int j = 0; j < 5; j++)
                        {
                            m_RxData[j] = cIndexHeader[j];
                        }
                        //头清零
                        for (int k = 0; k < 5; k++)
                        {
                            cIndexHeader[k] = 0;
                        }
                        //数据计数器初始化
                        nRxDataCount = 5;
                        //采集的数据包的大小
                        nPacketSize = m_RxData[2];
                        //设置接收标志
                        if (nPacketSize != 0)
                        {
                            cRxDataflg = true;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// ////串口接收到的数据更新
        /// </summary>
        public void UpDate()
        {
            int XbeeRecv;
            short STemp;
            int STemp_int;
            switch ((int)m_RxData[4])
            {
                case 1://data1数据
                    AllAerocraftData.SuccessOrFail = 0;
                    AllAerocraftData.AutoWingFlag = ((int)m_RxData[3] & 0x0000001f);//反馈flag
                    Constants.Jump_Flag = AllAerocraftData.AutoWingFlag;
                    STemp = (short)((((short)m_RxData[5] << 8) & 0xFF00) | ((short)m_RxData[6] & 0x00FF));
                    AllAerocraftData.Roll = (int)(STemp) / (float)(1000.0);//Roll
                    STemp = (short)((((short)m_RxData[7] << 8) & 0xFF00) | ((short)m_RxData[8] & 0x00FF));
                    AllAerocraftData.Pitch = (int)(STemp) / (float)(1000.0);//pitch
                    STemp = (short)((((short)m_RxData[9] << 8) & 0xFF00) | ((short)m_RxData[10] & 0x00FF));
                    AllAerocraftData.Yaw = (int)(STemp) / (float)(1000.0);//Yaw
                    STemp = (short)((((short)m_RxData[11] << 8) & 0xFF00) | ((short)m_RxData[12] & 0x00FF));
                    AllAerocraftData.P = (int)(STemp) / (float)(1000.0);//rollrate
                    STemp = (short)((((short)m_RxData[13] << 8) & 0xFF00) | ((short)m_RxData[14] & 0x00FF));
                    AllAerocraftData.Q = (int)(STemp) / (float)(1000.0);//pitchrate
                    STemp = (short)((((short)m_RxData[15] << 8) & 0xFF00) | ((short)m_RxData[16] & 0x00FF));
                    AllAerocraftData.R = (int)(STemp) / (float)(1000.0);//yawrate
                    STemp = (short)((((short)m_RxData[17] << 8) & 0xFF00) | ((short)m_RxData[18] & 0x00FF));
                    AllAerocraftData.XAcc = (int)(STemp) / (float)(1000.0);//xacc
                    STemp = (short)((((short)m_RxData[19] << 8) & 0xFF00) | ((short)m_RxData[20] & 0x00FF));
                    AllAerocraftData.YAcc = (int)(STemp) / (float)(1000.0);//yacc
                    STemp = (short)((((short)m_RxData[21] << 8) & 0xFF00) | ((short)m_RxData[22] & 0x00FF));
                    AllAerocraftData.ZAcc = (int)(STemp) / (float)(1000.0);//zacc
                    STemp = (short)((((short)m_RxData[23] << 8) & 0xFF00) | ((short)m_RxData[24] & 0x00FF));
                    AllAerocraftData.XMag = (int)(STemp) / (float)(10000.0);//magx
                    STemp = (short)((((short)m_RxData[25] << 8) & 0xFF00) | ((short)m_RxData[26] & 0x00FF));
                    AllAerocraftData.YMag = (int)(STemp) / (float)(10000.0);//magy
                    STemp = (short)((((short)m_RxData[27] << 8) & 0xFF00) | ((short)m_RxData[28] & 0x00FF));
                    AllAerocraftData.ZMag = (int)(STemp) / (float)(10000.0);//magz
                    STemp = (short)((((short)m_RxData[29] << 8) & 0xFF00) | ((short)m_RxData[30] & 0x00FF));
                    AllAerocraftData.LRoll = (long)(STemp);//prop_roll
                    STemp = (short)((((short)m_RxData[31] << 8) & 0xFF00) | ((short)m_RxData[32] & 0x00FF));
                    AllAerocraftData.LPitch = (long)(STemp);//prop_pitch
                    STemp = (short)((((short)m_RxData[33] << 8) & 0xFF00) | ((short)m_RxData[34] & 0x00FF));
                    AllAerocraftData.LYaw = (long)(STemp);//prop_yaw
                    STemp = (short)((((short)m_RxData[35] << 8) & 0xFF00) | ((short)m_RxData[36] & 0x00FF));
                    AllAerocraftData.LPower = (long)(STemp);//prop_throttle
                    STemp = (short)((((short)m_RxData[37] << 8) & 0xFF00) | ((short)m_RxData[38] & 0x00FF));
                    AllAerocraftData.BSw1 = Convert.ToUInt32((long)(STemp));//Stitch_A
                    STemp = (short)((((short)m_RxData[39] << 8) & 0xFF00) | ((short)m_RxData[40] & 0x00FF));
                    AllAerocraftData.BSw2 = Convert.ToUInt32((long)(STemp));//Switch_B
                    STemp = (short)((((short)m_RxData[41] << 8) & 0xFF00) | ((short)m_RxData[42] & 0x00FF));
                    AllAerocraftData.BSw3 = Convert.ToUInt32((long)(STemp));//Switch_C
                    STemp = (short)((((short)m_RxData[43] << 8) & 0xFF00) | ((short)m_RxData[44] & 0x00FF));
                    AllAerocraftData.BSw4 = Convert.ToUInt32((long)(STemp));//Switch_D
                    STemp = (short)((((short)m_RxData[45] << 8) & 0xFF00) | ((short)m_RxData[46] & 0x00FF));
                    AllAerocraftData.Motor_F = (int)(STemp);//Motor_M1
                    STemp = (short)((((short)m_RxData[47] << 8) & 0xFF00) | ((short)m_RxData[48] & 0x00FF));
                    AllAerocraftData.Motor_B = (int)(STemp);//Motor_M2
                    STemp = (short)((((short)m_RxData[49] << 8) & 0xFF00) | ((short)m_RxData[50] & 0x00FF));
                    AllAerocraftData.Motor_L = (int)(STemp);//Motor_M3
                    STemp = (short)((((short)m_RxData[51] << 8) & 0xFF00) | ((short)m_RxData[52] & 0x00FF));
                    AllAerocraftData.Motor_R = (int)(STemp);//Motor_M4
                    STemp = (short)((((short)m_RxData[53] << 8) & 0xFF00) | ((short)m_RxData[54] & 0x00FF));
                    AllAerocraftData.Motor_X = (int)(STemp);//Motor_M5
                    STemp = (short)((((short)m_RxData[55] << 8) & 0xFF00) | ((short)m_RxData[56] & 0x00FF));
                    AllAerocraftData.Motor_Y = (int)(STemp);//Motor_M6
                    STemp = (short)((((short)m_RxData[57] << 8) & 0xFF00) | ((short)m_RxData[58] & 0x00FF));
                    AllAerocraftData.AutoWingTransverseVelocity = (int)(STemp) / (float)1000.0;//GPS_Vn
                    STemp = (short)((((short)m_RxData[59] << 8) & 0xFF00) | ((short)m_RxData[60] & 0x00FF));
                    AllAerocraftData.AutoWingLongitudinalVelocity = (int)(STemp) / (float)1000.0;//GPS_Ve
                    STemp = (short)((((short)m_RxData[61] << 8) & 0xFF00) | ((short)m_RxData[62] & 0x00FF));
                    AllAerocraftData.AutoWingUpAndDownVelocity = (int)(STemp) / (float)1000.0;//GPS_Vd
                    AllAerocraftData.AutoWingLongitude = BitConverter.ToDouble(m_RxData, 63);//GPS_Lon
                    AllAerocraftData.AutoWingLatitude = BitConverter.ToDouble(m_RxData, 71);//GPS_Lat 
                    STemp_int = (int)((((int)m_RxData[79] << 16) & 0x00FF0000) | (((int)m_RxData[80] << 8) & 0x0000FF00) | ((int)m_RxData[81] & 0x000000ff));
                    AllAerocraftData.AutoWingAltitude = (((int)STemp_int) / ((1 << 23) * (float)0.0001) - (float)10000.0);//GPS_Alt3
                    STemp = (short)((((short)m_RxData[82] << 8) & 0xFF00) | ((short)m_RxData[83] & 0x00FF));
                    AllAerocraftData.GPS_Heading = (int)(STemp) / (float)100.0;//GPS_Heading
                    STemp = (short)((((short)m_RxData[84] << 8) & 0xFF00) | ((short)m_RxData[85] & 0x00FF));
                    AllAerocraftData.AutoWingStarNum = (int)(STemp);//GPS_StarNum
                    STemp = (short)((((short)m_RxData[86] << 8) & 0xFF00) | ((short)m_RxData[87] & 0x00FF));
                    AllAerocraftData.New_GPS_Dop = (int)(STemp) / (float)100.0;//GPS_Dop
                    STemp_int = (int)((((int)m_RxData[88] << 16) & 0x00FF0000) | (((int)m_RxData[89] << 8) & 0x0000FF00) | ((int)m_RxData[90] & 0x000000ff));
                    AllAerocraftData.New_Bara_Alt = (((int)STemp_int) / ((1 << 23) * (float)0.0001) - (float)10000.0);//bara_Alt3
                    STemp = (short)((((short)m_RxData[91] << 8) & 0xFF00) | ((short)m_RxData[92] & 0x00FF));
                    AllAerocraftData.AutoWingVoltValue = (int)(STemp) / (float)100.0;//Battery
             //       STemp = (short)((((short)m_RxData[93] << 8) & 0xFF00) | ((short)m_RxData[94] & 0x00FF));
                    STemp = (short)(((short)m_RxData[94] & 0x00FF));
                    AllAerocraftData.AutoWingFlightMode = (int)(STemp);//Flight_Mode
                    STemp = (short)((((short)m_RxData[95] << 8) & 0xFF00) | ((short)m_RxData[96] & 0x00FF));
                    AllAerocraftData.AutoWingSensorState = (int)(STemp);//IMU_State
                    STemp = (short)((((short)m_RxData[97] << 8) & 0xFF00) | ((short)m_RxData[98] & 0x00FF));
                    AllAerocraftData.AutoWingCommunitationState = (int)(STemp);//Health_State
                    STemp = (short)((((short)m_RxData[99] << 8) & 0xFF00) | ((short)m_RxData[100] & 0x00FF));
                    AllAerocraftData.New_Data1_Undefined1 = (int)(STemp);//待定值1
                    STemp = (short)((((short)m_RxData[101] << 8) & 0xFF00) | ((short)m_RxData[102] & 0x00FF));
                    AllAerocraftData.New_Data1_Undefined2 = (int)(STemp);//待定值2
                    STemp = (short)((((short)m_RxData[103] << 8) & 0xFF00) | ((short)m_RxData[104] & 0x00FF));
                    AllAerocraftData.New_Data1_Undefined3 = (int)(STemp);//待定值3
                    STemp = (short)((((short)m_RxData[105] << 8) & 0xFF00) | ((short)m_RxData[106] & 0x00FF));
                    AllAerocraftData.New_Data1_Undefined4 = (int)(STemp);//待定值4
                    STemp = (short)((((short)m_RxData[107] << 8) & 0xFF00) | ((short)m_RxData[108] & 0x00FF));
                    AllAerocraftData.New_Data1_Undefined5 = (int)(STemp);//待定值5
                    STemp = (short)((((short)m_RxData[109] << 8) & 0xFF00) | ((short)m_RxData[110] & 0x00FF));
                    AllAerocraftData.Prop_Failure_Code = (int)(STemp);//遥控器解锁错误码
                    STemp = (short)((((short)m_RxData[111] << 8) & 0xFF00) | ((short)m_RxData[112] & 0x00FF));
                    AllAerocraftData.Zacc_Noise = (int)(STemp) / (float)10.0;//加速度噪音值
                    break;
                case 2://data2数据
                    STemp = (short)((((short)m_RxData[5] << 8) & 0xFF00) | ((short)m_RxData[6] & 0x00FF));
                    AllAerocraftData.New_Frame_Type = (int)(STemp);//Frame_Type
                    STemp = (short)((((short)m_RxData[7] << 8) & 0xFF00) | ((short)m_RxData[8] & 0x00FF));
                    AllAerocraftData.New_Motor_Starting_Percent = (int)(STemp);//Motor_Starting_Percent
                    STemp = (short)((((short)m_RxData[9] << 8) & 0xFF00) | ((short)m_RxData[10] & 0x00FF));
                    AllAerocraftData.New_Param_Headfile_Num = (int)(STemp);//Param_Headfile_Num
                    STemp = (short)((((short)m_RxData[11] << 8) & 0xFF00) | ((short)m_RxData[12] & 0x00FF));
                    AllAerocraftData.XbeeRecv = (int)(STemp);
                    if (AllAerocraftData.XbeeRecv == 255)
                    {
                        Xbee_Health.Reply();
                    }
                    STemp = (short)((((short)m_RxData[13] << 8) & 0xFF00) | ((short)m_RxData[14] & 0x00FF));
                    AllAerocraftData.New_Vesion_AP = (int)(STemp);//Vesion_AP
                    STemp = (short)((((short)m_RxData[15] << 8) & 0xFF00) | ((short)m_RxData[16] & 0x00FF));
                    AllAerocraftData.New_Vesion_IMU = (int)(STemp);//Vesion_IMU
                    STemp = (short)((((short)m_RxData[17] << 8) & 0xFF00) | ((short)m_RxData[18] & 0x00FF));
                    AllAerocraftData.AutoWing_Tasete_Hour = (int)(STemp);//Cumlative_Hour
                    STemp = (short)((((short)m_RxData[19] << 8) & 0xFF00) | ((short)m_RxData[20] & 0x00FF));
                    AllAerocraftData.AutoWing_Tasete_Second = (int)(STemp);//Cumlative_Second
                    STemp = (short)((((short)m_RxData[21] << 8) & 0xFF00) | ((short)m_RxData[22] & 0x00FF));
                    AllAerocraftData.AutoWingDataPacket = (int)(STemp);//Waypoint_Group
                    STemp = (short)((((short)m_RxData[23] << 8) & 0xFF00) | ((short)m_RxData[24] & 0x00FF));
                    AllAerocraftData.AutoWingMarkerNums = (int)(STemp);//Waypoint_Size
                    STemp = (short)((((short)m_RxData[25] << 8) & 0xFF00) | ((short)m_RxData[26] & 0x00FF));
                    AllAerocraftData.AutoWingWhichMarker = (int)(STemp);//Waypoint_Num
/////////////////////////////修改部分/////////////////////////////////////////////////////////////////////////
                    STemp = (short)((((short)m_RxData[27] << 8) & 0xFF00) | ((short)m_RxData[28] & 0x00FF));
                    AllAerocraftData.Hangpaizhibao_Value = (int)(STemp);//航拍植保当前值 Switchplantandphoto
                    STemp = (short)((((short)m_RxData[29] << 8) & 0xFF00) | ((short)m_RxData[30] & 0x00FF));
                    AllAerocraftData.PlantProtectOperation = (int)(STemp);//速度喷幅智能跟随使能高字节是id低字节是值
                    STemp = (short)((((short)m_RxData[31] << 8) & 0xFF00) | ((short)m_RxData[32] & 0x00FF));
                    AllAerocraftData.Arialphotoparam = (int)(STemp);//航拍作业参数设置
                    AllAerocraftData.Hangpaicanshu_Code = Convert.ToByte((((int)AllAerocraftData.Arialphotoparam & 0x0000ff00) >> 8));//接收到的高8位
                    AllAerocraftData.Hangpaicanshu_Value = Convert.ToByte((int)AllAerocraftData.Arialphotoparam & 0x000000ff);//接收到的低8位
                    STemp = (short)((((short)m_RxData[33] << 8) & 0xFF00) | ((short)m_RxData[34] & 0x00FF));
                    AllAerocraftData.Anquancelue_Code = (int)(STemp);//安全策略值编号
                    STemp = (short)((((short)m_RxData[35] << 8) & 0xFF00) | ((short)m_RxData[36] & 0x00FF));
                    AllAerocraftData.Anquancelue_Value = (int)(STemp);//安全策略值
                    STemp = (short)((((short)m_RxData[37] << 8) & 0xFF00) | ((short)m_RxData[38] & 0x00FF));
                    AllAerocraftData.basicflightparam = (int)(STemp);//基础设置
                    AllAerocraftData.Feixingshezhi_Code = Convert.ToByte((((int)AllAerocraftData.basicflightparam & 0x0000ff00) >> 8));//接收到的高8位
                    AllAerocraftData.Feixingshezhi_Value = Convert.ToByte((int)AllAerocraftData.basicflightparam & 0x000000ff);//接收到的低8位
                    ////////////////////////////////////飞行设置参数更新////////////////////////////
                    Function_FeiXingSheZhi_Refsh((Int32)m_RxData[37], (Int32)m_RxData[38]);


                    AllAerocraftData.AutoWingDestinationLongitude = BitConverter.ToDouble(m_RxData, 39);//GPS_destinationLon
                    AllAerocraftData.AutoWingDestinationLatitude = BitConverter.ToDouble(m_RxData, 47);//GPS_destinationLat 
                    STemp = (short)((((short)m_RxData[55] << 8) & 0xFF00) | ((short)m_RxData[56] & 0x00FF));
                    AllAerocraftData.ref_position = (int)(STemp)/(float)10.0;//ref_position
                    STemp = (short)((((short)m_RxData[57] << 8) & 0xFF00) | ((short)m_RxData[58] & 0x00FF));
                    AllAerocraftData.velocityreference_vn = (int)(STemp)/(float)100.0;//velocityreference_vn
                    STemp = (short)((((short)m_RxData[59] << 8) & 0xFF00) | ((short)m_RxData[60] & 0x00FF));
                    AllAerocraftData.velocityreference_ve = (int)(STemp)/(float)100.0;//velocityreference_ve
                    STemp = (short)((((short)m_RxData[61] << 8) & 0xFF00) | ((short)m_RxData[62] & 0x00FF));
                    AllAerocraftData.attitudereference_roll = (int)(STemp)/(float)100.0;//attitudereference_roll
                    STemp = (short)((((short)m_RxData[63] << 8) & 0xFF00) | ((short)m_RxData[64] & 0x00FF));
                    AllAerocraftData.attitudereference_pitch = (int)(STemp)/(float)100.0;//attitudereference_pitch
                    STemp = (short)((((short)m_RxData[65] << 8) & 0xFF00) | ((short)m_RxData[66] & 0x00FF));
                    AllAerocraftData.stabillizeref_roll = (int)(STemp)/(float)10.0;//stabillizeref_roll
                    STemp = (short)((((short)m_RxData[67] << 8) & 0xFF00) | ((short)m_RxData[68] & 0x00FF));
                    AllAerocraftData.stabillizeref_pitch = (int)(STemp)/(float)10.0;//stabillizeref_pitch
                    STemp = (short)((((short)m_RxData[69] << 8) & 0xFF00) | ((short)m_RxData[70] & 0x00FF));
                    AllAerocraftData.attitude_yaw = (int)(STemp)/(float)100.0;//attitude_yaw
                    STemp = (short)((((short)m_RxData[71] << 8) & 0xFF00) | ((short)m_RxData[72] & 0x00FF));
                    AllAerocraftData.feedback_yaw = (int)(STemp)/(float)100.0;//feedback_yaw
                    STemp = (short)((((short)m_RxData[73] << 8) & 0xFF00) | ((short)m_RxData[74] & 0x00FF));
                    AllAerocraftData.stabillizeref_yaw = (int)(STemp)/(float)10.0;//stabillizeref_yaw
                    STemp = (short)((((short)m_RxData[75] << 8) & 0xFF00) | ((short)m_RxData[76] & 0x00FF));
                    AllAerocraftData.motor_roll = (int)(STemp)/(float)10.0;//motor_roll
                    STemp = (short)((((short)m_RxData[77] << 8) & 0xFF00) | ((short)m_RxData[78] & 0x00FF));
                    AllAerocraftData.motor_pitch = (int)(STemp)/(float)10.0;//motor_pitch
                    STemp = (short)((((short)m_RxData[79] << 8) & 0xFF00) | ((short)m_RxData[80] & 0x00FF));
                    AllAerocraftData.motor_yaw = (int)(STemp)/(float)10.0;//motor_yaw
                    STemp = (short)((((short)m_RxData[81] << 8) & 0xFF00) | ((short)m_RxData[82] & 0x00FF));
                    AllAerocraftData.ref_alt = (int)(STemp)/(float)100.0;//ref_alt
                    STemp = (short)((((short)m_RxData[83] << 8) & 0xFF00) | ((short)m_RxData[84] & 0x00FF));
                    AllAerocraftData.altvel = (int)(STemp)/(float)100.0;//ref_altvel
                    STemp = (short)((((short)m_RxData[85] << 8) & 0xFF00) | ((short)m_RxData[86] & 0x00FF));
                    AllAerocraftData.feedback_vd = (int)(STemp)/(float)100.0;//feedback_vd
                    STemp = (short)((((short)m_RxData[87] << 8) & 0xFF00) | ((short)m_RxData[88] & 0x00FF));
                    AllAerocraftData.stabillizeref_throttle = (int)(STemp);//stabillizeref_throttle
                    STemp = (short)((((short)m_RxData[89] << 8) & 0xFF00) | ((short)m_RxData[90] & 0x00FF));
                    AllAerocraftData.motor_m7 = (int)(STemp);//motor_m7
                    STemp = (short)((((short)m_RxData[91] << 8) & 0xFF00) | ((short)m_RxData[92] & 0x00FF));
                    AllAerocraftData.motor_m8 = (int)(STemp);//motor_m8
                    STemp = (short)((((short)m_RxData[93] << 8) & 0xFF00) | ((short)m_RxData[94] & 0x00FF));
                    AllAerocraftData.motor_m9 = (int)(STemp);//motor_m9
                    STemp = (short)((((short)m_RxData[95] << 8) & 0xFF00) | ((short)m_RxData[96] & 0x00FF));
                    AllAerocraftData.motor_m10 = (int)(STemp);//motor_m10
/////////////////////////////////////////////////修改部分/////////////////////////////////////////////////////////////
                    STemp = (short)((((short)m_RxData[97] << 8) & 0xFF00) | ((short)m_RxData[98] & 0x00FF));
                    AllAerocraftData.New_Data2_Undefined1 = (int)(STemp);//id
                    STemp = (short)((((short)m_RxData[99] << 8) & 0xFF00) | ((short)m_RxData[100] & 0x00FF));
                    AllAerocraftData.New_Data2_Undefined2 = (int)(STemp);

                    All_Equipment_Info.AP_Equipment_ID[m_RxData[101]] = m_RxData[102];

                    STemp = (short)((((short)m_RxData[103] << 8) & 0xFF00) | ((short)m_RxData[104] & 0x00FF));
                    AllAerocraftData.New_Data2_Undefined4 = (int)(STemp);//gpssol
                    STemp = (short)((((short)m_RxData[105] << 8) & 0xFF00) | ((short)m_RxData[106] & 0x00FF));
                    AllAerocraftData.New_Total_Flow = (int)(STemp) /(float)10.0;//流量
                    STemp = (short)((((short)m_RxData[107] << 8) & 0xFF00) | ((short)m_RxData[108] & 0x00FF));
                    AllAerocraftData.New_Current_Flow_Rate = (int)(STemp) /(float)10.0;//流速
                    STemp = (short)((((short)m_RxData[109] << 8) & 0xFF00) | ((short)m_RxData[110] & 0x00FF));
                    AllAerocraftData.New_AB_Point_Alloffset = (int)(STemp);//磁偏角及拐弯参数设置
                    ///////////////////////////////////////////////////////////////增加对电池类型的判断//////////////////////////////////////////
                    Function_Reback_ShowInfo((Int32)AllAerocraftData.New_Frame_Type, (Int32)AllAerocraftData.New_Motor_Starting_Percent);
                    /*=================================================版本信息跟新==========================================*/
                    Function_Version_Analyze((int)AllAerocraftData.New_Vesion_AP);
                    Function_Version_Analyze((int)AllAerocraftData.New_Vesion_IMU);
                    break;
                case 4://data4数据包
                    AllAerocraftData.AutoWingFlag = ((int)m_RxData[3] & 0x0000001f);//反馈flag
                    Constants.Jump_Flag = AllAerocraftData.AutoWingFlag;
                    STemp = (short)((((short)m_RxData[5] << 8) & 0xFF00) | ((short)m_RxData[6] & 0x00FF));
			        AllAerocraftData.Modify_Rollcontrol_Roll = (int)(STemp);//Roll
                    STemp = (short)((((short)m_RxData[7] << 8) & 0xFF00) | ((short)m_RxData[8] & 0x00FF));
			        AllAerocraftData.Modify_Rollcontrol_Rollrate = (int)(STemp);//Rollrate
                    STemp = (short)((((short)m_RxData[9] << 8) & 0xFF00) | ((short)m_RxData[10] & 0x00FF));
			        AllAerocraftData.Modify_Rollcontrol_Proproll = (float)(STemp);//LRoll
                    STemp = (short)((((short)m_RxData[11] << 8) & 0xFF00) | ((short)m_RxData[12] & 0x00FF));
			        AllAerocraftData.Modify_Yawcontrol_Yaw =  (int)(STemp);//Yaw
                    STemp = (short)((((short)m_RxData[13] << 8) & 0xFF00) | ((short)m_RxData[14] & 0x00FF));
			        AllAerocraftData.Modify_Yawcontrol_Yawrate =  (int)(STemp);//Yawrate
                    STemp = (short)((((short)m_RxData[15] << 8) & 0xFF00) | ((short)m_RxData[16] & 0x00FF));
			        AllAerocraftData.Modify_Yawcontrol_Propyaw =  (int)(STemp);//LYaw
                    STemp = (short)((((short)m_RxData[17] << 8) & 0xFF00) | ((short)m_RxData[18] & 0x00FF));
			        AllAerocraftData.Modify_Altcontrol_Zacc =  (int)(STemp);//Zacc
                    STemp = (short)((((short)m_RxData[19] << 8) & 0xFF00) | ((short)m_RxData[20] & 0x00FF));
			        AllAerocraftData.Modify_Altcontrol_Throttle =  (int)(STemp);//Lpower
                    STemp_int = (int)((((int)m_RxData[21] << 16) & 0x00FF0000) | (((int)m_RxData[22] << 8) & 0x0000FF00) | ((int)m_RxData[23] & 0x000000ff));
                    AllAerocraftData.Modify_Altcontrol_Alt = (((int)STemp_int) / ((1 << 23) * (float)0.0001) - (float)10000.0);//GPS_Alt3
                    STemp_int = (int)((((int)m_RxData[24] << 16) & 0x00FF0000) | (((int)m_RxData[25] << 8) & 0x0000FF00) | ((int)m_RxData[26] & 0x000000ff));
			        AllAerocraftData.New_Bara_Alt2=(((int)STemp_int) / ((1 << 23) * (float)0.0001) - (float)10000.0);//Bara_Alt2
                    STemp = (short)((((short)m_RxData[27] << 8) & 0xFF00) | ((short)m_RxData[28] & 0x00FF));
			        AllAerocraftData.New_GPS_Vd =  (int)(STemp);//GPS_Vd
                    STemp = (short)((((short)m_RxData[29] << 8) & 0xFF00) | ((short)m_RxData[30] & 0x00FF));
			        AllAerocraftData.New_Roll_Ref =  (int)(STemp);//Roll_Ref
                    STemp = (short)((((short)m_RxData[31] << 8) & 0xFF00) | ((short)m_RxData[32] & 0x00FF));
			        AllAerocraftData.New_Vel_Y =  (int)(STemp);//Vel_Y
                    STemp = (short)((((short)m_RxData[33] << 8) & 0xFF00) | ((short)m_RxData[34] & 0x00FF));
			        AllAerocraftData.New_Pos_Y =  (int)(STemp);//Pos_Y
                    STemp = (short)((((short)m_RxData[35] << 8) & 0xFF00) | ((short)m_RxData[36] & 0x00FF));
			        AllAerocraftData.New_Data4_Undefined1 =  (int)(STemp);//Undefined1
                    STemp = (short)((((short)m_RxData[37] << 8) & 0xFF00) | ((short)m_RxData[38] & 0x00FF));
			        AllAerocraftData.New_Data4_Undefined2 =  (int)(STemp);//Undefined2
                    STemp = (short)((((short)m_RxData[39] << 8) & 0xFF00) | ((short)m_RxData[40] & 0x00FF));
			        AllAerocraftData.New_Data4_Undefined3 =  (int)(STemp);//Undefined3
                    STemp = (short)((((short)m_RxData[41] << 8) & 0xFF00) | ((short)m_RxData[42] & 0x00FF));
			        AllAerocraftData.New_Data4_Undefined4 =  (int)(STemp);//Undefined4
                    STemp = (short)((((short)m_RxData[43] << 8) & 0xFF00) | ((short)m_RxData[44] & 0x00FF));
			        AllAerocraftData.Modify_Star_Num = (long)(STemp);//Star_Num
                    STemp = (short)((((short)m_RxData[45] << 8) & 0xFF00) | ((short)m_RxData[46] & 0x00FF));
			        AllAerocraftData.Modify_Volt = (long)(STemp)/(float)100.0;//Voltage
                    STemp = (short)((((short)m_RxData[47] << 8) & 0xFF00) | ((short)m_RxData[48] & 0x00FF));
			        AllAerocraftData.Gyro_RP_KP =  (int)(STemp)/(float)10.0;//Gyro_KP_RP
                    STemp = (short)((((short)m_RxData[49] << 8) & 0xFF00) | ((short)m_RxData[50] & 0x00FF));
			        AllAerocraftData.Gyro_RP_KI =  (int)(STemp)/(float)10.0;//Gyro_KI_RP
                    STemp = (short)((((short)m_RxData[51] << 8) & 0xFF00) | ((short)m_RxData[52] & 0x00FF));
			        AllAerocraftData.Gyro_RP_KD =  (int)(STemp)/(float)10.0;//Gyro_KD_RP
                    STemp = (short)((((short)m_RxData[53] << 8) & 0xFF00) | ((short)m_RxData[54] & 0x00FF));
			        AllAerocraftData.Gyro_Y_KP =  (int)(STemp)/(float)10.0;//Gyro_KP_Y
                    STemp = (short)((((short)m_RxData[55] << 8) & 0xFF00) | ((short)m_RxData[56] & 0x00FF));
			        AllAerocraftData.Gyro_Y_KI =  (int)(STemp)/(float)10.0;//Gyro_KI_Y
                    STemp = (short)((((short)m_RxData[57] << 8) & 0xFF00) | ((short)m_RxData[58] & 0x00FF));
			        AllAerocraftData.Gyro_Y_KD =  (int)(STemp)/(float)10.0;//Gyro_KD_Y
                    STemp = (short)((((short)m_RxData[59] << 8) & 0xFF00) | ((short)m_RxData[60] & 0x00FF));
			        AllAerocraftData.Prop_RP_KP = (int)(STemp)/(float)10.0;//Prop_KP_RP
                    STemp = (short)((((short)m_RxData[61] << 8) & 0xFF00) | ((short)m_RxData[62] & 0x00FF));
			        AllAerocraftData.Prop_RP_KI = (int)(STemp)/(float)10.0;//Prop_KI_RP
                    STemp = (short)((((short)m_RxData[63] << 8) & 0xFF00) | ((short)m_RxData[64] & 0x00FF));
			        AllAerocraftData.Prop_Y_KP =  (int)(STemp)/(float)10.0;//Prop_KP_Y
                    STemp = (short)((((short)m_RxData[65] << 8) & 0xFF00) | ((short)m_RxData[66] & 0x00FF));
			        AllAerocraftData.Prop_Y_KI = (int)(STemp)/(float)10.0;//Prop_KI_Y
                    break;
                case 5:
                    AllAerocraftData.AutoWingFlag = ((int)m_RxData[3] & 0x0000001f);//反馈flag
                    Constants.Jump_Flag = AllAerocraftData.AutoWingFlag;
                    STemp = (short)((((short)m_RxData[5] << 8) & 0xFF00) | ((short)m_RxData[6] & 0x00FF));
			        AllAerocraftData.Modify_Star_Num = (long)(STemp);//Star_Num
                    STemp = (short)((((short)m_RxData[7] << 8) & 0xFF00) | ((short)m_RxData[8] & 0x00FF));
			        AllAerocraftData.Modify_Volt = (long)(STemp);//Volt

                    if (AllAerocraftData.SuccessOrFail == 0 || AllAerocraftData.SuccessOrFail == 1 || AllAerocraftData.SuccessOrFail == 2)
                    {
                        STemp = (short)((((short)m_RxData[9] << 8) & 0xFF00) | ((short)m_RxData[10] & 0x00FF));
                        AllAerocraftData.New_YK_roll = (long)(STemp);//New_YK_roll
                        STemp = (short)((((short)m_RxData[11] << 8) & 0xFF00) | ((short)m_RxData[12] & 0x00FF));
                        AllAerocraftData.New_YK_pitch = (long)(STemp);//New_YK_pitch
                        STemp = (short)((((short)m_RxData[13] << 8) & 0xFF00) | ((short)m_RxData[14] & 0x00FF));
                        AllAerocraftData.New_YK_throttle = (long)(STemp);//New_YK_throttle
                        STemp = (short)((((short)m_RxData[15] << 8) & 0xFF00) | ((short)m_RxData[16] & 0x00FF));
                        AllAerocraftData.New_YK_yaw = (long)(STemp);//New_YK_yaw
                        STemp = (short)((((short)m_RxData[17] << 8) & 0xFF00) | ((short)m_RxData[18] & 0x00FF));
                        AllAerocraftData.New_YK_switch1 = (long)(STemp);//New_YK_switch1
                        STemp = (short)((((short)m_RxData[19] << 8) & 0xFF00) | ((short)m_RxData[20] & 0x00FF));
                        AllAerocraftData.New_YK_switch2 = (long)(STemp);//New_YK_switch2
                        STemp = (short)((((short)m_RxData[21] << 8) & 0xFF00) | ((short)m_RxData[22] & 0x00FF));
                        AllAerocraftData.New_YK_switch3 = (long)(STemp);//New_YK_switch3
                        STemp = (short)((((short)m_RxData[23] << 8) & 0xFF00) | ((short)m_RxData[24] & 0x00FF));
                        AllAerocraftData.New_YK_switch4 = (long)(STemp);//New_YK_switch4
                    }
                    else
                    {
                        STemp = (short)((((short)m_RxData[9] << 8) & 0xFF00) | ((short)m_RxData[10] & 0x00FF));
                        AllAerocraftData.Change_New_YK_roll = (long)(STemp) / (float)672.0;//changeNew_YK_roll
                        STemp = (short)((((short)m_RxData[11] << 8) & 0xFF00) | ((short)m_RxData[12] & 0x00FF));
                        AllAerocraftData.Change_New_YK_pitch = (long)(STemp) / (float)672.0;//changeNew_YK_pitch
                        STemp = (short)((((short)m_RxData[13] << 8) & 0xFF00) | ((short)m_RxData[14] & 0x00FF));
                        AllAerocraftData.Change_New_YK_throttle = (long)(STemp) / (float)672.0;//changeNew_YK_throttle
                        STemp = (short)((((short)m_RxData[15] << 8) & 0xFF00) | ((short)m_RxData[16] & 0x00FF));
                        AllAerocraftData.Change_New_YK_yaw = (long)(STemp) / (float)672.0;//changeNew_YK_yaw
                        STemp = (short)((((short)m_RxData[17] << 8) & 0xFF00) | ((short)m_RxData[18] & 0x00FF));
                        AllAerocraftData.Change_New_YK_switch1 = (long)(STemp);//changgeNew_YK_switch1
                        STemp = (short)((((short)m_RxData[19] << 8) & 0xFF00) | ((short)m_RxData[20] & 0x00FF));
                        AllAerocraftData.Change_New_YK_switch2 = (long)(STemp);//changeNew_YK_switch2
                        STemp = (short)((((short)m_RxData[21] << 8) & 0xFF00) | ((short)m_RxData[22] & 0x00FF));
                        AllAerocraftData.Change_New_YK_switch3 = (long)(STemp);//changeNew_YK_switch3
                        STemp = (short)((((short)m_RxData[23] << 8) & 0xFF00) | ((short)m_RxData[24] & 0x00FF));
                        AllAerocraftData.Change_New_YK_switch4 = (long)(STemp);//changgeNew_YK_switch4
                    }
                    STemp = (short)((((short)m_RxData[25] << 8) & 0xFF00) | ((short)m_RxData[26] & 0x00FF));
			        AllAerocraftData.New_YK_Minroll = (long)(STemp);//New_YK_Minroll
                    STemp = (short)((((short)m_RxData[27] << 8) & 0xFF00) | ((short)m_RxData[28] & 0x00FF));
			        AllAerocraftData.New_YK_Minpitch = (long)(STemp);//New_YK_Minpitch
                    STemp = (short)((((short)m_RxData[29] << 8) & 0xFF00) | ((short)m_RxData[30] & 0x00FF));
			        AllAerocraftData.New_YK_Minthrottle = (long)(STemp);//New_YK_Minthrottle
                    STemp = (short)((((short)m_RxData[31] << 8) & 0xFF00) | ((short)m_RxData[32] & 0x00FF));
			        AllAerocraftData.New_YK_MinYaw = (long)(STemp);//New_YK_MinYaw
                    STemp = (short)((((short)m_RxData[33] << 8) & 0xFF00) | ((short)m_RxData[34] & 0x00FF));
			        AllAerocraftData.New_YK_Minswitch1 = (long)(STemp);//New_YK_Minswitch1
                    STemp = (short)((((short)m_RxData[35] << 8) & 0xFF00) | ((short)m_RxData[36] & 0x00FF));
			        AllAerocraftData.New_YK_Minswitch2 = (long)(STemp);//New_YK_Minswitch2
                    STemp = (short)((((short)m_RxData[37] << 8) & 0xFF00) | ((short)m_RxData[38] & 0x00FF));
			        AllAerocraftData.New_YK_Minswitch3 = (long)(STemp);//New_YK_Minswitch3
                    STemp = (short)((((short)m_RxData[39] << 8) & 0xFF00) | ((short)m_RxData[40] & 0x00FF));
			        AllAerocraftData.New_YK_Minswitch4 = (long)(STemp);//New_YK_Minswitch4
                    STemp = (short)((((short)m_RxData[41] << 8) & 0xFF00) | ((short)m_RxData[42] & 0x00FF));
			        AllAerocraftData.New_YK_Maxroll = (long)(STemp);//New_YK_Maxroll
                    STemp = (short)((((short)m_RxData[43] << 8) & 0xFF00) | ((short)m_RxData[44] & 0x00FF));
			        AllAerocraftData.New_YK_Maxpitch = (long)(STemp);//New_YK_Maxpitch
                    STemp = (short)((((short)m_RxData[45] << 8) & 0xFF00) | ((short)m_RxData[46] & 0x00FF));
			        AllAerocraftData.New_YK_Maxthrottle = (long)(STemp);//New_YK_Maxthrottle
                    STemp = (short)((((short)m_RxData[47] << 8) & 0xFF00) | ((short)m_RxData[48] & 0x00FF));
			        AllAerocraftData.New_YK_MaxYaw = (long)(STemp);//New_YK_MaxYaw
                    STemp = (short)((((short)m_RxData[49] << 8) & 0xFF00) | ((short)m_RxData[50] & 0x00FF));
			        AllAerocraftData.New_YK_Maxswitch1 = (long)(STemp);//New_YK_Maxswitch1
                    STemp = (short)((((short)m_RxData[51] << 8) & 0xFF00) | ((short)m_RxData[52] & 0x00FF));
			        AllAerocraftData.New_YK_Maxswitch2 = (long)(STemp);//New_YK_Maxswitch2
                    STemp = (short)((((short)m_RxData[53] << 8) & 0xFF00) | ((short)m_RxData[54] & 0x00FF));
			        AllAerocraftData.New_YK_Maxswitch3 = (long)(STemp);//New_YK_Maxswitch3
                    STemp = (short)((((short)m_RxData[55] << 8) & 0xFF00) | ((short)m_RxData[56] & 0x00FF));
			        AllAerocraftData.New_YK_Maxswitch4 = (long)(STemp);//New_YK_Maxswitch4

                    STemp = (short)((short)m_RxData[57] & 0x00FF);
			        AllAerocraftData.SuccessOrFail = (long)(STemp);//校准步骤
                    STemp = (short)((short)m_RxData[58] & 0x00FF);
                    AllAerocraftData.RebackOrNotReback = (long)(STemp);//是否反向


                    STemp = (short)((((short)m_RxData[59] << 8) & 0xFF00) | ((short)m_RxData[60] & 0x00FF));
			        AllAerocraftData.New_Data5_Undefined1 = (long)(STemp);//New_Data5_Undefined1
                    STemp = (short)((((short)m_RxData[61] << 8) & 0xFF00) | ((short)m_RxData[62] & 0x00FF));
			        AllAerocraftData.New_Data5_Undefined2 = (long)(STemp);//New_Data5_Undefined2
                    STemp = (short)((((short)m_RxData[63] << 8) & 0xFF00) | ((short)m_RxData[64] & 0x00FF));
			        AllAerocraftData.New_Data5_Undefined3 = (long)(STemp);//New_Data5_Undefined3
                    break;
                case 6://固件升级
                    AllAerocraftData.AutoWingFlag = ((int)m_RxData[3] & 0x0000001f);//反馈flag
                    Constants.Jump_Flag = AllAerocraftData.AutoWingFlag;
                    STemp = (short)((((short)m_RxData[6] << 8) & 0xFF00) | ((short)m_RxData[7] & 0x00FF));
                    Constants.Jump_INitialFlag = (int)STemp;
                    break;
                case 7://上层pid相关的数据1-2电压星数 
                    AllAerocraftData.AutoWingFlag = ((int)m_RxData[3] & 0x0000001f);//反馈flag
                    STemp = (short)((((short)m_RxData[5] << 8) & 0xFF00) | ((short)m_RxData[6] & 0x00FF));
                    AllAerocraftData.AutoWingStarNum = (int)(STemp);//GPS_StarNum
                    STemp = (short)((((short)m_RxData[7] << 8) & 0xFF00) | ((short)m_RxData[8] & 0x00FF));
                    AllAerocraftData.AutoWingVoltValue = (int)(STemp) / (float)100.0;//Battery
                    STemp = (short)((((short)m_RxData[9] << 8) & 0xFF00) | ((short)m_RxData[10] & 0x00FF));
                    AllAerocraftData.ZiTai_P = (int)(STemp) / (float)1.0;//姿态p
                    STemp = (short)((((short)m_RxData[11] << 8) & 0xFF00) | ((short)m_RxData[12] & 0x00FF));
                    AllAerocraftData.ZiTai_I = (int)(STemp) / (float)1.0;//姿态i
                    STemp = (short)((((short)m_RxData[13] << 8) & 0xFF00) | ((short)m_RxData[14] & 0x00FF));
                    AllAerocraftData.ZiTai_D = (int)(STemp) / (float)1.0;//姿态d
                    STemp = (short)((((short)m_RxData[15] << 8) & 0xFF00) | ((short)m_RxData[16] & 0x00FF));
                    AllAerocraftData.HangXiang_P = (int)(STemp) / (float)1.0;//航向p
                    STemp = (short)((((short)m_RxData[17] << 8) & 0xFF00) | ((short)m_RxData[18] & 0x00FF));
                    AllAerocraftData.HangXiang_I = (int)(STemp) / (float)1.0;//航向i
                    STemp = (short)((((short)m_RxData[19] << 8) & 0xFF00) | ((short)m_RxData[20] & 0x00FF));
                    AllAerocraftData.HangXiang_D = (int)(STemp) / (float)1.0;//航向d
                    STemp = (short)((((short)m_RxData[21] << 8) & 0xFF00) | ((short)m_RxData[22] & 0x00FF));
                    AllAerocraftData.GaoDu_P = (int)(STemp) / (float)1.0;//高度p
                    STemp = (short)((((short)m_RxData[23] << 8) & 0xFF00) | ((short)m_RxData[24] & 0x00FF));
                    AllAerocraftData.GaoDu_I = (int)(STemp) / (float)1.0;//高度i
                    STemp = (short)((((short)m_RxData[25] << 8) & 0xFF00) | ((short)m_RxData[26] & 0x00FF));
                    AllAerocraftData.GaoDu_D = (int)(STemp) / (float)1.0;//高度d
                    STemp = (short)((((short)m_RxData[27] << 8) & 0xFF00) | ((short)m_RxData[28] & 0x00FF));
                    AllAerocraftData.SuDu_P = (int)(STemp) / (float)1.0;//速度p
                    STemp = (short)((((short)m_RxData[29] << 8) & 0xFF00) | ((short)m_RxData[30] & 0x00FF));
                    AllAerocraftData.SuDu_I = (int)(STemp) / (float)1.0;//速度i
                    STemp = (short)((((short)m_RxData[31] << 8) & 0xFF00) | ((short)m_RxData[32] & 0x00FF));
                    AllAerocraftData.SuDu_D = (int)(STemp) / (float)1.0;//速度d
                    break;
                default://异常情况
                    break;
            }
        }

        public void Function_Reback_ShowInfo(int Recv_Frame_Data, int Tape_Speed_Value)
        {
            byte High_Byte = (byte)((Recv_Frame_Data & 0x0000ff00) >> 8);//接收到的高8位
            byte Low_Byte = (byte)(Recv_Frame_Data & 0x000000ff);//接收到的低8位
            int Battery_Num = (int)((Low_Byte & 0x06) >> 1);//电池类型
            switch (Battery_Num)//电池类型
            {
                case 0://6s电池
                    Constants._alertBatteryValue = 21.4;//6s报警电压
                    break;
                case 1://12s电池
                    Constants._alertBatteryValue = 42.8;//6s报警电压
                    break;
                case 2://4s电池
                    Constants._alertBatteryValue = 14.2;//6s报警电压
                    break;
                case 3://3s电池
                    Constants._alertBatteryValue = 10.7;//6s报警电压
                    break;
                default:
                    break;
            }
        }
        /// <summary>
        /// /////获取每一个数据包大小
        /// </summary>
        /// <param name="ID"></param>
        /// <returns></returns>
        public int GetPacketSize(int ID)
        {
            switch (ID)
            {
                case 1:
                    return (int)PacketSizeImu;
                case 2:
                    return (int)PacketSizeAcceleroMeter;
                case 3:
                    return (int)PacketSizeGeomagnetic;
                case 4:
                    return (int)PacketSizeProp;
                case 5:
                    return (int)PacketSizeSwitch;
                case 6:
                    return (int)PacketSizeRoadPoint;
                case 7:
                    return (int)PacketSizeMotor;
                case 8:
                    return (int)PacketSizeSpeed;
                case 9:
                    return (int)PacketSizeGps;
                case 10:
                    return (int)PacketSizeState;
                case 11:
                    return (int)PacketSizeXbee;
                default:
                    return 0;
            }
        }
        private void MapProviderSelected(string _provider)
        {
            // 如果选择了地图，地图选择状态 /MapProviderDLL 配置更改
            if (_provider != "")
            {
                // 地图提供程序选项
                Dictionary<String, String> dictGmapPlugin = new Dictionary<string, string>();
                // 地图
                Dictionary<String, String> dicMapNameLicence = new Dictionary<String, String>();

                // 从 GMapProvers 添加候选
                foreach (var item in GMapProviders.List)
                {
                    #region Comment
                    Debug.WriteLine(
                         string.Concat(
                             "MainWindow - Map Type : [",
                             item.Name,
                             "]"
                        )
                    );
                    #endregion
                    if (item.GetType().FullName.ToString().CompareTo("GMap.NET.MapProviders.DllMapProvider") != 0)
                    {
                        if ((GMapProviders.OpenStreetMap.ToString() == item.ToString()))
                        {
                            dicMapNameLicence[item.Name] = item.Copyright;
                        }
                    }
                }
                // 从 GMapPlugin 添加候选
                // 要加载的 DLL
                GMapProvPluginInfo pInfo = new GMapProvPluginInfo();
                String[] strArray = pInfo.FindPluginFileNames();
                foreach (var item in strArray)
                {
                    GMapProvPluginInfo pluginInfo = new GMapProvPluginInfo(item);
                    // 要加载的 DLL
                    GMapNetInterFace.IF_Plugin ifPlugin = pluginInfo.getDllInstance();

                    Debug.WriteLine(
                         string.Concat(
                             "MainWindow - Map Type 2: [",
                             ifPlugin.strMapName,
                             "]"
                        )
                    );
                    dicMapNameLicence[ifPlugin.strMapName] = ifPlugin.strLicence;

                    dictGmapPlugin.Add(ifPlugin.strMapName, item);
                }

                //////////////////////////////////////////////////////////////////////////
                //　初始的地图提供商
                string map = _provider;
                //要设置搜索名称为 MapProvider 的地图。

                // 要枚举的元素
                GMapProvider vvvvv = null;
                foreach (var item in GMapProviders.List)
                {
                    Debug.WriteLine(item.Name);
                    if (map.CompareTo(item.Name) == 0)
                    {
                        MainMap.MapProvider = item;
                        return;
                    }
                    if (item.GetType().ToString().CompareTo("GMap.NET.MapProviders.DllMapProvider") == 0)
                    {
                        vvvvv = item;
                    }
                }

                GMapProviders.List.Remove(vvvvv);

                GMap.NET.MapProviders.DllMapProvider.Instance.setPluging(dictGmapPlugin[map]);
                GMapProvider _map = GMap.NET.MapProviders.DllMapProvider.Instance;
                MainMap.MapProvider = _map;
                Copyright.Content = dicMapNameLicence[map];

                if (MainMap.MapProvider.ToString() == GMapProviders.OpenStreetMap.ToString())
                {
                    Copyright.Foreground = Brushes.Gray;
                }
                else
                {
                    Copyright.Foreground = Brushes.White;
                }

            }
        }

        // 电源监控
        private void SystemEvents_PowerModeChanged(object sender, Microsoft.Win32.PowerModeChangedEventArgs e)
        {
            switch (e.Mode)
            {
                case Microsoft.Win32.PowerModes.StatusChange:
                    _logger.Info("Microsoft.Win32.PowerModes.StatusChange 电源状态更改");
                    break;
                case Microsoft.Win32.PowerModes.Suspend:
                    _logger.Info("Microsoft.Win32.PowerModes.Suspend 挂起状态");
                    sw.Stop();
                    //WaitTime.Stop();
                    break;
                case Microsoft.Win32.PowerModes.Resume:
                    _logger.Info("Microsoft.Win32.PowerModes.Resume 从挂起状态恢复");
                    sw.Start();
                    //WaitTime.Start();
                    break;
            }
        }
        #endregion

        #region 线程
        /// <summary>
        /// ConnectLoop 类
        /// </summary>
        /// <remarks>
        /// ConnectLoop 过程 (通信连接验证)
        /// </remarks>
        /// <returns>
        /// ture:成功连接　false:连接失败
        /// </returns>
        private bool ConnectLoop()
        {
            try
            {
                //　通信初始设定
                string ad = Properties.Settings.Default.CoreIPaddress;
                int port = Properties.Settings.Default.CorePort;

                Debug.WriteLine("IPAddress:" + ad + "   Port:" + port);

                IPEndPoint remoteEP = new IPEndPoint(IPAddress.Parse(ad), port);
                Client = new System.Net.Sockets.Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

                // Connect to the remote endpoint.
                Client.BeginConnect(remoteEP, new AsyncCallback(ConnectCallback), Client);
                if (!connectDone.WaitOne(15000))
                {
                    // 结束
#if DEBUG
					// 运行的核心
					if (System.IO.File.Exists(System.IO.Path.GetFullPath(@"../Core/Stop_X-Monitor_CoreD.bat")) == true)
					{
						Process.Start(System.IO.Path.GetFullPath(@"../Core/Stop_X-Monitor_CoreD.bat"));
					}
					else
					{
						System.Windows.MessageBox.Show("(002) 无法完成核心。\n手动，请退出。\n" + System.IO.Path.GetFullPath(@"../../../../X-Monitor/bin/Stop_X-Monitor_CoreD.bat"));
					}
#else
                    //运行核心
                    if (System.IO.File.Exists(System.IO.Path.GetFullPath(@"../Core/Stop_X-Monitor_Core.bat")) == true)
                    {
                        ProcessStartInfo psInfo = new ProcessStartInfo();
                        psInfo.FileName = System.IO.Path.GetFullPath(@"../Core/Stop_X-Monitor_Core.bat");		// 要运行文件
                        psInfo.WindowStyle = ProcessWindowStyle.Hidden;		// DOS 窗口处于隐藏状态
                        psInfo.CreateNoWindow = true;						// 不要打开控制台窗口
                        psInfo.UseShellExecute = false;						// 不使用 shell 函数
                        Process.Start(psInfo);
                    }
                    else
                    {
                        System.Windows.MessageBox.Show("(002)Core Execution Failure。\n" + System.IO.Path.GetFullPath(@"../../../../X-Monitor/bin/Stop_X-Monitor_Core.bat"));
                    }
#endif
                    // Release the socket.
                    //Client.Shutdown(SocketShutdown.Both);
                    Client.Close();
                    EndFlag = false;
                    return false;
                }

                Debug.WriteLine("ConnectLoop" + Client.Connected);
                return true;
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show("(301-2) Massage Receive Error-2: " + ex.Message);
                _logger.Error("(301-2) Massage Receive Error-2: " + ex.Message);
                EndFlag = false;
                return false;
            }

        }
#if DEBUG
        Stopwatch psw = new Stopwatch();	//处理速度1
		Stopwatch psw2 = new Stopwatch();	//处理速度2
#endif
        /// <summary>
        /// WorkThread 类
        /// </summary>
        /// <remarks>
        /// WorkThread 处理 (通信 / 通信评审线程/绘图更新线程 / 监视线程)
        /// </remarks>
        private void WorkThread()
        {
            bool FarmwareCheck = true;

            // 不同情况的终结。
            #region 版本检查线程
            Task.Factory.StartNew(() =>
            {
                _logger.Info("ver-S");
                //try
                {

                    #region 初始化com口
                    // 初始化com口
                    string text = DataConstellation.ReadMassage(XmlMessage.Get_Initial);//COM3等
                    //Debug.WriteLine("COM Port： " + text + "\n");
                    Send(Client, text);
                    sendDone.WaitOne(); //发送等待

                    Receive(Client);

                    while (!ReceiveDataUpdate()) ;

                    SettingData.SerialPortSetting = "COM" + DataConstellation.GetMassage("Config/COM/Port", false);		//不删除所接收的数据
                    DataConstellation.BindingData.FilePath = DataConstellation.GetMassage("Config/FlightLog/FilePath");

                    Debug.WriteLine("COM Port：" + SettingData.SerialPortSetting);
                    Debug.WriteLine("FilePath：" + DataConstellation.BindingData.FilePath);

                    text = DataConstellation.CloseMassage(XmlMessage.Get_Initial);
                    Send(Client, text);
                    sendDone.WaitOne();

                    #endregion

                    // 初始的 get 消息
                    string data = DataConstellation.ReadMassage(XmlMessage.Get_UAVData);
                    DataConstellation.XMLgetsize = data.ToList().Where(c => c.Equals('\n')).Count() + 1;
                    Send(Client, data);
                    sendDone.WaitOne();

                    DataConstellation.CommandMode = 1;				//初始值

                    int period = 100;	//周期(msec)
                    bool _finish = false;
                    int _countf = 0;
                    List<string> tag = new List<string>();
                    List<string> value = new List<string>();

                    string _TofirmwareVersionL = "";
                    string _TofirmwareVersionH = "";

                    while (EndFlag)
                    {
                        if (!EndFlag || _finish) break;
                        //重新打开检查前次结束时的版本
                        if (ResultUpdate && ConnectCount != 0 && DataConstellation.CommandMode == 1)
                        {
                            if (FarmwareCheck)
                            {
                                #region 机体信息

                                #endregion

                                #region 初始的固件信息
                                if (_countf == 0)
                                {
                                    tag = new List<string>();
                                    value = new List<string>();
                                    text = string.Empty;

                                    tag.Add("Data/UAV/Firm/SendFlag");
                                    value.Add("T");

                                    text = DataConstellation.SetMassage(XmlMessage.MainlinkSend_Firm, tag, value);
                                    Send(Client, text);
                                    sendDone.WaitOne();
                                }

                                #endregion

                                if (DataConstellation.BindingData.Health.FirmwareVersionL != "NoData" && DataConstellation.BindingData.Health.FirmwareVersionH != "NoData")
                                {
                                    string[] _firmwareVersionL = DataConstellation.BindingData.Health.FirmwareVersionL.Split('.');
                                    string[] _firmwareVersionH = DataConstellation.BindingData.Health.FirmwareVersionH.Split('.');

                                    // 上下版本是否匹配
                                    if (_firmwareVersionL[0] == _firmwareVersionH[0] && _firmwareVersionL[1] == _firmwareVersionH[1])
                                    {
                                        // X-Monitor在注册过程中的固件验证
                                        string[] _firmwareVersion = Properties.Settings.Default.APFCVersion.Split('.');
                                        if (_firmwareVersionL[0] == _firmwareVersion[0] && _firmwareVersionL[1] == _firmwareVersion[1])
                                        {
                                            // 固件验证 OK
                                            FarmwareCheck = false;
                                            _countf = 0;
                                            _TofirmwareVersionL = DataConstellation.BindingData.Health.FirmwareVersionL;
                                            _TofirmwareVersionH = DataConstellation.BindingData.Health.FirmwareVersionH;
                                        }
                                        else
                                        {
                                            _finish = true;
                                            FarmwareCheck = false;
                                        }
                                    }
                                    else
                                    {
                                        _finish = true;
                                        FarmwareCheck = false;
                                    }

                                }
                                _countf++;
                            }
                            else
                            {

                                string[] _firmwareVersionL = DataConstellation.BindingData.Health.FirmwareVersionL.Split('.');
                                string[] _firmwareVersionH = DataConstellation.BindingData.Health.FirmwareVersionH.Split('.');

                                if (_TofirmwareVersionL != DataConstellation.BindingData.Health.FirmwareVersionL && _TofirmwareVersionH != DataConstellation.BindingData.Health.FirmwareVersionH)
                                {
                                    // 上下版本是否匹配
                                    if (_firmwareVersionL[0] == _firmwareVersionH[0] && _firmwareVersionL[1] == _firmwareVersionH[1])
                                    {
                                        // X-Monitor在注册过程中的固件验证
                                        string[] _firmwareVersion = Properties.Settings.Default.APFCVersion.Split('.');
                                        if (_firmwareVersionL[0] == _firmwareVersion[0] && _firmwareVersionL[1] == _firmwareVersion[1])
                                        {
                                            //  固件验证 OK
                                            FarmwareCheck = false;
                                            _countf = 0;
                                            period = 1000;
                                            _TofirmwareVersionL = DataConstellation.BindingData.Health.FirmwareVersionL;
                                            _TofirmwareVersionH = DataConstellation.BindingData.Health.FirmwareVersionH;
                                        }
                                        else
                                        {
                                            _finish = true;
                                            FarmwareCheck = false;
                                        }
                                    }
                                    else
                                    {
                                        _finish = true;
                                        FarmwareCheck = false;
                                    }
                                }
                            }

                            if (_finish)
                            {
                                #region 固件版本信息得到停止
                                //tag = new List<string>();
                                //value = new List<string>();
                                //text = string.Empty;

                                //tag.Add("Data/UAV/Firm/SendFlag");
                                //value.Add("F");

                                //text = DataConstellation.SetMassage(XmlMessage.MainlinkSend_Firm, tag, value);
                                //Send(Client, text);
                                //sendDone.WaitOne();
                                #endregion
                                // 结束
                                Dispatcher.BeginInvoke((Action)(() =>
                                {
                                    //_finish = false;
                                    FinishMode = 1;
                                    Close();
                                }));
                            }
                        }

                        System.Threading.Thread.Sleep(period);
                    }
                }
                //catch (Exception ex)
                //{
                //	_logger.Error("(000) FirmwareVersion Error: " + ex.Message);
                //	//System.Windows.MessageBox.Show("(000) FirmwareVersion Error: " + ex.Message);
                //}
                _logger.Info("ver-E");
            });
            #endregion

            #region 通信线程
            //在一个周期内做DoEvents，数据更新
            // ================================================================================
            // 异步处理线程[.NET Framework 4样式]
            Task.Factory.StartNew(() =>
            {
                _logger.Info("task-S");
                try
                {
                    long nextFrame = sw.ElapsedMilliseconds;		//已用秒数(msec)
                    const long period = 20;	//周期(msec)

                    while (EndFlag)
                    {
                        if (!EndFlag) break;

                        long tickCount = sw.ElapsedMilliseconds;	// 获取当前时间

                        // 跳转
                        if (tickCount < nextFrame)
                        {
                            if (nextFrame - tickCount > 1)
                            {

                                System.Threading.Thread.Sleep((int)(nextFrame - tickCount));	// Wait等待时间，使得nextFrame = tickCount 
                            }
                            //Debug.WriteLine("Skip：" + (nextFrame - tickCount));
                            DoEvents();		// 来处理 Windows 消息 所有该绘制的控件仅仅因为DoEvents()函数的调用就得到了刷新 防止界面假死现象
                            continue;
                        }
                        //使用BeginInvoke方法封送一个委托方法，类似于使用PostMessage进行通信，这是一个异步方法。也就是该方法封送完毕后马上返回，不会等待委托方法的执行结束，调用者线程将不会被阻塞。
                        //如果你的后台线程在更新一个UI控件的状态后不需要等待，而是要继续往下处理，那么你就应该使用BeginInvoke来进行异步处理
                        Dispatcher.BeginInvoke((Action)(() =>
                        {

#if DEBUG
							psw2.Stop();
							double sec = ((double)psw2.ElapsedTicks / (double)Stopwatch.Frequency) * 1000;
							//Debug.WriteLine("通信线程：" + sec + " / " + (nextFrame - tickCount));
							psw2.Reset();
							psw2.Start();
#endif
                            //接收数据更新
                            lock (obj)
                            {
                                ReceiveDataUpdate();
                                if (Constants.Play_Data_Back_Flag == false)
                                {
                                    if (Dat_Save_Flag == 1)
                                    {
                                        Save_All_Data();//50hz保存数据
                                    }
                                }
                                if (Constants.Play_Data_Back_Flag == true)
                                {
                                    if (Constants.Stop_or_Reback_Flag==0)
                                    {
                                        Function_Data_PlayBack();
                                    }
                                }
                            }
#if DEBUG
							// 当你调试的时候在主屏幕上显示调试文本
							if (DataConstellation.strXmlData.Count >0)
							{
								test.Text = string.Empty;
								for (int i = 0; i < DataConstellation.strXmlData.Count; i++)
								{
									test.Text += DataConstellation.strXmlData[i];
									test.Text += "**************************************************";
								}
							}
							else
							{
								//test.Text = "";
							}
#endif
                        }));

                        nextFrame += period;
                    }

                    // 撤消命令飞行计划，关闭飞行计划
                    MultiWaypointClose();
#if DEBUG
					// 运行的核心
					if (System.IO.File.Exists(System.IO.Path.GetFullPath(@"../Core/Stop_X-Monitor_CoreD.bat")) == true)
					{
						Process.Start(System.IO.Path.GetFullPath(@"../Core/Stop_X-Monitor_CoreD.bat"));
					}
					else
					{
						System.Windows.MessageBox.Show("(002) 无法完成核心。\n手动，请退出。\n" + System.IO.Path.GetFullPath(@"../../../../X-Monitor/bin/Stop_X-Monitor_CoreD.bat"));
					}
#else
                    // 运行的核心
                    if (System.IO.File.Exists(System.IO.Path.GetFullPath(@"../Core/Stop_X-Monitor_Core.bat")) == true)
                    {
                        ProcessStartInfo psInfo = new ProcessStartInfo();
                        psInfo.FileName = System.IO.Path.GetFullPath(@"../Core/Stop_X-Monitor_Core.bat");		// 要运行文件
                        psInfo.WindowStyle = ProcessWindowStyle.Hidden;		// DOS 窗口处于隐藏状态
                        psInfo.CreateNoWindow = true;						// 不要打开控制台窗口
                        psInfo.UseShellExecute = false;						// 不使用 shell 函数
                        Process.Start(psInfo);
                    }
                    else
                    {
                        System.Windows.MessageBox.Show("(002)Core Execution Failure。\n" + System.IO.Path.GetFullPath(@"../../../../X-Monitor/bin/Stop_X-Monitor_Core.bat"));
                    }
#endif


                    // Release the socket.
                    Client.Shutdown(SocketShutdown.Both);
                    Client.Close();

                }
                catch (Exception ex)
                {
                    System.Windows.MessageBox.Show("(301) Massage Receive Error: " + ex.Message);
                    _logger.Error("(301) Massage Receive Error: " + ex.Message);
                }
                _logger.Info("task-E");
            });

            #endregion

            #region 通信审查线程
            // ================================================================================
            //异步处理线程[.NET Framework 4样式]
            Task.Factory.StartNew(() =>
            {
                _logger.Info("check-S");
                try
                {
                    long nextFrame = sw.ElapsedMilliseconds;	//已用秒数(msec)
                    const long period = 100;	//周期(msec)

                    while (EndFlag)
                    {
                        if (!EndFlag) break;

                        // 获取当前时间
                        long tickCount = sw.ElapsedMilliseconds;

                        //跳过
                        if (tickCount < nextFrame)
                        {
                            //1ms以上
                            if (nextFrame - tickCount > 1)
                            {
                                // 睡眠等待
                                System.Threading.Thread.Sleep((int)(nextFrame - tickCount));
                            }
                            // 处理 Windows 消息
                            DoEvents();
                            // 跳过剩余过程
                            continue;
                        }
                        //使用线程异步地执行委托所指向的方法beginvoke就是通过线程的调用来异步的完成一些工作。
                        //一般只需要启动它就好，让它一直操作着。例如 用begininvoke修改界面显示，那么就是每次有所变化时它自动的改变界面的显示，因为它在后台执行着。
                        Dispatcher.BeginInvoke((Action)(() =>
                        {
                            // 回放
                            Reply(WaitTime);
                        }));

                        // 计算下一帧的时间
                        nextFrame += period;
                    }

                }
                catch (Exception ex)
                {
                    System.Windows.MessageBox.Show("(302) Reply Error: " + ex.Message);
                    _logger.Error("(302) Reply Error: " + ex.Message);
                }
                _logger.Info("check-E");
            });
            #endregion

            #region 更新线程的呈现

            // ================================================================================
            //线程[.NET Framework 4样式]
            Task.Factory.StartNew(() =>
            {
                _logger.Info("view-S");
                try
                {
                    long nextFrame = sw.ElapsedMilliseconds;		//已用秒数(msec)
                    const long period = 150;						//周期(msec)
                    int _flightLogPlayCount = 0;

                    while (EndFlag)
                    {
                        if (!EndFlag) break;

                        long tickCount = sw.ElapsedMilliseconds;	// 获取当前时间

                        // 跳转到
                        if (tickCount < nextFrame)
                        {
                            if (nextFrame - tickCount > 1)
                            {

                                System.Threading.Thread.Sleep((int)(nextFrame - tickCount));	// Wait
                            }
                            DoEvents();		// 来处理 Windows 消息
                            continue;
                        }
                        if ((double)sw.ElapsedMilliseconds >= nextFrame + period)
                        {
                            nextFrame += period;
                            continue;
                        }
                        // 异步处理
                        Dispatcher.BeginInvoke((Action)(() =>
                        {

#if DEBUG

							psw.Stop();
							TimeSpan ts = psw.Elapsed;
							double sec = ((double)psw.ElapsedTicks / (double)Stopwatch.Frequency) * 1000;
							//Debug.WriteLine("更新线程：" + sec + " / " + (nextFrame - tickCount) + "\n");
							psw.Reset();
							psw.Start();
#endif
                            #region 绘图操作 (数据更新)
                            ResultUpdate = false;
                            //能够正确地检查传入的数据
                            //	if (DataConstellation.XmlDataCheck())
                            if (true)//临时修改为可以进入
                            {
                                if (Dat_Save_Flag==1)
                                {
                                    TimerName.Connect = true;
                                }
                                ResultUpdate = MainDataUpdate();
                                /************************************所有相关设置的数据跟新**********************************/
                                FunctionSetDialog_DataUpdate();
                                /***************************************临时添加的界面更新***********************************/
                                int i;
                                for ( i = 0; i < 100; i++)
                                {
                                    this.shijain.Content = i;
                                    
                                }
                                i = 0;
                                    
                                    
                                
                                MainDataFrameUpdate();
                                /***************************************临时添加的界面更新***********************************/
                                /***************************************标志位控制的指令发送***********************************/
                                if (Stop_SendMession_Flag==0)
                                {
                                    Control_Mession_Send();
                                }
                                /***************************************标志位控制的指令发送*********************************/
                                DisconnectCount = 0;		//
                                ConnectCount++;
                                SettingData.Mode = 1;
                                if (ResultUpdate)
                                {
                                    MapUpdate(ResultUpdate);
                                }
                                _flightLogPlayCount = 0;
//////////////////////////////////一旦数据回放保存停止//////////////////////////////////////////////////////////////////
                                if (Constants.Play_Data_Back_Flag == false)
                                {
                                    Save_Count++;
                                    if (Save_Count >= 6000)
                                    {
                                        Save_Count = 0;
                                        this.Save_Data();
                                        list_Save_Data.Clear();

                                    }
                                }

                                /////////////////////////////////////泵的设置跟新//////////////////////////////////////////////////////////
                                Function_Pump_DataRefsh(AllAerocraftData.New_Param_Headfile_Num);
                                /////////////////////////////////////磁偏角及拐弯参数设置////////////////////////////////////////////
                                Function_ABAndMagangle_Refsh((int)AllAerocraftData.New_AB_Point_Alloffset);
                                ////////////////////////////////////安全策略显示更新//////////////////////////
                                Function_AnQuanCeLue_Refsh((Int32)AllAerocraftData.Anquancelue_Code, (Int32)AllAerocraftData.Anquancelue_Value);
                                ////////////////////////////////////航拍作业参数显示更新////////////////////////
                                Function_HangPaiCanShu_Refsh((Int32)AllAerocraftData.Hangpaicanshu_Code, (Int32)AllAerocraftData.Hangpaicanshu_Value);

                                /////////////////////////////////////喷洒动作更新/////////////////////////////
                                Function_PlantOperationConfig((int)AllAerocraftData.PlantProtectOperation);



                                //////////////////////////////////////植保航拍界面参数切换更新///////////////
                                Function_zhibaohangpai_Refsh((Int32)AllAerocraftData.Hangpaizhibao_Value);

                                RePort_Connect_Count++;
                                if (RePort_Connect_Count > 50)
                                {
                                    RePort_Connect_Count = 0;

                                    //try
                                    //{
                                    //    if (dlg.ShowActivated == true)
                                    //    {
                                    //        Thread.Sleep(1000);//次线程休眠1秒
                                    //        this.Dispatcher.Invoke(new Action(delegate
                                    //        {
                                    //            dlg.Close();
                                    //        }));
                                    //    }
                                    //}
                                    //catch (Exception)
                                    //{

                                    //}

                                    if (open_com_flag == false)
                                    {
                                        btnOpenPort.IsChecked = true;
                                        btnOpenPort.RaiseEvent(new RoutedEventArgs(System.Windows.Controls.Button.ClickEvent));
                                    }
                                }

                            }
                            else
                            {
                                SettingData.Mode = 0;
                                if (DisconnectCount != -1 && !PlayState)
                                {
                                    if (DisconnectCount > Constants._disconnectCount)
                                    {
                                        ///////////////////////////////////////////////////////////////////
                                        MainMonitorClear();									// 清除屏幕
                                        FarmwareCheck = true;								// 固件检查
                                    }
                                    else
                                    {
                                        DisconnectCount++;
                                    }
                                }

                                // 飞行日志回放时间
                                if (DataConstellation.CommandMode == 2)
                                {
                                    if (!PlayFlag && User2.Content == Constants._commandUser2_3)
                                    {
                                        // 重新开始
                                        if (_flightLogPlayCount > 8)
                                        {
                                            // 消息发送
                                            Thread.Sleep(1);

                                            string text = DataConstellation.SetMassage(XmlMessage.Set_FlightLogPlay,
                                                            new List<string> { "FlightLog/Play/OpeMode" },
                                                            new List<string> { "PLAY" });
                                            Send(Client, text); //发送
                                            sendDone.WaitOne();         //发送等待

                                            PlayerSlide.PlaySlider = false;   //
                                            _flightLogPlayCount = 0;
                                        }
                                        _flightLogPlayCount++;
                                    }
                                }
                            }
                            SubDataUpdate();
                            OptionDataUpdate(ResultUpdate);
                            #endregion

                        }));
                        nextFrame += period;
                    }
                }
                catch (Exception ex)
                {
                    System.Windows.MessageBox.Show("(303) Update Error: " + ex.Message);
                    _logger.Error("(303) Update Error: " + ex.Message);
                }
                _logger.Info("view-E");
            });

            #endregion
            //警报处理过程
            #region 监视线程
            // ================================================================================
            // 异步处理线程[.NET Framework 4样式]
            Task.Factory.StartNew(() =>
            {
                _logger.Info("watch-S");
                try
                {
                    //回放
                    int isRepeat = 0;
                    int _count = 0;			//计数
                    int _sleepTime = 100;	//等待时间

                    //　等待初始荷载
                    System.Threading.Thread.Sleep(1000); //1000ms
                    while (EndFlag)
                    {
                        if (!EndFlag) break;

                        Dispatcher.BeginInvoke((Action)(() =>
                        {
                            _count = AlertProcess(isRepeat, _count);//警报处理过程
                        }));

                        System.Threading.Thread.Sleep(_sleepTime); //1s
                    }

                }
                catch (Exception ex)
                {
                    System.Windows.MessageBox.Show("(304) Alert Error: " + ex.Message);
                    _logger.Error("(304) Alert Error: " + ex.Message);
                }
                _logger.Info("watch-E");
            });
            #endregion

            #region 命名
            // ================================================================================
            // 异步处理线程[.NET Framework 4样式]
            Task.Factory.StartNew(() =>
            {
                _logger.Info("pipe-S");
                try
                {
                    // 生成服务器类
                    PipeServer P_Server = new PipeServer();


                    // 方法和事件注册
                    // 指定要开始接受 (事件) 的方法。
                    P_Server.StartListenEvent += new PipeServer.StartListenMethodDelegate(MyControl1_StartListen);


                    // 方法和事件注册
                    // 一旦收到消息触发的方法
                    P_Server.ReceiveCallEvent += new PipeServer.ReceiveCallDelegate(MyControl1_ReceiveCall);


                    // 方法和事件注册
                    // 一旦发送完触发的方法
                    P_Server.FinishTransmissionEvent += new PipeServer.FinishTransmissionDelegate(MyControl1_FinishTransmission);



                    PipeConnected = true;
                    while (EndFlag)
                    {
                        if (!EndFlag) break;

                        if (PipeConnected)
                        {
                            // 运行测试过程
                            P_Server.Listen("test");
                            PipeConnected = false;
                        }

                        System.Threading.Thread.Sleep(1000); //1s
                    }
                }
                catch (Exception ex)
                {
                    System.Windows.MessageBox.Show("(000) Error: " + ex.Message);
                    _logger.Error("(000) Error: " + ex.Message);
                }
                _logger.Info("pipe-E");
            });
            #endregion
        }

        /// <summary>
        /// DoEvents类
        /// </summary>
        /// <remarks>
        /// DoEvents处理
        /// </remarks>
        public void DoEvents()
        {
            DispatcherFrame frame = new DispatcherFrame();
            Dispatcher.CurrentDispatcher.BeginInvoke(DispatcherPriority.Background,
                new DispatcherOperationCallback(ExitFrames), frame);
            Dispatcher.PushFrame(frame);
        }

        /// <summary>
        /// ExitFrames类
        /// </summary>
        /// <remarks>
        /// ExitFrames处理
        /// </remarks>
        public object ExitFrames(object f)
        {
            ((DispatcherFrame)f).Continue = false;

            return null;
        }

        // 清除屏幕
        private void MainMonitorClear()
        {
            //			DataConstellation.XMLClear();
            MainDataUpdate();
            DisconnectCount = -1;
            ConnectCount = 0;
            Altitude.ControlMode = 0;

            // 轨迹清除
            var clear = MainMap.Markers.Where(p => p == UAVRoute || p == SubRoute);
            if (clear != null)
            {
                for (int i = 0; i < clear.Count(); i++)
                {
                    MainMap.Markers.Remove(clear.ElementAt(i));
                    i--;
                }
            }
            ////////////添加的home////////////////////////////////////////////////
            HomeMarker = new GMapMarker(new PointLatLng());
            {
                HomeMarker.Shape = new CustomMarker(HomeMarker, "Home", "Resources/home.png");
                HomeMarker.Offset = new System.Windows.Point(-15, -25);
                HomeMarker.ZIndex = int.MaxValue - 3;
                MainMap.Markers.Add(HomeMarker);
            }

           // UAVRoute = new GMapRoute(new List<PointLatLng>());
           // UAVRoute.LineBrush = Brushes.Red;   //轨迹红色
            //MainMap.Markers.Add(UAVRoute);

            /////////新添加的轨迹/////////
            UAVRoute_two = new GMapRoute(new List<PointLatLng>());
            UAVRoute_two.LineBrush = Brushes.Green;
            MainMap.Markers.Add(UAVRoute_two);

            SubRoute = new GMapRoute(new List<PointLatLng>());
            SubRoute.LineBrush = Brushes.Blue;
            MainMap.Markers.Add(SubRoute);

            // 撤消命令飞行计划飞行时间
            MultiWaypointClose();
            MainHealthMonitorClear();

            //DataConstellation.BindingData = new XmlData();		// 数据
            //DataConstellation.BindingData.Health = new Health.HealthData();
            //response.Clear();									// <---解释语清除

            Dwindow.PlotDataClear();
       //     TimerName.Connect = false;
            Altitude.ElevationValue = SettingData.Elevation;
            //核心清除
            //Send(Client, Config.Constant.SetMessageClear);
            //sendDone.WaitOne(); //发送等待

        }
        // Health画面清屏
        private void MainHealthMonitorClear()
        {
            System.Windows.Media.SolidColorBrush _brush = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(31, 26, 80));
            _brush.Opacity = 0.7;
            BatteryName.Background = _brush;
            GPSName.Background = _brush;
            RCrecName.Background = _brush;
            LinkName.Background = _brush;
        }
        #endregion

        #region Reply
        /// <summary>
        ///回复类
        /// </summary>
        /// <remarks>
        /// 检查通讯 (收到的答复数据和超时处理) 的答复
        /// </remarks>
        /// <param name="WaitTime">超时</param>
        /// 对通信连接的各种情况的应答情况
        private void Reply(System.Diagnostics.Stopwatch WaitTime)//Stopwatch 实例可以测量一个时间间隔的运行时间
        {

            bool init = false;
            string result = string.Empty;
            string wptId = string.Empty;
            string Replymessage = "应答结果";
            string message = "Error";



            if (DataConstellation.ReplyMode != 0)
            {
                WaitTime.Start();
            }

            lock (obj)
            {
                string str = DataConstellation.XmlSelect();
                #region 答复接收到的数据
                switch (DataConstellation.ReplyMode)
                {
                    case -1:
                        Replymessage = "传输取消";
                        message = "飞行计划取消。\n" + DataConstellation.BindingData.FlightLogFileSavePath;
                        init = true;
                        result = "NG";
                        WaitTime.Stop();
                        WaitTime.Reset();
                        break;
                    case 0:
                        // 正常状态
                        break;
                    case 1:
                        //COM口相关设定 OK:成功　NG:失敗
                        result = DataConstellation.GetMassage("ConfigReply/COM/Result");
                        Debug.WriteLine("Reply*********** 1\n" + DataConstellation.strXmlData);
                        message = "无法设置com端口。\n" + SettingData.SerialPortSetting;
                        break;
                    case 2:
                        //得到确定的答复 打开飞行日志 OK:成功　NG:失敗
                        result = DataConstellation.GetMassage("FlightLogReply/Play/Result", false);
                        Debug.WriteLine("Reply*********** 2\n" + DataConstellation.strXmlData);
                        message = "不能打开飞行日志。\n" + DataConstellation.BindingData.FlightLogFilePath;
                        break;
                    case 3:
                        //得到确定的答复关闭飞行日志 OK:成功　NG:失敗
                        result = DataConstellation.GetMassage("FlightLogReply/Play/Result");
                        Debug.WriteLine("Reply*********** 3\n" + DataConstellation.strXmlData);
                        message = "无法关闭日志。\n" + DataConstellation.BindingData.FlightLogFilePath;
                        break;
                    case 4:
                        //保存飞行日志 OK:成功　NG:失敗
                        result = DataConstellation.GetMassage("FlightLogReply/Play/Result");
                        Debug.WriteLine("Reply*********** 4\n" + DataConstellation.strXmlData);
                        message = "无法保存飞行日志。\n" + DataConstellation.BindingData.FlightLogFileSavePath;
                        break;
                    case 5:
                        wptId = DataConstellation.GetMassage("Data/UAV/MltWptAck/WptId");
                        if (wptId != "")
                        {
                            if (wptId == "4294967295")
                            {
                                TransmitBar.Value = TransmitBar.Maximum;
                            }
                            else
                            {
                                TransmitBar.Value += 1;
                            }
                            result = "OK";
                        }
                        Debug.WriteLine("Reply*********** 5 >>>>>>>>>>>>>>>>>>>>>>>>>>>>" + wptId + "\r\n");
                        message = "飞行任务传输失败。\n" + DataConstellation.BindingData.FlightLogFileSavePath;
                        break;
                    default:
                        break;

                }
                #endregion
            }

            int _waitTime = 0;

            if (DataConstellation.ReplyMode == 5)
            {
                _waitTime = Properties.Settings.Default.FlightPlanReplyWait;
            }
            else
            {
                _waitTime = Properties.Settings.Default.FlightLogReplyWait;
            }

            //若要取消请等待
            if (WaitTime.Elapsed.TotalSeconds > _waitTime)
            {
                init = true;
                result = "NG";
                WaitTime.Stop();
                WaitTime.Reset();
            }
            if (result == "NG")
            {
                init = true;
            }

            #region 对回复的处理
            if (result == "OK")
            {
                switch (DataConstellation.ReplyMode)
                {
                    case 0:
                        break;
                    case 1:
                        init = true;
                        break;
                    case 2:

                        // 重新设定
                        string total = string.Empty;
                        lock (obj)
                        {
                            total = DataConstellation.GetMassage("FlightLogReply/Play/TotalTime");
                        }
                        Debug.WriteLine("Toal:" + total);
                        if (total != "")
                        {
                            // 修改命令
                            CommandButtonNameChange(DataConstellation.CommandMode = 2);	//命令开关
                            MenuIsEnabled(2);											//菜单显示与不显示开关

                            PlayerSlide.LowerValue = PlayerSlide.RangeMinimum = PlayerSlide.Minimum = 0;
                            PlayerSlide.PlayValue = 0;
                            PlayerSlide.Maximum = double.Parse(total);
                            PlayerSlide.HigherValue = PlayerSlide.RangeMaximum = double.Parse(total);
                            PlayerSlide.RangeMaximum = double.Parse(total);
                        }
                        init = true;

                        // 发送日志回放
                        string text = DataConstellation.SetMassage(XmlMessage.Set_FlightLogSlidebar,
                                                                    new List<string> { "FlightLog/Play/CurrentTime" },
                                                                    new List<string> { (1).ToString() });
                        Send(Client, text); //发送
                        sendDone.WaitOne(); //发送等待

                        System.Threading.Thread.Sleep(1000);		// wait
                        // 重新开始命令发送
                        PlayFlag = true;								//Paly
                        User2.Content = Constants._commandUser2_3;     //暂时停止
                        Send(Client, CommandPlayPause()); //发送
                        sendDone.WaitOne(); //发送等待


                        break;
                    case 3:
                        // 
                        CommandButtonNameChange(DataConstellation.CommandMode = 1);		//命令开关
                        MenuIsEnabled(0);												//菜单显示/不显示开关
                        PlayerSlide.PlayValue = 0;										//クリア（确定?）
                        init = true;
                        break;
                    case 4:
                        init = true;
                        break;
                    case 5:
                        long _id = long.Parse(wptId);

                        if (_id == 4294967295)
                        {
                            SendSound.Position = new TimeSpan(0);
                            SendSound.Play();
                            init = true;
                            Replymessage = "发送完成";
                            message = "飞行任务发送完成。\n" + DataConstellation.BindingData.FlightLogFileSavePath;
                        }
                        else if (_id >= DataConstellation.BindingData.MulitWaypoint.multi.Count)
                        {
                            TransmitSetMassage(4294967295);	//完成消息
                        }
                        else
                        {
                            _id += 1;
                            TransmitSetMassage(_id);
                        }
                        // 答复时间
                        WaitTime.Stop();
                        WaitTime.Reset();
                        DataConstellation.strXmlData = new List<string>();	//清空

                        break;
                    default:
                        break;

                }
            }
            #endregion

            #region
            if (init)
            {
                int _mode = -1;	// ReplyMode保存

                switch (DataConstellation.ReplyMode)
                {
                    case -1:
                    case 5:
                        _mode = 5;
                        break;
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        string data = DataConstellation.ReadMassage(XmlMessage.Get_UAVData);
                        DataConstellation.XMLgetsize = data.ToList().Where(c => c.Equals('\n')).Count() + 1;
                        Send(Client, data);
                        sendDone.WaitOne();
                        WaitWindow.Visibility = Visibility.Hidden;
                        break;
                }

                DataConstellation.ReplyMode = 0;					//正常模式转换

                //答复之间重置
                WaitTime.Stop();
                WaitTime.Reset();

                // NG情况下的基本状态转换
                if (result == "NG")
                {
                    //显示一个提示框
                    if (System.Windows.Forms.MessageBox.Show(message, Replymessage, MessageBoxButtons.OK, MessageBoxIcon.Error) == System.Windows.Forms.DialogResult.OK)
                    {
                        if (_mode == 5)
                        {
                            TransmitSetMassage(4294967295, 4294967295);		//取消消息
                            TransmitWindow.Visibility = Visibility.Hidden;
                        }
                    }
                }

                // 飞行计划发送成功
                if (_mode == 5 && wptId == "4294967295")
                {
                    // 发送命令在飞行日志中保存飞行计划
                    string text = @"<?xml version='1.0'?><root><message type='set' a='FlightPlan'><Data><GCS><WPP a='O'>" + DataConstellation.BindingData.FlightPlan + "</WPP></GCS></Data></message></root>" + "\0";
                    //string text = @"<?xml version='1.0' encoding='UTF-8'?><root><message type='set' a='FlightPlan'><Save><WPP a='O'>" + DataConstellation.BindingData.FlightPlan + "</WPP></Save></message></root>" + "\0";
                    Send(Client, text);
                    sendDone.WaitOne(); //等待发送

                    if (System.Windows.Forms.MessageBox.Show(message, Replymessage, MessageBoxButtons.OK, MessageBoxIcon.None) == System.Windows.Forms.DialogResult.OK)
                    {
                        TransmitWindow.Visibility = Visibility.Hidden;
                    }
                }
            }
            #endregion

            // 飞行日志回放时间
            if (DataConstellation.CommandMode == 2)
            {
                if (PlayFlag && (DataConstellation.BindingData.CurrentTime < 0.00001) && DataConstellation.BindingData.CurrentTime > -0.00001)
                {
                    PlayCount++;
                }
                else
                {
                    PlayCount = 0;
                }

                if (PlayCount > Constants._playCount)
                {
                    if (PlayFlag)
                    {
                        User2.Content = Constants._commandUser2_3;     //暂停
                    }
                    else
                    {
                        User2.Content = Constants._commandUser2_2;     //重新开始
                    }
                    PlayFlag = false;							//暂时停止模式
                }
            }

            lock (obj)
            {
                DataConstellation.strXmlData.Clear();
            }
        }
        #endregion

        #region MENU
        /// <summary>
        /// 菜单: "打开飞行计划。
        /// </summary>
        /// <remarks>
        /// 查看飞行计划文件对话框
        /// </remarks>
        private void MenuItem_Click_FplaOpen(object sender, RoutedEventArgs e)
        {
            MultiWaypointFile();	// 开放飞行计划对话框显示
        }
        /// <summary>
        /// MENU：从菜单中关闭程序
        /// </summary>
        /// <remarks>
        /// 对于提示的飞行计划关闭
        /// </remarks>
        /*		private void MenuItem_Click_FplaClose(object sender, RoutedEventArgs e)
                {
                    MultiWaypointClose();
                    MMWinfow.FlightPlanFilePath.Text = "";
                }*/

        /// <summary>
        /// MENU：飞行计划发送
        /// </summary>
        /// <remarks>
        ///显示当前飞行计划
        /// </remarks>
        /*    private void MenuItem_Click_FplaTrans(object sender, RoutedEventArgs e)
            {
                TransmitBar.Value = 0;
                TransmitWindow.Visibility = Visibility.Visible;
            }*/

        /*	private void MenuItem_Click_FplaData(object sender, RoutedEventArgs e)
            {
                MMWinfow.FlightPlanFilePath.Text = DataConstellation.BindingData.FlightPlanFilePath;
                MMWinfow.Background = this.Background;
                if (!MMWinfow.IsVisible) MMWinfow.Show();
                //_MWinfow.Close();
            }*/
        /// <summary>
        /// MENU：「保存]菜单
        /// </summary>
        /// <remarks>
        ///「保存」保存对话框
        /// </remarks>
        /*       private void MenuItem_Click_FlogSave(object sender, RoutedEventArgs e)
               {
                   SaveDocument();
               }*/
        // 「飞行日志」开放飞行日志的对话框
        /*     private void MenuItem_Click_FlogOpen(object sender, RoutedEventArgs e)
             {
                 OpenDocument();
             }*/
        /// <summary>
        /// MENU：「关闭飞行日志」飞行日志
        /// </summary>
        /// <remarks>
        ///关闭飞行日志
        /// </remarks>
        /*    private void MenuItem_Click_FlogClose(object sender, RoutedEventArgs e)
            {
                // 关闭消息
                string text = DataConstellation.CloseMassage(XmlMessage.Get_UAVData);
                Send(Client, text);
                sendDone.WaitOne();

                // 
                List<string> tag = new List<string>();
                List<string> value = new List<string>();
                tag.Add("FlightLog/Play/FilePath");
                value.Add(DataConstellation.BindingData.FlightLogFilePath);
                tag.Add("FlightLog/Play/FileMode");
                value.Add("CLOSE");
                text = DataConstellation.SetMassage(XmlMessage.Set_FlightLogOpenClose, tag, value);
                Send(Client, text); //发送
                sendDone.WaitOne(); //等待发送

                DataConstellation.ReplyMode = 3;
                WaitWindow.Visibility = Visibility.Visible;

                // 清除屏幕
                //DataConstellation.XMLClear();
                //MainDataUpdate();
                //DisconnectCount = -1;
                // 清除屏幕
                MainMonitorClear();

                PlayState = false;

                PosSpd.Width = 100;	//表示
                PosSet.Width = 100;	//表示

                //Dwindow.FlightLogFilePath.Text = "";
            }*/
        /// <summary>
        /// MENU：打开资源管理器菜单
        /// </summary>
        /// <remarks>
        ///打开目标文件夹的飞行日志
        /// </remarks>
        private void MenuItem_Click_OpenExplorer(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(DataConstellation.BindingData.FilePath))
            {
                System.Diagnostics.Process.Start(DataConstellation.BindingData.FilePath);
            }
            else
            {
                //获取初期消息
                string text = DataConstellation.CloseMassage(XmlMessage.Get_UAVData);
                Send(Client, text);
                sendDone.WaitOne();

                // 初始化com端口
                text = DataConstellation.ReadMassage(XmlMessage.Get_Initial);
                //Debug.WriteLine("COM Port： " + text + "\n");
                Send(Client, text);
                sendDone.WaitOne(); //发送等待

                while (!ReceiveDataUpdate()) ;

                SettingData.SerialPortSetting = "COM" + DataConstellation.GetMassage("Config/COM/Port", false);		//不删除所接收的数据
                DataConstellation.BindingData.FilePath = DataConstellation.GetMassage("Config/FlightLog/FilePath");

                text = DataConstellation.CloseMassage(XmlMessage.Get_Initial);
                Send(Client, text);
                sendDone.WaitOne();

                // 获取初期消息
                string data = DataConstellation.ReadMassage(XmlMessage.Get_UAVData);
                DataConstellation.XMLgetsize = data.ToList().Where(c => c.Equals('\n')).Count() + 1;
                Send(Client, data);
                sendDone.WaitOne();

                //string path = System.Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ACSL\X-Monitor\";
                //// 请检查目录是否存在
                if (System.IO.Directory.Exists(DataConstellation.BindingData.FilePath))
                {
                    System.Diagnostics.Process.Start(DataConstellation.BindingData.FilePath);
                }
                else
                {
                    System.Diagnostics.Process.Start(System.Windows.Forms.Application.StartupPath);
                }

            }

        }
        /// <summary>
        /// 菜单: 无人机详细信息菜单
        /// </summary>
        /// <remarks>
        ///查看无人机详细信息
        /// </remarks>
        /*	private void MenuItem_Click_UAVData(object sender, RoutedEventArgs e)
            {
                Dwindow.Background = this.Background;
                Dwindow.HealthDataSetting = DataConstellation.BindingData.Health;
                Dwindow.FlightLogFilePath.Text = DataConstellation.BindingData.FlightLogFilePath;
                Dwindow.Show();                             //控制主窗口
            }*/
        /// <summary>
        /// 菜单: 设置屏幕菜单
        /// </summary>
        /// <remarks>
        ///设置屏幕显示画面
        /// </remarks>
        private void MenuItem_Click_Setting(object sender, RoutedEventArgs e)
        {
            SettingWindow();
        }
        /// <summary>
        /// 菜单:"文件"菜单
        /// </summary>
        /// <remarks>
        // 用户手册
        /// </remarks>
        private void MenuItem_Click_Manual(object sender, RoutedEventArgs e)
        {
            //运行/启动其他程序
            Process.Start(System.IO.Path.GetFullPath(@"Info\X-Monitor取扱説明書.chm"));
        }
        /// <summary>
        /// 菜单: 关于屏幕菜单
        /// </summary>
        /// <remarks>
        /// 查看关于屏幕信息
        /// </remarks>
        private void MenuItem_Click_About(object sender, RoutedEventArgs e)
        {
            AboutWindow AWindow = new AboutWindow();
            AWindow.Background = this.Background;
            AWindow.XMonitorVersion = Properties.Settings.Default.XMonitorVersion;
            AWindow.APFCVersion_L = DataConstellation.BindingData.Health.FirmwareVersionL;
            AWindow.APFCVersion_H = DataConstellation.BindingData.Health.FirmwareVersionH;
            AWindow.Show();
        }
        /// <summary>
        /// 退出菜单
        /// </summary>
        /// <remarks>
        /// 退出地面站监控程序
        /// </remarks>
        private void MenuItem_Click_End(object sender, RoutedEventArgs e)
        {
            FinishMode = 0;
            Close();
        }
        /// <summary>
        /// 显示/隐藏菜单项的功能
        /// </summary>
        /// <remarks>
        /// 菜单项目视图/隐藏
        /// </remarks>
        /// <param name="no">菜单操作状态控制编号</param>
        private void MenuIsEnabled(int no)
        {
            switch (no)
            {
                case 0:
                    //基本状态 (断开连接)
                    PlayerSlide.Visibility = Visibility.Hidden;		//进度条
                    OpenFlightPlan.IsEnabled = true;				//打开飞行计划
                    //CloseFlightPlan.IsEnabled = true;				//关闭飞行计划
                    //SendFlightPlan.IsEnabled = true;				//发送飞行计划
                    //ListFlightPlan.IsEnabled = true;				//飞行计划信息
                    //OpenFlightLog.IsEnabled = true;					//打开飞行日志
                    //CloseFlightLog.IsEnabled = true;				//关闭飞行日志
                    //SaveFlightLog.IsEnabled = true;				//保存
                    break;
                case 1:
                    //飞行计划
                    PlayerSlide.Visibility = Visibility.Hidden;		//进度条
                    OpenFlightPlan.IsEnabled = false;				//打开飞行计划
                    //CloseFlightPlan.IsEnabled = true;				//关闭飞行计划
                    //SendFlightPlan.IsEnabled = true;				//发送飞行计划
                    //ListFlightPlan.IsEnabled = true;				//飞行计划信息
                    //OpenFlightLog.IsEnabled = false;				//打开飞行日志
                    //CloseFlightLog.IsEnabled = false;				//关闭飞行日志
                    //SaveFlightLog.IsEnabled = false;				//保存
                    break;
                case 2:
                    //飞行日志
                    PlayerSlide.Visibility = Visibility.Visible;	//进度条
                    OpenFlightPlan.IsEnabled = false;				//打开飞行计划
                    //CloseFlightPlan.IsEnabled = false;				//关闭飞行计划
                    //SendFlightPlan.IsEnabled = false;				//发送飞行计划
                    //ListFlightPlan.IsEnabled = false;				//飞行计划信息
                    //OpenFlightLog.IsEnabled = false;				//打开飞行日志
                    //CloseFlightLog.IsEnabled = true;				//关闭飞行日志
                    //SaveFlightLog.IsEnabled = true;					//保存
                    break;
                case 3:
                    //飞行计划
                    PlayerSlide.Visibility = Visibility.Visible;	//进度条
                    OpenFlightPlan.IsEnabled = false;				//打开飞行计划
                    //CloseFlightPlan.IsEnabled = false;				//关闭飞行计划
                    //SendFlightPlan.IsEnabled = false;				//发送飞行计划
                    //ListFlightPlan.IsEnabled = true;				//飞行计划信息
                    //OpenFlightLog.IsEnabled = false;				//打开飞行日志
                    //CloseFlightLog.IsEnabled = false;				//关闭飞行日志
                    //SaveFlightLog.IsEnabled = false;				//保存
                    break;
            }

        }

        #endregion

        #region 对话框
        /// <summary>
        /// 文件关联对话框
        /// </summary>
        /// <remarks>
        /// 飞行计划文件打开对话框
        /// </remarks>
        private void MultiWaypointFile()
        {
            try
            {
                if (Constants.Style_Change_HangPaiAndZhiBao_Flag == 0)
                {
                    /////////////////先全部清除/////////////////////////////////////////////////////
                    String str_file = "";
                    String str_radius = "";
                    int k = 0;
                    int All_Line_Count = 0;
                    Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();
                    // Configure open file dialog box
                    //dlg.InitialDirectory = System.IO.Path.GetFullPath(@"Xml/MissionPlanner/");
                    dlg.FileName = "MultiWaypoint";			// Default file name
                    dlg.DefaultExt = ".txt";				// Default file extension
                    dlg.Filter = "MultiWaypoint|*.txt";		// Filter files by extension
                    dlg.InitialDirectory = "C:\\AutoWing\\";
                    // Open the dialog box modally
                    Nullable<bool> result = dlg.ShowDialog();
                    // Process open file dialog box results
                    if (result == true)
                    {
                        string filename = dlg.FileName;
                        StreamReader sr = File.OpenText(filename);//打开txt文件
                        while (sr.Peek() != -1)
                        {
                            sr.ReadLine();
                            All_Line_Count++;
                        }
                        sr.Close();
                        sr = File.OpenText(filename);//打开txt文件
                        while (sr.Peek() != -1)
                        {
                            if (k == 0)//判断文件格式是否正确
                            {
                                str_file = sr.ReadLine();
                                if (str_file != "The File Of Waypoints")
                                {
                                    System.Windows.MessageBox.Show("The Open File Format Is Wrong");
                                    sr.Close();
                                    return;
                                }
                                AutoWing_MissionDel_X(0);//这边是区域marker基准点
                                AutoWingMarkerMessionAdd_X();//这边是区域marker基准点

                                Distance_MissionDel_X(0);//这边是区域marker基准点
                                DistanceMarkerMessionAdd_X();//这边是区域marker基准点

                                MissionDel_X(BaseSelect);

                                PointCount = 0;
                                MainMonitorClear();
                                DrawTrack_Count = 0;
                                MissionAndBaseMarkerAdd_X();//base追加
                            }
                            else if (k == 1)//保存半径大小
                            {
                                str_radius = sr.ReadLine();
                                int Value = Convert.ToInt16(str_radius);
                                if (Value > 0)
                                {
                                    if (Value == 3)
                                    {
                                        Show_Index.SelectedIndex = 0;
                                    }
                                    if (Value == 4)
                                    {
                                        Show_Index.SelectedIndex = 1;
                                    }
                                    if (Value == 5)
                                    {
                                        Show_Index.SelectedIndex = 2;
                                    }
                                    if (Value == 6)
                                    {
                                        Show_Index.SelectedIndex = 3;
                                    }
                                    if (Value == 7)
                                    {
                                        Show_Index.SelectedIndex = 4;
                                    }
                                    if (Value == 8)
                                    {
                                        Show_Index.SelectedIndex = 5;
                                    }
                                }
                            }
                            else if (k <= ((All_Line_Count - 4) / 2))
                            {
                                PointLatLng Waypoint_Name = new PointLatLng();
                                Waypoint_Name.Lng = Convert.ToDouble(sr.ReadLine());//获取保存的经度点
                                Waypoint_Name.Lat = Convert.ToDouble(sr.ReadLine());//获取保存的纬度点
                                ////////////////////////////增加手动点击的marker////////////////////////////////////////////
                                WaypointAndPathAdd2_X(Waypoint_Name, 0);
                                Autowing_WaypointAndPathAdd2_X(Waypoint_Name, 0);		// Waypoint追加
                                if (ProjectList_Marker[0].WaypointData.Count > 2)
                                {
                                    Make_MultiPenSa_Plan();
                                }
                                ////////////////////////////增加距离的marker//////////////////////////////////////////////////
                                if (ProjectList_Marker[0].WaypointData.Count > 1)
                                {
                                    Distance_WaypointAndPathAdd_X();		// Waypoint追加
                                }
                                Lock_Marker_Flag = true;
                            }
                            else
                            {
                                Constants.Used_Obstacle_Lng = Convert.ToDouble(sr.ReadLine());//获取保存的经度点
                                Constants.Used_Obstacle_Lat = Convert.ToDouble(sr.ReadLine());//获取保存的纬度点
                                Constants.Used_Obstacle_Radius = Convert.ToDouble(sr.ReadLine());
                                Constants.Retracted_Dis = Convert.ToDouble(sr.ReadLine());
                            }
                            k++;
                        }

                        if (ProjectList_Marker[0].WaypointData.Count > 2)
                        {
                            Make_MultiPenSa_Plan();
                            Obstacle_MissionDel_X(0);//这边是障碍点基准点
                            ObstacleMarkerMessionAdd_X();//这边是障碍点基准点
                            if (Constants.Used_Obstacle_Lat > 0)
                            {
                                Obstacle_WaypointAndPathAdd_X2(Constants.Used_Obstacle_Lat, Constants.Used_Obstacle_Lng, 0);
                            }
                        }
                        else
                        {
                            Obstacle_MissionDel_X(0);//这边是障碍点基准点
                            ObstacleMarkerMessionAdd_X();//这边是障碍点基准点
                            if (Constants.Used_Obstacle_Lat > 0)
                            {
                                Obstacle_WaypointAndPathAdd_X2(Constants.Used_Obstacle_Lat, Constants.Used_Obstacle_Lng, 0);
                            }
                        }
                        PointLatLng SetFirst_Position = new PointLatLng();
                        SetFirst_Position.Lat = ProjectList_Marker[0].WaypointData[0].Latitude;
                        SetFirst_Position.Lng = ProjectList_Marker[0].WaypointData[0].Longitude;
                        MainMap.Position = SetFirst_Position;
                    }
                }
                else
                {
                    WayPoint_NumS = 0;
                    int All_Line_Count = 0;
                    int k = 0;
                    String str_file = "";
                    /////////////////先全部清除/////////////////////////////////////////////////////
                    MissionDel_X(BaseSelect);
                    PointCount = 0;
                    MainMonitorClear();
                    DrawTrack_Count = 0;
                    Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();
                    dlg.FileName = "MultiWaypoint";			// Default file name
                    dlg.DefaultExt = ".txt";				// Default file extension
                    dlg.Filter = "MultiWaypoint|*.txt";		// Filter files by extension
                    dlg.InitialDirectory = "C:\\AutoWing\\";
                    Nullable<bool> result = dlg.ShowDialog();
                    PointLatLng Waypoint_Name = new PointLatLng();
                    if (result == true)
                    {
                        string filename = dlg.FileName;
                        StreamReader sr = File.OpenText(filename);//打开txt文件
                        while (sr.Peek() != -1)
                        {
                            sr.ReadLine();
                            All_Line_Count++;
                        }
                        sr.Close();
                        sr = File.OpenText(filename);//打开txt文件
                        while (sr.Peek() != -1)
                        {
                            if (k == 0)//判断文件格式是否正确
                            {
                                str_file = sr.ReadLine();
                                if (str_file != "The File Of Aerial")
                                {
                                    System.Windows.MessageBox.Show("The Open File Format Is Wrong");
                                    sr.Close();
                                    return;
                                }
                                MissionAndBaseMarkerAdd_X();//base追加
                            }
                            else
                            {
                                Waypoint_Name.Lng = Convert.ToDouble(sr.ReadLine());//获取保存的纬度点
                                Waypoint_Name.Lat = Convert.ToDouble(sr.ReadLine());//获取保存的经度点
                                WaypointAndPathMakeAdd_X(Waypoint_Name, 0);
                                WayPoint_SetIndex[k - 1] = (int)Convert.ToDouble(sr.ReadLine());
                                WayPoint_KeepIndex1[k - 1] = (int)Convert.ToDouble(sr.ReadLine());
                                WayPoint_Height[k - 1] = Convert.ToDouble(sr.ReadLine());
                                WayPoint_Yaw[k - 1] = Convert.ToDouble(sr.ReadLine());
                                WayPoint_HengxiangSudu[k - 1] = Convert.ToDouble(sr.ReadLine());
                                WayPoint_ZongshangSudu[k - 1] = Convert.ToDouble(sr.ReadLine());
                                WayPoint_ZongxiaSudu[k - 1] = Convert.ToDouble(sr.ReadLine());
                                WayPoint_HoverTimer[k - 1] = Convert.ToDouble(sr.ReadLine());
                                WayPoint_KeepIndex2[k - 1] = Convert.ToDouble(sr.ReadLine());
                                WayPoint_NumS++;
                            }
                            k++;
                        }
                        PointLatLng SetFirst_Position = new PointLatLng();
                        SetFirst_Position.Lat = Waypoint_Name.Lat - 0.0002;
                        SetFirst_Position.Lng = Waypoint_Name.Lng;
                        MainMap.Position = SetFirst_Position;
                        Lock_Marker_Flag = true;
                    }


                }

            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show("(401) MultiWaypoint FileOpen Error: " + ex.Message);
                _logger.Error("(401) MultiWaypoint FileOpen Error: " + ex.Message);
            }

            DrawTrack_Count = 0;
            Home_flag = 0;
            MainMonitorClear();
            Start_DrawRoute_Flag = 1;
        }
        private void MultiWaypointClose()
        {
            if (SettingData.ModeSetting == "Multiple Waypoints")//
            {
                if (!ResultUpdate)
                {
                    TransmitWindow.Visibility = Visibility.Hidden;
                    TransmitCancel();
                    var clear = MainMap.Markers.Where(p => p != null && p != UAVMarker && p != UAVRoute && p != WaypointMarker && p != NWaypointMarker && p != HomeMarker && p != SubMarker);
                    if (clear != null)
                    {
                        for (int i = 0; i < clear.Count(); i++)
                        {
                            MainMap.Markers.Remove(clear.ElementAt(i));
                            i--;
                        }
                    }
                    SettingData.ModeSetting = "Autonomous Navigation";
                    CommandButtonNameChange(DataConstellation.CommandMode = 1);	//命令开关
                    MenuIsEnabled(0);											//菜单显示/不显示开关
                    MMWinfow.WaypointNumber = 0;
                    MMWinfow.WaypointListView.Items.Clear();
                    MMWinfow.Close();
                }
                else
                {
                    if (DataConstellation.BindingData.nDriveMode != 0)
                    {
                        System.Windows.MessageBox.Show("Can Not Close The Waypoint File");
                    }
                    else
                    {
                        TransmitWindow.Visibility = Visibility.Hidden;
                        TransmitCancel();
                        var clear = MainMap.Markers.Where(p => p != null && p != UAVMarker && p != UAVRoute && p != WaypointMarker && p != NWaypointMarker && p != HomeMarker && p != SubMarker);
                        if (clear != null)
                        {
                            for (int i = 0; i < clear.Count(); i++)
                            {
                                MainMap.Markers.Remove(clear.ElementAt(i));
                                i--;
                            }
                        }
                        SettingData.ModeSetting = "Autonomous Navigation";//
                        CommandButtonNameChange(DataConstellation.CommandMode = 1);	//命令开关
                        MenuIsEnabled(0);											//菜单显示/不显示开关

                        //计划的飞行结束消息
                        string _message = "";
                        //while (true)
                        for (int i = 0; i < 30; i++)
                        {
                            _message =
            @"<?xml version=""1.0"" encoding=""utf-8""?>
<root>
  <message type=""mainlink send"">
    <Data>
      <UAV>
        <MltWptE>
          <SendFlag t=""B"">T</SendFlag>
        </MltWptE>
      </UAV>
    </Data>
  </message>
</root>" + "\0";
                            Send(Client, _message);
                            sendDone.WaitOne();
                            if (DataConstellation.BindingData.nFlightMode != 2)
                            {
                                break;
                            }
                            Thread.Sleep(100);
                        }

                        _message =
            @"<?xml version=""1.0"" encoding=""utf-8""?>
<root>
  <message type=""mainlink send"">
    <Data>
      <UAV>
        <MltWptE>
          <SendFlag t=""B"">F</SendFlag>
        </MltWptE>
      </UAV>
    </Data>
  </message>
</root>" + "\0";

                        Send(Client, _message);
                        sendDone.WaitOne();
                    }
                }
            }
        }
        /// <summary>
        /// 文件关联对话框
        /// </summary>
        /// <remarks>
        ///飞行日志文件打开对话框
        /// </remarks>
        void OpenDocument()
        {
            try
            {
                // Instantiate the dialog box
                Microsoft.Win32.OpenFileDialog dlg = new Microsoft.Win32.OpenFileDialog();

                if (!string.IsNullOrEmpty(DataConstellation.BindingData.FilePath))
                {
                    dlg.InitialDirectory = DataConstellation.BindingData.FilePath.Replace("/", "\\");
                }
                else
                {
                    // 初始获取的消息
                    string text = DataConstellation.CloseMassage(XmlMessage.Get_UAVData);
                    Send(Client, text);
                    sendDone.WaitOne();

                    // 初始的com端口
                    text = DataConstellation.ReadMassage(XmlMessage.Get_Initial);
                    //Debug.WriteLine("COM Port： " + text + "\n");
                    Send(Client, text);
                    sendDone.WaitOne(); //等待发送

                    while (!ReceiveDataUpdate()) ;

                    SettingData.SerialPortSetting = "COM" + DataConstellation.GetMassage("Config/COM/Port", false);		//不删除所接收的数据
                    DataConstellation.BindingData.FilePath = DataConstellation.GetMassage("Config/FlightLog/FilePath");

                    text = DataConstellation.CloseMassage(XmlMessage.Get_Initial);
                    Send(Client, text);
                    sendDone.WaitOne();

                    // 初始获取的消息
                    string data = DataConstellation.ReadMassage(XmlMessage.Get_UAVData);
                    DataConstellation.XMLgetsize = data.ToList().Where(c => c.Equals('\n')).Count() + 1;
                    Send(Client, data);
                    sendDone.WaitOne();

                    if (!System.IO.Directory.Exists(DataConstellation.BindingData.FilePath))
                    {
                        dlg.InitialDirectory = DataConstellation.BindingData.FilePath.Replace("/", "\\");
                    }
                    else
                    {
                        dlg.InitialDirectory = System.Windows.Forms.Application.StartupPath;
                    }

                }
                Debug.WriteLine("FilePath:" + dlg.InitialDirectory);
                Debug.WriteLine("FilePath:" + System.Windows.Forms.Application.StartupPath);

                // Configure open file dialog box
                dlg.FileName = "FlightLog" + DateTime.Now.Year.ToString("0000")
                                            + DateTime.Now.Month.ToString("00")
                                            + DateTime.Now.Day.ToString("00"); // Default file name
                dlg.DefaultExt = ".kml";					// Default file extension
                dlg.Filter = "KMLファイル|*.kml|KMZファイル|*.kmz";		// 按照扩展名筛选文件

                // Open the dialog box modally
                Nullable<bool> result = dlg.ShowDialog();

                // Process open file dialog box results
                if (result == true)
                {
                    _logger.Info("OpenDocument:" + dlg.FileName);
                    // Open document
                    DataConstellation.BindingData.FlightLogFilePath = dlg.FileName.Replace("\\", "/");

                    // 发送一个飞行日志路径的核心
                    List<string> tag = new List<string>();
                    List<string> value = new List<string>();

                    tag.Add("FlightLog/Play/FilePath");
                    value.Add(DataConstellation.BindingData.FlightLogFilePath);
                    tag.Add("FlightLog/Play/FileMode");
                    value.Add("OPEN");

                    string text = DataConstellation.SetMassage(XmlMessage.Set_FlightLogOpenClose, tag, value);
                    Send(Client, text); //发送
                    sendDone.WaitOne(); //等待发送

                    Debug.WriteLine("FlightLogOpen:\n" + text);
                    DataConstellation.ReplyMode = 2;
                    WaitWindow.Visibility = Visibility.Visible;

                    // 关闭消息
                    text = DataConstellation.CloseMassage(XmlMessage.Get_UAVData);
                    Send(Client, text);
                    sendDone.WaitOne();

                    MarkerClear(WaypointMarker);

                    PlayState = true;
                    PosSpd.Width = 0;	//非表示
                    PosSet.Width = 0;
                }
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show("(402) FlightLog FileOpen Error: " + ex.Message);
                _logger.Error("(402) FlightLog FileOpen Error: " + ex.Message);
            }

        }
        /// <summary>
        ///文件关联对话框
        /// </summary>
        /// <remarks>
        /// 剪切 保存对话框
        /// </remarks>
        void SaveDocument()
        {
            try
            {
                // Configure save file dialog
                Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog();
                dlg.FileName = "FlightLogEdit_" + DateTime.Now.Year.ToString("0000")
                                                + DateTime.Now.Month.ToString("00")
                                                + DateTime.Now.Day.ToString("00")
                                                + "_" + DateTime.Now.Hour.ToString("00")
                                                + DateTime.Now.Minute.ToString("00"); // Default file name
                dlg.DefaultExt = ".kml";					// Default file extension
                dlg.Filter = "KMLファイル|*.kml|KMZファイル|*.kmz";	// 按照扩展名筛选文件

                // Show save file dialog
                Nullable<bool> result = dlg.ShowDialog();

                // Process save file dialog results
                if (result == true)
                {
                    _logger.Info("SaveDocument:" + dlg.FileName);
                    // Save document
                    DataConstellation.BindingData.FlightLogFileSavePath = dlg.FileName.Replace("\\", "/");

                    // 发送保存剪切的核心
                    List<string> tag = new List<string>();
                    List<string> value = new List<string>();
                    tag.Add("FlightLog/Play/Edit/SaveFilePath");
                    value.Add(DataConstellation.BindingData.FlightLogFileSavePath);
                    tag.Add("FlightLog/Play/Edit/StartTime");
                    value.Add(PlayerSlide.LowerValue.ToString());
                    tag.Add("FlightLog/Play/Edit/EndTime");
                    value.Add(PlayerSlide.HigherValue.ToString());

                    string text = DataConstellation.SetMassage(XmlMessage.Set_FlightLogEdit, tag, value);
                    Send(Client, text); //发送
                    sendDone.WaitOne(); //发送等待

                    DataConstellation.ReplyMode = 4;
                    WaitWindow.Visibility = Visibility.Visible;
                }
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show("(403) FlightLog Edit Error : " + ex.Message);
                _logger.Error("(403) FlightLog Edit Error : " + ex.Message);
            }

        }
        #endregion

        #region 功能
        /// <summary>
        /// 窗口按钮
        /// </summary>
        /// /// <remarks>
        /// 主屏幕结束按钮
        /// </remarks>
        /// 关闭监视器按钮 X
        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            _logger.Info("CloseButton_Click");
            this.Save_Data();
            FinishMode = 0;
            Close();
        }
        //private void Button_Show_Set(object sender, RoutedEventArgs e)
        //{
        //    ShowPanel.Width = 0;
        //    showtitle.Visibility = System.Windows.Visibility.Collapsed;
        //    jizhunset.Visibility = Visibility;
        //    ludianshanchu.Visibility = Visibility;
        //    dandianshanchu.Visibility = Visibility;
        //    ludianxiugai.Visibility = Visibility;
        //    fanganshengcheng.Visibility = Visibility;
        //    fanganbaocun.Visibility = Visibility;
        //    pesabanjingtitle.Visibility = Visibility;
        //    Show_Index.Visibility = Visibility;
        //    hidetitle.Visibility = Visibility;
        //}
        //private void Button_Hide_Set(object sender, RoutedEventArgs e)
        //{
        //    ShowPanel.Width = 50;
        //    hidetitle.Visibility = System.Windows.Visibility.Collapsed;
        //    jizhunset.Visibility = System.Windows.Visibility.Collapsed; ;
        //    ludianshanchu.Visibility = System.Windows.Visibility.Collapsed; ;
        //    dandianshanchu.Visibility = System.Windows.Visibility.Collapsed; ;
        //    ludianxiugai.Visibility = System.Windows.Visibility.Collapsed; ;
        //    fanganshengcheng.Visibility = System.Windows.Visibility.Collapsed; ;
        //    fanganbaocun.Visibility = System.Windows.Visibility.Collapsed; ;
        //    pesabanjingtitle.Visibility = System.Windows.Visibility.Collapsed; ;
        //    Show_Index.Visibility = System.Windows.Visibility.Collapsed; ;
        //    showtitle.Visibility = Visibility;
        //}
        /// <summary>
        /// 窗口按钮
        /// </summary>
        /// <remarks>
        /// 主屏幕最大化按钮
        /// </remarks>
        private void MaxWindowButton_Click(object sender, RoutedEventArgs e)
        {
            _logger.Info("MaxWindowButton_Click");
            this.WindowState = WindowState.Maximized;
        }
        /// <summary>
        /// 窗口按钮
        /// </summary>
        /// <remarks>
        /// 主屏幕最小化按钮
        /// </remarks>
        private void MinWindowButton_Click(object sender, RoutedEventArgs e)
        {
            _logger.Info("MinWindowButton_Click");
            this.WindowState = WindowState.Minimized;
        }
        /// <summary>
        /// 窗口按钮
        /// </summary>
        /// <remarks>
        /// 恢复主屏幕原始尺寸
        /// </remarks>
        private void DefaultWindowButton_Click(object sender, RoutedEventArgs e)
        {
            _logger.Info("DefaultWindowButton_Click");
            this.WindowState = WindowState.Normal;
        }

        /// <summary>
        /// 地图缩放事件
        /// </summary>
        /// <remarks>
        /// 网格上的地图和相应距离显示
        /// 比例显示
        /// </remarks>
        private void MapZoomChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            try
            {
                _logger.Info("MapZoomChanged");
                GPoint p = MainMap.FromLatLngToLocal(MainMap.Position);
                PointLatLng Point = MainMap.FromLocalToLatLng((int)p.X + GRID_SIZE, (int)p.Y);
                double dis = Math.Round(MainMap.MapProvider.Projection.GetDistance(MainMap.Position, Point), 4, MidpointRounding.AwayFromZero);

                if (dis < 1)
                {
                    dis *= 1000;// km -> m
                    DisName.Content = dis.ToString() + " m";
                }
                else
                {
                    DisName.Content = dis.ToString() + "km";
                }
                Debug.WriteLine("Dis: " + dis.ToString());
            }
            catch (Exception ex)
            {
                _logger.Error("MapZoomChanged:" + ex.Message);
            }
        }

        #endregion
        //数据的更新是从XML中拿到的数据 返回一个bool型变量
        #region 数据更新
        private bool MainDataUpdate()
        {
            try
            {
                // XML数据转换  c:确认结果内容
                if (Dwindow.IsEnabled)
                {
                    Dwindow.Message = DataConstellation.xmlUAVData;
                }
                int _getMode = 0;
                if (Properties.Settings.Default.Function1.IndexOf("SubMarker.GPS") != -1)
                {
                    _getMode = 1;
                }
                //如果读消息中获取的UAV数据采集列表有变化，添加在这里。意思是在这里添加每个数据到相应的变量	
                //返回一个数据接受是否正常的标志
                int c = DataConstellation.XmlConvert(_getMode);

                if (c == -1)
                {
                    return false;
                }

                // TEST用
                //DataConstellation.BindingData.Health.MainLink_UavToGcs = 15;

                // ================================================================================
                //　当前
                #region 当前位置
                UAVMarker.Position = new PointLatLng(DataConstellation.BindingData.UAVpoint.Lat - Properties.Settings.Default.LatSub, DataConstellation.BindingData.UAVpoint.Lon - Properties.Settings.Default.LngSub);
                UAVMarker.Altitude = Altitude.UavAlt = DataConstellation.BindingData.UAVpoint.Alt;
                UAVMarker.Azimuth = DataConstellation.BindingData.UAVpoint.Yaw;
                UAVMarker.SubPosition = new PointLatLng(DataConstellation.BindingData.Homepoint.Lat - Properties.Settings.Default.LatSub, DataConstellation.BindingData.Homepoint.Lon - Properties.Settings.Default.LngSub);

                // ================================================================================
                // 主屏幕显示 HealthData
                #region 主屏幕显示 HealthData
                BatteryName.BatteryValue = DataConstellation.BindingData.BatteryVoltage;
                GPSName.GPSValue = DataConstellation.BindingData.nSat;
                LinkName.LinkValue = (DataConstellation.BindingData.Health.MainLink_UavToGcs * 100 / 15);
                LinkName.ValueAlert = DataConstellation.BindingData.Health.AlertLinkValue;
                //TODO:Connected/Disconnected添加标签
                RCrecName.RCrecValue = (DataConstellation.BindingData.Health.LLMCU_RcReceiverReception * 100 / 15);
                RCrecName.ValueAlert = DataConstellation.BindingData.Health.AlertRCrecValue;
                SpeedName.Speed = DataConstellation.BindingData.UAVpoint.Speed;

                // =====================================
                // 重置控制模式中的目标值
                if (ControlModeName.Text != DataConstellation.BindingData.nControlModeName)
                {
                    if (DataConstellation.BindingData.nControlMode != 4)	//　自主导航和命令飞行时间
                    {
                        MarkerClear(WaypointMarker);
                        MarkerClear(NWaypointMarker);
                    }
                    if (DataConstellation.BindingData.nReset)
                    {
                        WaypointMarker.Altitude = UAVMarker.Altitude;		// 当前UAV高度->目标高度
                        Altitude.WaypointAlt = UAVMarker.Altitude;
                        WaypointMarker.Azimuth = UAVMarker.Azimuth;			// 当前UAV方位->目标方位
                        GPoint point = MainMap.FromLatLngToLocal(UAVMarker.Position);//当前UAV位置->目标值位置
                        WaypointSet(new System.Windows.Point(point.X, point.Y), 1, 0);
                        Altitude.WaypointAlt = UAVMarker.Altitude;			//重新输入(高度栏作为限制)
                        WaypointMarker.Azimuth = UAVMarker.Azimuth;			//重新输入(用于调整)
                        #region UAV设定Waypoint
                        NWaypointMarker = new GMapMarker(new PointLatLng());
                        {
                            //NWaypointMarker.Altitude = Altitude.WaypointAlt;
                            //NWaypointMarker.Speed = Properties.Settings.Default.Waypoint_Speed;
                            NWaypointMarker.Shape = new CustomMarker(NWaypointMarker, "Destination", "Resources/NWaypoint.png");
                            NWaypointMarker.Offset = new System.Windows.Point(-15, -25);
                            NWaypointMarker.ZIndex = int.MaxValue - 1;
                            MainMap.Markers.Add(NWaypointMarker);
                        }
                        #endregion
                    }
                    Altitude.ControlMode = DataConstellation.BindingData.nControlMode;
                }
                //飞行模式切换
                if (FlightModeName.Text != DataConstellation.BindingData.nFlightModeName)
                {
                    if (DataConstellation.BindingData.nFlightMode != 1)	//　飞行时切换模式
                    {
                        MarkerClear(WaypointMarker);
                    }

                    // 计划飞行→home
                    if (SettingData.ModeSetting == "マルチウェイポイント" && DataConstellation.BindingData.nFlightMode == 3)//多路点
                    {
                        //　1.2.1以降に修正後実装
                        //if (MMWinfow.IsEnabled && NWaypointMarker.ID > 0)
                        //{
                        //	MMWinfow.WaypointNumber = int.MinValue;
                        //}
                        Altitude.WaypointAlt = NWaypointMarker.Altitude;
                    }

                    Altitude.FlightMode = DataConstellation.BindingData.nFlightMode;
                }
                ControlModeName.Text = DataConstellation.BindingData.nControlModeName;
                FlightModeName.Text = DataConstellation.BindingData.nFlightModeName;

                TimerName.Mode = DataConstellation.BindingData.nControlMode;


                #endregion

                // ================================================================================
                // 无人机轨迹显示
                if (SettingData.TrajectoryFlag && (SettingData.TrajectoryLength > 0))
                {
                    if (UAVMarker.Position.Lat != 0 && UAVMarker.Position.Lng != 0)
                    {
                        if (UAVRoute.Points.Count < 1)
                        {
                            UAVRoute.Points.Add(UAVMarker.Position);
                            UAVRoute.RegenerateShape(MainMap);
                        }
                        else
                        {
                            // 轨迹显示
                            while (UAVRoute.Points.Count > (SettingData.TrajectoryLength * 60 * 10))
                            {
                                UAVRoute.Points.RemoveAt(0);
                            }
                            UAVRoute.Points.Add(UAVMarker.Position);
                            UAVRoute.RegenerateShape(MainMap);
                        }
                    }
                }
                else
                {
                    if (UAVRoute.Points.Count > 1)
                    {
                        UAVRoute.Points.Clear();
                        UAVRoute.RegenerateShape(MainMap);
                    }
                }
                #endregion

                #region Home/Waypoint
                // 注: 由于模式的改变，必须改变
                // GPS 辅助或自主导航
                //if (DataConstellation.BindingData.nControlMode == 3 || DataConstellation.BindingData.nControlMode == 4)
                if (ConnectCount != 0)
                {
                    // ================================================================================
                    //　Waypoint设定
                    NWaypointMarker.Position = new PointLatLng(DataConstellation.BindingData.NWaypoint.Lat - Properties.Settings.Default.LatSub, DataConstellation.BindingData.NWaypoint.Lon - Properties.Settings.Default.LngSub);
                    NWaypointMarker.Azimuth = DataConstellation.BindingData.NWaypoint.Yaw;
                    NWaypointMarker.Altitude = DataConstellation.BindingData.NWaypoint.Alt;
                    NWaypointMarker.Speed = DataConstellation.BindingData.NWaypoint.Speed;
                    NWaypointMarker.ID = DataConstellation.BindingData.NWaypoint.No;

                    // ================================================================================
                    //　Home位置
                    HomeMarker.Position = new PointLatLng(DataConstellation.BindingData.Homepoint.Lat - Properties.Settings.Default.LatSub, DataConstellation.BindingData.Homepoint.Lon - Properties.Settings.Default.LngSub);
                    HomeMarker.Altitude = DataConstellation.BindingData.Homepoint.Alt;
                    HomeMarker.Azimuth = DataConstellation.BindingData.Homepoint.Yaw;
                    Altitude.HomeAlt = DataConstellation.BindingData.Homepoint.Alt;
                }
                else
                {
                    NWaypointMarker.Position = new PointLatLng();
                    NWaypointMarker.Azimuth = 0;
                    NWaypointMarker.Altitude = 0;
                    NWaypointMarker.Speed = 0;
                    NWaypointMarker.ID = 0;

                    HomeMarker.Position = new PointLatLng();
                    HomeMarker.Altitude = 0;
                    HomeMarker.Azimuth = 0;
                    Altitude.HomeAlt = 0;
                }

                #endregion

                // ================================================================================
                // 更新界面显示提醒
                if (Dwindow.IsEnabled)
                {
                    HealthDataUpdate();
                }
                if (SettingData.ModeSetting == "マルチウェイポイント")//多路点
                {
                    // 計画飛行→ゴーホーム(1.2.1以降で修正後、実装)
                    //if (MMWinfow.IsEnabled && NWaypointMarker.ID > 0)
                    //{
                    //	if (DataConstellation.BindingData.nFlightMode == 2)
                    //	{
                    //		MMWinfow.WaypointNumber = NWaypointMarker.ID;
                    //	}
                    //	else if (DataConstellation.BindingData.nFlightMode == 3)
                    //	{
                    //		MMWinfow.WaypointNumber = int.MinValue;
                    //	}
                    //}
                    Altitude.WaypointAlt = NWaypointMarker.Altitude;
                }

                // ================================================================================
                // SubMarker
                if (_getMode == 1)
                {
                    SubMarker.Position = new PointLatLng(DataConstellation.BindingData.SubPoint.Lat, DataConstellation.BindingData.SubPoint.Lon);
                    SubMarker.Azimuth = DataConstellation.BindingData.SubPoint.Yaw;
                    SubMarker.Altitude = DataConstellation.BindingData.SubPoint.Alt;
                    SubMarker.Speed = DataConstellation.BindingData.SubPoint.Speed;

                    //MainMap.Markers.Add(SubMarker);
                    #region 轨迹
                    if (SettingData.TrajectoryFlag && (SettingData.TrajectoryLength > 0))
                    {
                        if (SubMarker.Position.Lat != 0 && SubMarker.Position.Lng != 0)
                        {
                            if (SubRoute.Points.Count < 1)
                            {
                                SubRoute.Points.Add(SubMarker.Position);
                                SubRoute.RegenerateShape(MainMap);
                            }
                            else
                            {
                                // 路径显示
                                while (SubRoute.Points.Count > (SettingData.TrajectoryLength * 60 * 10))
                                {
                                    SubRoute.Points.RemoveAt(0);
                                }
                                SubRoute.Points.Add(SubMarker.Position);
                                SubRoute.RegenerateShape(MainMap);
                            }
                        }
                    }
                    else
                    {
                        if (SubRoute.Points.Count > 1)
                        {
                            SubRoute.Points.Clear();
                            SubRoute.RegenerateShape(MainMap);
                        }
                    }
                    #endregion
                }

                // ================================================================================
                // 飞行日志回放时间
                #region FlightLog Play
                if (DataConstellation.CommandMode == 2)
                {
                    // 滑块处理
                    if (PlayerSlide.PlaySlider == false)
                    {
                        PlayerSlide.PlayValue = DataConstellation.BindingData.CurrentTime;

                        #region 飞行日志回放（最大値停止）
                        if (DataConstellation.BindingData.CurrentTime >= (PlayerSlide.Maximum - 0.5) && (DataConstellation.BindingData.CurrentTime < PlayerSlide.Maximum))
                        {
                            PlayFlag = false;
                            string text = CommandPlayPause();
                            User2.Content = Constants._commandUser2_2;     //重新开始

                            Send(Client, text); //发送
                            sendDone.WaitOne(); //发送等待

                            text = DataConstellation.SetMassage(XmlMessage.Set_FlightLogSlidebar,
                                                                        new List<string> { "FlightLog/Play/CurrentTime" },
                                                                        new List<string> { PlayerSlide.Maximum.ToString() });
                            Send(Client, text); //发送
                            sendDone.WaitOne(); //发送等待

                            PlayerSlide.Value = PlayerSlide.Maximum;
                        }
                        #endregion
                    }
                    else
                    {
                        // 发送命令 在行动前停止并且维持现状
                        // PlayPause 消息发送
                        Thread.Sleep(1);
                        Send(Client, CommandPlayPause());	//发送
                        sendDone.WaitOne();					//发送等待
                        PlayerSlide.PlaySlider = false;		//
                    }
                }
                #endregion

                //飞行指令完成确认
                ComandTransmitCheck();

                return true;
            }
            catch (Exception ex)
            {
                //System.Windows.MessageBox.Show("(501) MainData Update Error: " + ex.Message);
                _logger.Error("(501) MainData Update Error: " + ex.Message);
                return false;
            }
        }
        /// <summary>
        /// 临时做的界面更新
        /// </summary>
        private void MainDataFrameUpdate()
        {
            // 主屏幕显示 HealthData
            
            #region 主屏幕显示 HealthData
            
            DataConstellation.BindingData.BatteryVoltage = AllAerocraftData.AutoWingVoltValue;
            DataConstellation.BindingData.nSat = AllAerocraftData.AutoWingStarNum;
            DataConstellation.BindingData.Health.MainLink_UavToGcs = Convert.ToInt32(Xbee_Health.GetReplyRate() * 100.0);
            //     DataConstellation.BindingData.Health.AlertLinkValue=30;
            DataConstellation.BindingData.Health.LLMCU_RcReceiverReception = 100;
            DataConstellation.BindingData.Health.AlertRCrecValue = 100;
            //         DataConstellation.BindingData.UAVpoint.Speed=100.0;
            BatteryName.BatteryValue = AllAerocraftData.AutoWingVoltValue;
            GPSName.GPSValue = AllAerocraftData.AutoWingStarNum;
            LinkName.LinkValue = Convert.ToInt32(Xbee_Health.GetReplyRate() * 100.0);
            //        LinkName.ValueAlert = 20.0;
            RCrecName.RCrecValue = 100.0;
            RCrecName.ValueAlert = 100.0;
            if (AllAerocraftData.AutoWingFlightMode>1)
            {
                SpeedName.Speed = Math.Sqrt((((AllAerocraftData.AutoWingTransverseVelocity) * (AllAerocraftData.AutoWingTransverseVelocity)) + ((AllAerocraftData.AutoWingLongitudinalVelocity) * (AllAerocraftData.AutoWingLongitudinalVelocity))));
                HeightModelName.Text = AllAerocraftData.AutoWingAltitude.ToString("#0.0");
            }
            else
            {
                HeightModelName.Text = "0.0";
                SpeedName.Speed = 0.0;
            }

            //////////////////////////////////流量和流速显示/////////////////////////////////////////////////////////////
            TotolFlowName.Text = AllAerocraftData.New_Total_Flow.ToString("#0.0") + "L";
            CurrentFlowRateName.Text = AllAerocraftData.New_Current_Flow_Rate.ToString("#0.0") + "L/Min";
            DataConstellation.BindingData.UAVpoint.Roll = AllAerocraftData.Roll * 180 / 3.1415926;
            DataConstellation.BindingData.UAVpoint.Pitch = AllAerocraftData.Pitch * 180 / 3.1415926;
            if (AllAerocraftData.New_Data2_Undefined4 > 49)
            {
                GPSName.RTK_Show_Function();
            }
            else
            {
                GPSName.RTK_Hide_Function();
            }
            threeD_yawangle = Rotation_Angle(AllAerocraftData.Yaw);//模型赋值
            DataConstellation.BindingData.UAVpoint.Yaw = threeD_yawangle;
            double yaw_show_dangle = Math.Round(threeD_yawangle, 1);

      //      ControlModeName.Text = yaw_show_dangle.ToString();

            Constants.Connect_YesOrNot_Flag = LinkName.LinkValue;
            if(LinkName.LinkValue>0)
            {
                Constants.User_Current_Timer = AllAerocraftData.AutoWing_Tasete_Hour;
            }
            int Remain_Timer = ((int)Constants.User_Set_MaintainStartToEndTime - AllAerocraftData.AutoWing_Tasete_Hour);
            if (Remain_Timer<0)
            {
                Remain_Timer = 0;
            }
            if (Remain_Timer >= 0 && LinkName.LinkValue>0)
            {
                ControlModeName.Text = Remain_Timer.ToString("#0") + "Hour";
            }
            else
            {
                ControlModeName.Text = "Disable";
            }

            switch (AllAerocraftData.AutoWingFlightMode)
            {
                case 0:
                    TimerName.Mode = 0;
                    FlightModeName.Text = "Prepara Model";
                    break;
                case 1:
                    TimerName.Mode = 1;
                    FlightModeName.Text = "Startup Model";
                    break;
                case 2:
                    TimerName.Mode = 2;
                    FlightModeName.Text = "Attitude Model";
                    break;
                case 3:
                    TimerName.Mode = 3;
                    FlightModeName.Text = "GPS Model";
                    break;
                case 4:
                    TimerName.Mode = 4;
                    FlightModeName.Text = "Waypoints Model";
                    break;
                case 5:
                    TimerName.Mode = 5;
                    FlightModeName.Text = "Waypoints Model";
                    break;
                case 6:
                    TimerName.Mode = 6;
                    FlightModeName.Text = "Auto Model";
                    break;
                case 7:
                    TimerName.Mode = 7;
                    FlightModeName.Text = "Auto Model";
                    break;
                case 8:
                    TimerName.Mode = 8;
                    FlightModeName.Text = "Auto Model";
                    break;
                case 9:
                    TimerName.Mode = 9;
                    FlightModeName.Text = "Auto Model";
                    break;
                default:
                    TimerName.Mode = -1;
                    FlightModeName.Text = "Disable";
                    break;
            }

            #endregion
            Ten_Quency_Count++;
            if (Start_DrawRoute_Flag == 1)
            {
                if (Ten_Quency_Count > 5)
                {
                    Ten_Quency_Count = 0;
                    Draw_Track();
                }
            }

        }
        /// <summary>
        /// 发送不成功超时时间是10秒钟
        /// </summary>
        private void Wait_TenSeconds_Function()
        {
            TenSeconds_Count++;
            if (TenSeconds_Count > 400)//10秒钟还是发送不成功的话
            {
                Constants.Jump_To5or50Hz_Flag = 0;//恢复5hz的发送
                AutoWing_AutoLanding_Flag = 0;//停止着陆发送
                AutoWing_AutoTakeOff_Flag = 0;//停止起飞发送
                AutoWing_RoadPoint_Flag = 0;//停止路点发送
                AutoWing_OneKeyBack_Line_Flag = 0;//停止一键返航发送
                Constants.AutoWing_WorkIndex_Flag =0;//参数设置清零
                Constants.AutoWing_ModelFlight_Flag = 0;//机型设置清零
                Constants.AutoWing_PIDSet_Flag = 0;//pid设置清零
                Constants.AutoWing_ShangCengPIDSet_Flag = 0;//上层pid清零
                Constants.AutoWing_Tel_Control_flag = 0;//遥控器校准清零
                Constants.Fireware_index_flag = 0;//固件升级标志清零
                Constants.Set_Mag_And_AB_Flag = 0;//拐弯点清零
                Which_Road_Point = 0;//路点相关标志清零
                First_Send_Flag = 0;//第一次路点发送清零
              //  Which_Data_Bag++;//路点包总数累增
                Which_Data_Bag = (AllAerocraftData.AutoWingDataPacket + 1);
                Constants.AutoWing_MotorTest_Flag = 0;//测试电机的标志位
                Constants.Set_Pump_Flag = -1;//设置水泵
                Constants.AutoWing_ZhiBaoZuoYe_Flag = 0;//植保作业参数清零
                Constants.AutoWing_HangPai_Flag = 0;//航拍参数清零
                Constants.AutoWing_NoticeIndex_Flag = 0;//安全策略清零
                Constants.AutoWing_HangPaiAndZhibaoChangge_Flag = 0;//植保航拍切换清零
                Constants.Set_PumpDianji_Flag = 0;
                TenSeconds_Count = 0;
                Thread.Sleep(1000);//次线程休眠1秒
                this.Dispatcher.Invoke(new Action(delegate
                {
                    dlg.Close();
                }));
                System.Windows.MessageBox.Show("Send Timeout");
            }
        }
        private void Wait_PIDTenSeconds_Function()
        {
            TenSeconds_Count++;
            if (TenSeconds_Count > 400)//10秒钟还是发送不成功的话
            {
                Constants.Jump_To5or50Hz_Flag = 1;//恢复5hz的发送
                AutoWing_AutoLanding_Flag = 0;//停止着陆发送
                AutoWing_AutoTakeOff_Flag = 0;//停止起飞发送
                AutoWing_RoadPoint_Flag = 0;//停止路点发送
                AutoWing_OneKeyBack_Line_Flag = 0;//停止一键返航发送
                Constants.AutoWing_WorkIndex_Flag = 0;//参数设置清零
                Constants.AutoWing_ModelFlight_Flag = 0;//机型设置清零
                Constants.AutoWing_PIDSet_Flag = 0;//pid设置清零
                Constants.AutoWing_ShangCengPIDSet_Flag = 0;//上层pid清零
                Which_Road_Point = 0;//路点相关标志清零
                First_Send_Flag = 0;//第一次路点发送清零
                //  Which_Data_Bag++;//路点包总数累增
                Which_Data_Bag = (AllAerocraftData.AutoWingDataPacket + 1);
                TenSeconds_Count = 0;
                Thread.Sleep(1000);//次线程休眠1秒
                this.Dispatcher.Invoke(new Action(delegate
                {
                    dlg.Close();
                }));
                System.Windows.MessageBox.Show("Send Timeout");
            }
        }
        /// <summary>
        /// /标志位控制的指令发送
        /// </summary>
        private void Control_Mession_Send()
        {
            ///////////////////发送测试xbee通信health////////////////////////////
            Xbee_Health_Count++;
            if (Xbee_Health_Count > 2)
            {
                Xbee_Health_Count = 0;
                if (Constants.Jump_To5or50Hz_Flag == 0)
                {
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        wifi_Send5HZData(255);//wifi发送
                    }
                    else
                    {
                        Port.Send5HZData(255);//串口发送
                    }
                }
                else if (Constants.Jump_To5or50Hz_Flag == 1)//跳转到50hz下的数据
                {
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        wifi_Send50HZData(255);//wifi发送
                    }
                    else
                    {
                        Port.Send50HZData(255);//串口发送
                    }
                }
                else if (Constants.Jump_To5or50Hz_Flag == 3)//跳转到50hz下的上层pid设置
                {
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        wifi_Send50HZPIDData(255);//wifi发送
                    }
                    else
                    {
                        Port.Send50HZPIDData(255);//串口发送
                    }
                }
                //发送测试xbee  这边发送，接收那边应答
                Xbee_Health.Send();
            }
            ///////////////////发送一键返航//////////////////////////////////////
            if (AutoWing_OneKeyBack_Line_Flag == 1 && AllAerocraftData.AutoWingFlag != 4)
            {
                if (Wifi_Success_Connect_Flag == true)
                {
                    Wait_TenSeconds_Function();//超时停止
                    wifi_SendOneKeyToReturn_Line(0);//wifi发送
                }
                else if (Dat_Save_Flag == 1)
                {
                    Wait_TenSeconds_Function();//超时停止
                    Port.SendOneKeyToReturn_Line(0);//串口发送
                }
                else
                {
                    AutoWing_OneKeyBack_Line_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    System.Windows.MessageBox.Show("Disconnect");
                }
            }
            else if (AutoWing_OneKeyBack_Line_Flag == 1 && AllAerocraftData.AutoWingFlag == 4)
            {
                AutoWing_OneKeyBack_Line_Flag = 0;
                Constants.Jump_To5or50Hz_Flag = 0;
                Thread.Sleep(1000);//次线程休眠1秒
                this.Dispatcher.Invoke(new Action(delegate
                {
                    dlg.Close();
                }));
                TenSeconds_Count = 0;
                System.Windows.MessageBox.Show("Return");
            }
            if (AutoWing_OneKeyBack_Path_Flag == 1 && AllAerocraftData.AutoWingFlag != 5)
            {
                if (Wifi_Success_Connect_Flag == true)
                {
                    Wait_TenSeconds_Function();//超时停止
                    wifi_SendOneKeyToReturn_Path(0);//wifi发送
                }
                else if (Dat_Save_Flag == 1)
                {
                    Wait_TenSeconds_Function();//超时停止
                    Port.SendOneKeyToReturn_Path(0);//串口发送
                }
                else
                {
                    AutoWing_OneKeyBack_Path_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    System.Windows.MessageBox.Show("Disconnect");
                }
            }
            else if (AutoWing_OneKeyBack_Path_Flag == 1 && AllAerocraftData.AutoWingFlag == 5)
            {
                AutoWing_OneKeyBack_Path_Flag = 0;
                Constants.Jump_To5or50Hz_Flag = 0;
                Thread.Sleep(1000);//次线程休眠1秒
                this.Dispatcher.Invoke(new Action(delegate
                {
                    dlg.Close();
                }));
                TenSeconds_Count = 0;
                System.Windows.MessageBox.Show("Return");
            }
            /////////////////发送自主着陆/////////////////////////////////////////
            if (AutoWing_AutoLanding_Flag == 1 && AllAerocraftData.AutoWingFlag != 3)
            {
                if (Wifi_Success_Connect_Flag == true)
                {
                    Wait_TenSeconds_Function();//超时停止
                    wifi_SendAutoLanding(0);//wifi发送
                }
                else if (Dat_Save_Flag == 1)
                {
                    Wait_TenSeconds_Function();//超时停止
                    Port.SendAutoLanding(0);//串口发送
                }
                else
                {
                    AutoWing_AutoLanding_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    System.Windows.MessageBox.Show("Disconnect");
                }
            }
            else if (AutoWing_AutoLanding_Flag == 1 && AllAerocraftData.AutoWingFlag == 3)
            {
                AutoWing_AutoLanding_Flag = 0;
                Constants.Jump_To5or50Hz_Flag = 0;
                Thread.Sleep(1000);//次线程休眠1秒
                this.Dispatcher.Invoke(new Action(delegate
                {
                    dlg.Close();
                }));
                TenSeconds_Count = 0;
                System.Windows.MessageBox.Show("Land");
            }
            ////////////////发送自主起飞/////////////////////////////////////////
            if (AutoWing_AutoTakeOff_Flag == 1 && AllAerocraftData.AutoWingFlag != 2)
            {
                if (Wifi_Success_Connect_Flag == true)
                {
                    Wait_TenSeconds_Function();//超时停止
                    wifi_SendAutoTakeOff(0);
                }
                else if (Dat_Save_Flag == 1)
                {
                    Wait_TenSeconds_Function();//超时停止
                    Port.SendAutoTakeOff(0);
                }
                else
                {
                    AutoWing_AutoTakeOff_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    System.Windows.MessageBox.Show("Disconnect");
                }
            }
            else if (AutoWing_AutoTakeOff_Flag == 1 && AllAerocraftData.AutoWingFlag == 2)
            {
                AutoWing_AutoTakeOff_Flag = 0;
                Constants.Jump_To5or50Hz_Flag = 0;
                Thread.Sleep(1000);//次线程休眠1秒
                this.Dispatcher.Invoke(new Action(delegate
                {
                    dlg.Close();
                }));
                TenSeconds_Count = 0;
                System.Windows.MessageBox.Show("Take Off");
            }

/////////////////////////////////////////机型相关参数发送//////////////////////////////////////////////////////////////
            if (Constants.AutoWing_ModelFlight_Flag == 1 && AllAerocraftData.AutoWingFlag != 12)
            {
                Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                if (Wifi_Success_Connect_Flag == true)
                {
                    Wait_TenSeconds_Function();//超时停止
                    Wifi_SendQudeSet(Constants.Set_DataSelect_QUADE,Constants.Set_tape_speedvalue);
                }
                else if (Dat_Save_Flag == 1)
                {
                    Wait_TenSeconds_Function();//超时停止
                    Port.SendQudeSet(Constants.Set_DataSelect_QUADE, Constants.Set_tape_speedvalue);
                }
                else
                {
                    Constants.AutoWing_ModelFlight_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    System.Windows.MessageBox.Show("Disconnect");
                }
            }
            else if (Constants.AutoWing_ModelFlight_Flag == 1 && AllAerocraftData.AutoWingFlag == 12)
            {
                Constants.AutoWing_ModelFlight_Flag = 0;
                Constants.Jump_To5or50Hz_Flag = 0;
                Thread.Sleep(1000);//次线程休眠1秒
                this.Dispatcher.Invoke(new Action(delegate
                {
                    dlg.Close();
                }));
                TenSeconds_Count = 0;
                System.Windows.MessageBox.Show("Parameter Setting Success");
            }
/////////////////////////////////////////PID参数设置参数////////////////////////////////////////////////////////////////
            if (Constants.AutoWing_PIDSet_Flag == 1 && AllAerocraftData.AutoWingFlag != 15)
            {
                Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                if (Wifi_Success_Connect_Flag == true)
                {
                    Wait_TenSeconds_Function();//超时停止
                    Wifi_SendSetPID(Constants.Set_gyro_kp_rp, Constants.Set_gyro_ki_rp, Constants.Set_gyro_kd_rp, Constants.Set_gyro_kp_y, Constants.Set_gyro_ki_y, Constants.Set_gyro_kd_y, Constants.Set_prop_kp_rp, Constants.Set_prop_ki_rp, Constants.Set_prop_kp_y, Constants.Set_prop_ki_y);
                }
                else if (Dat_Save_Flag == 1)
                {
                    Wait_TenSeconds_Function();//超时停止
                    Port.SendSetPID(Constants.Set_gyro_kp_rp, Constants.Set_gyro_ki_rp, Constants.Set_gyro_kd_rp, Constants.Set_gyro_kp_y, Constants.Set_gyro_ki_y, Constants.Set_gyro_kd_y, Constants.Set_prop_kp_rp, Constants.Set_prop_ki_rp, Constants.Set_prop_kp_y, Constants.Set_prop_ki_y);
                }
                else
                {
                    Constants.AutoWing_PIDSet_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    System.Windows.MessageBox.Show("Disconnect");
                }
            }
            else if (Constants.AutoWing_PIDSet_Flag == 1 && AllAerocraftData.AutoWingFlag == 15)
            {
                Constants.AutoWing_PIDSet_Flag = 0;
                Constants.Jump_To5or50Hz_Flag = 1;
                Thread.Sleep(1000);//次线程休眠1秒
                this.Dispatcher.Invoke(new Action(delegate
                {
                    dlg.Close();
                }));
                TenSeconds_Count = 0;
                System.Windows.MessageBox.Show("Parameter Setting Success");
            }
            /////////////////////////////////////////上层PID参数设置参数////////////////////////////////////////////////////////////////
            if (Constants.AutoWing_ShangCengPIDSet_Flag == 1)
            {
                Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                if (Wifi_Success_Connect_Flag == true)
                {
                    Wifi_SendSetShangcengPID(Constants.Set_zitai_p, Constants.Set_zitai_i, Constants.Set_zitai_d, Constants.Set_hangxiang_p, Constants.Set_hangxiang_i, Constants.Set_hangxiang_d, Constants.Set_sudu_p, Constants.Set_sudu_i, Constants.Set_sudu_d, Constants.Set_gaodu_p, Constants.Set_gaodu_i, Constants.Set_gaodu_d);
                }
                else if (Dat_Save_Flag == 1)
                {
                    Port.SendSetShangcengPID(Constants.Set_zitai_p, Constants.Set_zitai_i, Constants.Set_zitai_d, Constants.Set_hangxiang_p, Constants.Set_hangxiang_i, Constants.Set_hangxiang_d, Constants.Set_sudu_p, Constants.Set_sudu_i, Constants.Set_sudu_d, Constants.Set_gaodu_p, Constants.Set_gaodu_i, Constants.Set_gaodu_d);
                }
                else
                {
                    Constants.AutoWing_ShangCengPIDSet_Flag = -1;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    System.Windows.MessageBox.Show("Disconnect");
                }
            }
            else if (Constants.AutoWing_ShangCengPIDSet_Flag == 0)
            {
                Constants.AutoWing_ShangCengPIDSet_Flag = -1;
                Constants.Jump_To5or50Hz_Flag = 3;
            }
            //////////////////路点发送//////////////////////////////////////////
            if (AutoWing_RoadPoint_Flag == 1)
            {
                if (Wifi_Success_Connect_Flag == true)
                {
                    Wait_TenSeconds_Function();//超时停止
                    Send_RoadPoint_Info();
                }
                else if (Dat_Save_Flag == 1)
                {
                    Wait_TenSeconds_Function();//超时停止
                    Send_RoadPoint_Info();
                }
                else
                {
                    AutoWing_RoadPoint_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    System.Windows.MessageBox.Show("Disconnect");
                }

            }
            /**********************************************LED调节************************************************************/
            if (Constants.AutoWing_Switch_Open_Flag == 1)
            {
                if (Constants.AutoWing_Switch_Open_Flag == 1 && AllAerocraftData.AutoWingFlag != 7)
                {
                    Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        wifi_SendLedAdjust(Constants.Led_nighttolight_state);
                    }
                    else if (Dat_Save_Flag == 1)
                    {
                        Port.SendLedAdjust(Constants.Led_nighttolight_state);
                    }
                    else
                    {
                        Constants.Jump_To5or50Hz_Flag = 0;//5HZ flag恢复
                        Constants.AutoWing_Switch_Open_Flag = 0;
                        System.Windows.MessageBox.Show("Disconnect");
                    }
                }
                else if (Constants.AutoWing_Switch_Open_Flag == 1 && AllAerocraftData.AutoWingFlag == 7)
                {
                    Constants.Jump_To5or50Hz_Flag = 0;//5HZ flag恢复
                    Constants.AutoWing_Switch_Open_Flag = 0;
                }
            }
            else
            {
                if (Constants.AutoWing_Led_Flag == 1)
                {
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        wifi_SendLedAdjust(Constants.Led_nighttolight_state);
                    }
                    else if (Dat_Save_Flag == 1)
                    {
                        Port.SendLedAdjust(Constants.Led_nighttolight_state);
                    }
                    else
                    {
                        Constants.Jump_To5or50Hz_Flag = 0;//5HZ flag恢复
                        Constants.AutoWing_Led_Flag = -1;
                        System.Windows.MessageBox.Show("Disconnect");
                    }
                }
                else if (Constants.AutoWing_Led_Flag == 0)
                {
                    Constants.Jump_To5or50Hz_Flag = 0;//5HZ flag恢复
                    Constants.AutoWing_Led_Flag = -1;
                }
            }
/////////////////////////////////////////////固件升级指令发送///////////////////////////////////////////////////////////////////////////
			/*************************************固件升级********************************************************************/
				if(Constants.Fireware_index_flag==1 && Constants.Jump_Flag==16 && Constants.Jump_INitialFlag==0)//一旦收到固件升级返回指令
				{
					Constants.Fireware_index_flag=0;//固件升级指令清零
					Constants.Jump_To5or50Hz_Flag=0;//恢复默认5HZ
                    Thread.Sleep(1000);//次线程休眠1秒
                    this.Dispatcher.Invoke(new Action(delegate
                    {
                        dlg.Close();
                    }));
                    TenSeconds_Count = 0;
                    MainWindow.pWin.Visibility = Visibility.Hidden;
				    Constants.Jump_Flag=0;
                    Stop_SendMession_Flag=1;
                    Port.Close();
                    System.Diagnostics.Process.Start(System.IO.Path.GetFullPath(@"../Core/IAP.exe")).WaitForExit();//@"../Core/Start_X-Monitor_Core.bat"
                    MainWindow.pWin.Visibility = Visibility.Visible;
                    Thread.Sleep(2000);//次线程休眠1秒
                    Port.Open();
                    Stop_SendMession_Flag=0;
				}
				else if(Constants.Fireware_index_flag==1)
				{
                     Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                     if (Wifi_Success_Connect_Flag != true && Dat_Save_Flag == 1)
                     {
/*******************************************打开等待界面10秒不成功恢复到默认********************************************************/
					    Wait_TenSeconds_Function();//超时停止
/*******************************************打开等待界面10秒不成功恢复到默认********************************************************/
						//发送固件升级
					    Constants.Jump_To5or50Hz_Flag=-1;
                        AutoWing_AutoLanding_Flag = 0;//停止着陆发送
                        AutoWing_AutoTakeOff_Flag = 0;//停止起飞发送
                        AutoWing_RoadPoint_Flag = 0;//停止路点发送
                        AutoWing_OneKeyBack_Line_Flag = 0;//停止一键返航发送
                        Constants.AutoWing_WorkIndex_Flag =0;//参数设置清零
                        Constants.AutoWing_ModelFlight_Flag = 0;//机型设置清零
                        Constants.AutoWing_PIDSet_Flag = 0;//pid设置清零
                        Constants.AutoWing_Tel_Control_flag = 0;//遥控器校准清零
					    Port.SendGuJianShengJi(Constants.Update_Equipment_ID);
                      }
                     else
                     {
                        Constants.Fireware_index_flag = 0;
                        Constants.Jump_To5or50Hz_Flag = 0;
                        System.Windows.MessageBox.Show("请在升级模块下使用");
                     }
				}
///////////////////////////////////////////////电机测试//////////////////////////////////////////////////////////////////
                if (Constants.AutoWing_MotorTest_Flag == 1 && AllAerocraftData.AutoWingFlag != 19)
                {
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        wifi_SendMotorTest(Constants.Motor1_Test_Index, Constants.Motor2_Test_Index);//wifi发送
                    }
                    else if (Dat_Save_Flag == 1)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        Port.SendMotorTest(Constants.Motor1_Test_Index, Constants.Motor2_Test_Index);//串口发送
                    }
                    else
                    {
                        Constants.AutoWing_MotorTest_Flag = 0;
                        Constants.Jump_To5or50Hz_Flag = 0;
                        System.Windows.MessageBox.Show("Disconnect");
                    }
                }
                else if (Constants.AutoWing_MotorTest_Flag == 1 && AllAerocraftData.AutoWingFlag == 19)
                {
                    Constants.AutoWing_MotorTest_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    Thread.Sleep(1000);//次线程休眠1秒
                    this.Dispatcher.Invoke(new Action(delegate
                    {
                        dlg.Close();
                    }));
                    TenSeconds_Count = 0;
                    System.Windows.MessageBox.Show("Success Of Motor Instruction Sending");
                }
                /////////////////////////////////////////////////////////////////水泵校准///////////////////////////////////////////////////////
                //      if (Constants.Set_Pump_Flag == 1 && AllAerocraftData.AutoWingFlag != 24)
                if (Constants.Set_Pump_Flag == 1)
                {
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        //        Wait_TenSeconds_Function();//超时停止
                        wifi_SendPumpTest(Constants.Intelligent_Pump_MaxValue_Set, Constants.Intelligent_Pump_MinValue_Set,
                                          Constants.Intelligent_Vel_MaxValue_Set, Constants.Intelligent_Vel_MinValue_Set,
                                          Constants.Intelligent_Motor_Value_Set, Constants.Fixed_Pump_Value_Set, Constants.Fixed_Motor_Value_Set, Constants.Set_shuiben_duanyao_action);//wifi发送
                    }
                    else if (Dat_Save_Flag == 1)
                    {
                        //          Wait_TenSeconds_Function();//超时停止
                        Port.SendPumpTest(Constants.Intelligent_Pump_MaxValue_Set, Constants.Intelligent_Pump_MinValue_Set,
                                          Constants.Intelligent_Vel_MaxValue_Set, Constants.Intelligent_Vel_MinValue_Set,
                                          Constants.Intelligent_Motor_Value_Set, Constants.Fixed_Pump_Value_Set, Constants.Fixed_Motor_Value_Set, Constants.Set_shuiben_duanyao_action);//串口发送
                    }
                    else
                    {
                        Constants.Set_Pump_Flag = -1;
                        Constants.Jump_To5or50Hz_Flag = 0;
                        System.Windows.MessageBox.Show("Disconnect");
                    }
                }
                else if (Constants.Set_Pump_Flag == 0)
                {
                    Constants.Set_Pump_Flag = -1;
                    Constants.Jump_To5or50Hz_Flag = 0;
                }
///////////////////////////////特殊由于水泵这边既要滑动发送又要能点击发送//////////////////////////////////////////
                if (Constants.Set_PumpDianji_Flag == 1 && AllAerocraftData.AutoWingFlag != 24)
                {
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        wifi_SendPumpTest(Constants.Intelligent_Pump_MaxValue_Set, Constants.Intelligent_Pump_MinValue_Set,
                                          Constants.Intelligent_Vel_MaxValue_Set, Constants.Intelligent_Vel_MinValue_Set,
                                          Constants.Intelligent_Motor_Value_Set, Constants.Fixed_Pump_Value_Set, Constants.Fixed_Motor_Value_Set, Constants.Set_shuiben_duanyao_action);//wifi发送
                    }
                    else if (Dat_Save_Flag == 1)
                    {
                       Wait_TenSeconds_Function();//超时停止
                        Port.SendPumpTest(Constants.Intelligent_Pump_MaxValue_Set, Constants.Intelligent_Pump_MinValue_Set,
                                          Constants.Intelligent_Vel_MaxValue_Set, Constants.Intelligent_Vel_MinValue_Set,
                                          Constants.Intelligent_Motor_Value_Set, Constants.Fixed_Pump_Value_Set, Constants.Fixed_Motor_Value_Set, Constants.Set_shuiben_duanyao_action);//串口发送
                    }
                    else
                    {
                        Constants.Set_Pump_Flag = 0;
                        Constants.Jump_To5or50Hz_Flag = 0;
                        System.Windows.MessageBox.Show("Disconnect");
                    }
                }
                else if (Constants.Set_PumpDianji_Flag == 1 && AllAerocraftData.AutoWingFlag == 24)
                {
                    Constants.Set_PumpDianji_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    Thread.Sleep(1000);//次线程休眠1秒
                    this.Dispatcher.Invoke(new Action(delegate
                    {
                        dlg.Close();
                    }));
                    TenSeconds_Count = 0;
                    System.Windows.MessageBox.Show("The Success Of Pump Parameter Setting");
                }




                /////////////////////////////////////修改飞控ID///////////////////////////////////////////////////////////////
                if (Constants.Set_APID_Flag == 1 && AllAerocraftData.AutoWingFlag != 11)
                {
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        wifi_SendAPID_Set(Constants.AP_SETID_String);//wifi发送
                    }
                    else if (Dat_Save_Flag == 1)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        Port.SendAPID_Set(Constants.AP_SETID_String);//串口发送
                    }
                    else
                    {
                        Constants.Set_APID_Flag = 0;
                        Constants.Jump_To5or50Hz_Flag = 0;
                        System.Windows.MessageBox.Show("Disconnect");
                    }
                }
                else if (Constants.Set_APID_Flag == 1 && AllAerocraftData.AutoWingFlag == 11)
                {
                    Constants.Set_APID_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    Thread.Sleep(1000);//次线程休眠1秒
                    this.Dispatcher.Invoke(new Action(delegate
                    {
                        dlg.Close();
                    }));
                    TenSeconds_Count = 0;
                    System.Windows.MessageBox.Show("Flight Control ID Set Up Successfully");
                }
//////////////////////////////////////////////飞行拐弯参数设置///////////////////////////////////

                if (Constants.Set_Mag_And_AB_Flag == 1 && AllAerocraftData.AutoWingFlag != 17)
                {
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        wifi_SendFlightTurn_Set(Constants.Mag_Offset_Angle_Set, Constants.AB_ApproachLine_Range_Set, Constants.AB_ApproachLine_DeadZone_Set,
                            Constants.AB_ApproachPoint_Range_Set, Constants.AB_HorizoMove_Acc_Set, Constants.AB_HorizoMove_Range_Set, Constants.AB_FowardMove_Acc_Set
                            , Constants.AB_VelToPosition_Percent_Set, Constants.AB_BToThreshold_Percent_Set, Constants.AB_AToThreshold_Percen_Set, Constants.AB_BackThreshold_Set);//wifi发送
                    }
                    else if (Dat_Save_Flag == 1)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        Port.SendFlightTurn_Set(Constants.Mag_Offset_Angle_Set, Constants.AB_ApproachLine_Range_Set, Constants.AB_ApproachLine_DeadZone_Set,
                            Constants.AB_ApproachPoint_Range_Set, Constants.AB_HorizoMove_Acc_Set, Constants.AB_HorizoMove_Range_Set, Constants.AB_FowardMove_Acc_Set
                            , Constants.AB_VelToPosition_Percent_Set, Constants.AB_BToThreshold_Percent_Set, Constants.AB_AToThreshold_Percen_Set, Constants.AB_BackThreshold_Set);//wifi发送
                    }
                    else
                    {
                        Constants.Set_Mag_And_AB_Flag = 0;
                        Constants.Jump_To5or50Hz_Flag = 0;
                        System.Windows.MessageBox.Show("Disconnect");
                    }
                }
                else if (Constants.Set_Mag_And_AB_Flag == 1 && AllAerocraftData.AutoWingFlag == 17)
                {
                    Constants.Set_Mag_And_AB_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    Thread.Sleep(1000);//次线程休眠1秒
                    this.Dispatcher.Invoke(new Action(delegate
                    {
                        dlg.Close();
                    }));
                    TenSeconds_Count = 0;
                    System.Windows.MessageBox.Show("Success Of Flight Turning Parameters");
                }

                /////////////////////////////基础作业参数发送///////////////////////////////////////////////
                if (Constants.AutoWing_WorkIndex_Flag == 1 && AllAerocraftData.AutoWingFlag != 14)
                {
                    Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        Wifi_SendSheZhiCanShu(Constants.Set_UAV_Speed, Constants.Set_UAV_Height, Constants.Set_UAV_UpSpeed, Constants.Set_UAV_DownSpeed, Constants.Set_UAV_AttitudeRange);
                    }
                    else if (Dat_Save_Flag == 1)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        Port.SendSheZhiCanShu(Constants.Set_UAV_Speed, Constants.Set_UAV_Height, Constants.Set_UAV_UpSpeed, Constants.Set_UAV_DownSpeed, Constants.Set_UAV_AttitudeRange, Constants.Set_UAV_Maxhangxiangjiaosudu);
                    }
                    else
                    {
                        Constants.AutoWing_WorkIndex_Flag = 0;
                        Constants.Jump_To5or50Hz_Flag = 0;
                        System.Windows.MessageBox.Show("Disconnect");
                    }
                }
                else if (Constants.AutoWing_WorkIndex_Flag == 1 && AllAerocraftData.AutoWingFlag == 14)
                {
                    Constants.AutoWing_WorkIndex_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    Thread.Sleep(1000);//次线程休眠1秒
                    this.Dispatcher.Invoke(new Action(delegate
                    {
                        dlg.Close();
                    }));
                    TenSeconds_Count = 0;
                    System.Windows.MessageBox.Show("Basic Parameter Setting Success");
                }

///////////////////////////////////////////////////植保作业设置///////////////////////////////////////////////
                if (Constants.AutoWing_ZhiBaoZuoYe_Flag == 1 && AllAerocraftData.AutoWingFlag != 8)
                {
                    Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        Wifi_SendZhiBaoCanShu(Constants.Set_UAV_ZhiBaoSpeed, Constants.Set_UAV_ZhiBaoFuDu);
                    }
                    else if (Dat_Save_Flag == 1)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        Port.SendZhiBaoCanShu(Constants.Set_UAV_ZhiBaoSpeed, Constants.Set_UAV_ZhiBaoFuDu,Constants.Set_UAV_ZhiBaoAction);
                    }
                    else
                    {
                        Constants.AutoWing_ZhiBaoZuoYe_Flag = 0;
                        Constants.Jump_To5or50Hz_Flag = 0;
                        System.Windows.MessageBox.Show("Disconnect");
                    }
                }
                else if (Constants.AutoWing_ZhiBaoZuoYe_Flag == 1 && AllAerocraftData.AutoWingFlag == 8)
                {
                    Constants.AutoWing_ZhiBaoZuoYe_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    Thread.Sleep(1000);//次线程休眠1秒
                    this.Dispatcher.Invoke(new Action(delegate
                    {
                        dlg.Close();
                    }));
                    TenSeconds_Count = 0;
                    System.Windows.MessageBox.Show("Success Of Plant Protection Operation Parameters");
                }

                ///////////////////////////////////////////////////航拍作业设置///////////////////////////////////////////////
                if (Constants.AutoWing_HangPai_Flag == 1 && AllAerocraftData.AutoWingFlag != 9)
                {
                    Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        Wifi_SendHangPaiCanShu(Constants.Set_UAV_HangPaiSpeed, Constants.Set_UAV_M9Low, Constants.Set_UAV_M9Middle, Constants.Set_UAV_M9High, Constants.Set_UAV_M10Low, Constants.Set_UAV_M10Middle, Constants.Set_UAV_M10High);
                    }
                    else if (Dat_Save_Flag == 1)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        Port.SendHangPaiCanShu(Constants.Set_UAV_HangPaiSpeed, Constants.Set_UAV_M9Low, Constants.Set_UAV_M9Middle, Constants.Set_UAV_M9High, Constants.Set_UAV_M10Low, Constants.Set_UAV_M10Middle, Constants.Set_UAV_M10High, Constants.Set_UAV_HangPaiUpSpeed, Constants.Set_UAV_HangPaiDownSpeed);
                    }
                    else
                    {
                        Constants.AutoWing_HangPai_Flag = 0;
                        Constants.Jump_To5or50Hz_Flag = 0;
                        System.Windows.MessageBox.Show("Disconnect");
                    }
                }
                else if (Constants.AutoWing_HangPai_Flag == 1 && AllAerocraftData.AutoWingFlag == 9)
                {
                    Constants.AutoWing_HangPai_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;

                    for (int jj = 0; jj < 100; jj++)
                    {
                        WayPoint_HengxiangSudu[jj] = Convert.ToDouble(Constants.Set_UAV_HangPaiSpeed.ToString("#0.0"));
                        WayPoint_ZongshangSudu[jj] = Convert.ToDouble(Constants.Set_UAV_HangPaiUpSpeed.ToString("#0.0"));
                        WayPoint_ZongxiaSudu[jj] = Convert.ToDouble(Constants.Set_UAV_HangPaiDownSpeed.ToString("#0.0"));
                    }


                    Thread.Sleep(1000);//次线程休眠1秒
                    this.Dispatcher.Invoke(new Action(delegate
                    {
                        dlg.Close();
                    }));
                    TenSeconds_Count = 0;
                    System.Windows.MessageBox.Show("The Success Of Aerial Photo Parameter Setting");
                }

                ///////////////////////////////////////////////////安全策略设置///////////////////////////////////////////////
                if (Constants.AutoWing_NoticeIndex_Flag == 1 && AllAerocraftData.AutoWingFlag != 13)
                {
                    Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        Wifi_SendAnQuanCeLueCanShu(Constants.Set_UAV_Noticefirstvolt, Constants.Set_UAV_Noticesecondvolt, Constants.Set_UAV_Noticesecondaction, Constants.Set_UAV_Noticelosecontrolaction, Constants.Set_UAV_Noticedistance, Constants.Set_UAV_Noticeheight, Constants.Set_UAV_Noticefanhanggaodu);
                    }
                    else if (Dat_Save_Flag == 1)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        Port.SendAnQuanCeLue(Constants.Set_UAV_Noticefirstvolt, Constants.Set_UAV_Noticesecondvolt, Constants.Set_UAV_Noticesecondaction,Constants.Set_UAV_Noticelosecontrolaction, Constants.Set_UAV_Noticedistance, Constants.Set_UAV_Noticeheight , Constants.Set_UAV_Noticefanhanggaodu);
                    }
                    else
                    {
                        Constants.AutoWing_NoticeIndex_Flag = 0;
                        Constants.Jump_To5or50Hz_Flag = 0;
                        System.Windows.MessageBox.Show("Disconnect");
                    }
                }
                else if (Constants.AutoWing_NoticeIndex_Flag == 1 && AllAerocraftData.AutoWingFlag == 13)
                {
                    Constants.AutoWing_NoticeIndex_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    Thread.Sleep(1000);//次线程休眠1秒
                    this.Dispatcher.Invoke(new Action(delegate
                    {
                        dlg.Close();
                    }));
                    TenSeconds_Count = 0;
                    System.Windows.MessageBox.Show("Security Policy Parameters Have Been Set Up Successfully");
                }

                ///////////////////////////////////////////////////植保航拍切换///////////////////////////////////////////////
                if (Constants.AutoWing_HangPaiAndZhibaoChangge_Flag == 1 && AllAerocraftData.AutoWingFlag != 18)
                {
                    Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        Wifi_SendZhiBaoAndHangPai(Constants.Set_UAV_CurrentStyle);
                    }
                    else if (Dat_Save_Flag == 1)
                    {
                        Wait_TenSeconds_Function();//超时停止
                        Port.SendZhibaoHangpaiQiehuan(Constants.Set_UAV_CurrentStyle);
                    }
                    else
                    {
                        Constants.AutoWing_HangPaiAndZhibaoChangge_Flag = 0;
                        Constants.Jump_To5or50Hz_Flag = 0;
                        System.Windows.MessageBox.Show("Disconnect");
                    }
                }
                else if (Constants.AutoWing_HangPaiAndZhibaoChangge_Flag == 1 && AllAerocraftData.AutoWingFlag == 18)
                {
                    Constants.AutoWing_HangPaiAndZhibaoChangge_Flag = 0;
                    Constants.Jump_To5or50Hz_Flag = 0;
                    Thread.Sleep(1000);//次线程休眠1秒
                    this.Dispatcher.Invoke(new Action(delegate
                    {
                        dlg.Close();
                    }));
                    TenSeconds_Count = 0;
                }
        }
        /// <summary>
        /// 发送路点
        /// </summary>
        private void Send_RoadPoint_Info()
        {
            if (WayPoint_NumS < 1)
            {
                AutoWing_RoadPoint_Flag = 0;
                System.Windows.MessageBox.Show("Please Load The Waypoints");
                return;
            }

            if (First_Send_Flag == 0)
            {
                Which_Road_Point = 0x01;

                if (Wifi_Success_Connect_Flag == true)
                {
                    wifi_SendRefData(PlanSend_Flag, usedyesornot_pensa_flag[0], WayPoint_Lat[0], WayPoint_Lon[0], WayPoint_Height[0], WayPoint_HoverTimer[0], WayPoint_NumS, Which_Road_Point, VelSend_Flag, VelSend_Value, Which_Data_Bag, SetCameraAngleSend_Flag);
                }
                else
                {
                    Port.SendRefData(UsedWayPoint_SetIndex[0], UsedWayPoint_KeepIndex1[0], WayPoint_Lat[0], WayPoint_Lon[0], UsedWayPoint_Height[0], UsedWayPoint_HoverTimer[0], WayPoint_NumS, Which_Road_Point, UsedWayPoint_Yaw[0], UsedWayPoint_HengxiangSudu[0], Which_Data_Bag, UsedWayPoint_ZongshangSudu[0], UsedWayPoint_ZongxiaSudu[0], UsedWayPoint_KeepIndex2[0]);
                }
                First_Send_Flag = AllAerocraftData.AutoWingWhichMarker;
            }
            else if (AllAerocraftData.AutoWingWhichMarker == Which_Road_Point && ((Which_Road_Point + 1) <= WayPoint_NumS))
            {
                Which_Road_Point++;
                if (Wifi_Success_Connect_Flag == true)
                {
                    wifi_SendRefData(PlanSend_Flag, usedyesornot_pensa_flag[Which_Road_Point - 1], WayPoint_Lat[Which_Road_Point - 1], WayPoint_Lon[Which_Road_Point - 1], WayPoint_Height[Which_Road_Point - 1], WayPoint_HoverTimer[Which_Road_Point - 1], WayPoint_NumS, Which_Road_Point, VelSend_Flag, VelSend_Value, Which_Data_Bag, SetCameraAngleSend_Flag);
                }
                else
                {
                    Port.SendRefData(UsedWayPoint_SetIndex[Which_Road_Point - 1], UsedWayPoint_KeepIndex1[Which_Road_Point - 1], WayPoint_Lat[Which_Road_Point - 1], WayPoint_Lon[Which_Road_Point - 1], UsedWayPoint_Height[Which_Road_Point - 1], UsedWayPoint_HoverTimer[Which_Road_Point - 1], WayPoint_NumS, Which_Road_Point, UsedWayPoint_Yaw[Which_Road_Point - 1], UsedWayPoint_HengxiangSudu[Which_Road_Point - 1], Which_Data_Bag, UsedWayPoint_ZongshangSudu[Which_Road_Point - 1], UsedWayPoint_ZongxiaSudu[Which_Road_Point - 1], UsedWayPoint_KeepIndex2[Which_Road_Point - 1]);
                }
            }
            else if (AllAerocraftData.AutoWingWhichMarker == (Which_Road_Point - 1) && (Which_Road_Point) <= WayPoint_NumS)
            {
                if (Wifi_Success_Connect_Flag == true)
                {
                    wifi_SendRefData(PlanSend_Flag, usedyesornot_pensa_flag[Which_Road_Point - 1], WayPoint_Lat[Which_Road_Point - 1], WayPoint_Lon[Which_Road_Point - 1], WayPoint_Height[Which_Road_Point - 1], WayPoint_HoverTimer[Which_Road_Point - 1], WayPoint_NumS, Which_Road_Point, VelSend_Flag, VelSend_Value, Which_Data_Bag, SetCameraAngleSend_Flag);
                }
                else
                {
                    Port.SendRefData(UsedWayPoint_SetIndex[Which_Road_Point - 1], UsedWayPoint_KeepIndex1[Which_Road_Point - 1], WayPoint_Lat[Which_Road_Point - 1], WayPoint_Lon[Which_Road_Point - 1], UsedWayPoint_Height[Which_Road_Point - 1], UsedWayPoint_HoverTimer[Which_Road_Point - 1], WayPoint_NumS, Which_Road_Point, UsedWayPoint_Yaw[Which_Road_Point - 1], UsedWayPoint_HengxiangSudu[Which_Road_Point - 1], Which_Data_Bag, UsedWayPoint_ZongshangSudu[Which_Road_Point - 1], UsedWayPoint_ZongxiaSudu[Which_Road_Point - 1], UsedWayPoint_KeepIndex2[Which_Road_Point - 1]);
                }
            }
            if ((AllAerocraftData.AutoWingWhichMarker) == WayPoint_NumS && AllAerocraftData.AutoWingDataPacket == Which_Data_Bag)
            {
                Which_Road_Point = 0;
                First_Send_Flag = 0;
                AutoWing_RoadPoint_Flag = 0;
                Constants.Jump_To5or50Hz_Flag = 0;
             //   Which_Data_Bag++;
                Which_Data_Bag = (AllAerocraftData.AutoWingDataPacket + 1);
                Thread.Sleep(1000);//次线程休眠1秒
                this.Dispatcher.Invoke(new Action(delegate
                {
                    dlg.Close();
                }));
                TenSeconds_Count = 0;
///////////////////////////////新增计算优化估计算法参数计算///////////////////////////////////////////////////////////////////
                for (int i = 0; i < WayPoint_NumS - 1; i++)
                {
                    Trajectory_Optimization_A[i] = WayPoint_Lon[i + 1] - WayPoint_Lon[i];
                    Trajectory_Optimization_B[i] = WayPoint_Lat[i] - WayPoint_Lat[i+1];
                    Trajectory_Optimization_C[i] = WayPoint_Lat[i + 1] * WayPoint_Lon[i] - WayPoint_Lat[i] * WayPoint_Lon[i + 1];
                }
                Current_Optimization_Flag = 0 ;
                History_Optimization_Flag = 0;
///////////////////////////////新增计算优化轨迹参宿计算///////////////////////////////////////////////////////////////////
                System.Windows.MessageBox.Show("Waypoints Send Success");
            }
        }
        private void Draw_Track()
        {
            if (DrawTrack_Count < 1)
            {
                if (AllAerocraftData.AutoWingLatitude > 20)
                {
                    if (Map_pan_flag==0)
                    {
                        Map_pan_flag = 1;
                        MainMap.Position = new PointLatLng(AllAerocraftData.AutoWingLatitude, AllAerocraftData.AutoWingLongitude);
                    }

                    UAVMarker.Position = new PointLatLng(AllAerocraftData.AutoWingLatitude, AllAerocraftData.AutoWingLongitude);
                    //　Home位置
                    if (Home_flag == 0)
                    {
                        Home_flag = 1;
                        Hone_lat_poi = AllAerocraftData.AutoWingLatitude;
                        Home_lon_poi = AllAerocraftData.AutoWingLongitude;
                    }
                    HomeMarker.Position = new PointLatLng(Hone_lat_poi, Home_lon_poi);
                    UAVRoute.Points.Add(UAVMarker.Position);
                    UAVRoute.RegenerateShape(MainMap);

                    Cover_Angle = Destination_Angle_Function_X(AllAerocraftData.AutoWingLatitude, AllAerocraftData.AutoWingLongitude);
                    DrawTrack_Count = DrawTrack_Count + 1;
                }
            }
            else
            {
                if (!Start_Cover_Flag)//没有启用覆盖面的的话就默认画轨迹
                {
                   // if (AllAerocraftData.Hangpaizhibao_Value==0)
                   // {
                        ////////////////////////////////////轨迹拟合切换的时候需要重新赋值////////////////////////////////////
                    if (AllAerocraftData.AutoWingFlightMode!=4)
                    {
                        Current_Nihe_Flag = 0;
                        History_Nihe_Flag = 0;
                    }
                        Current_Nihe_Flag = AllAerocraftData.AutoWingFlightMode;
                        if (Current_Nihe_Flag != History_Nihe_Flag && AllAerocraftData.AutoWingFlightMode==4)
                        {
                            History_Nihe_Flag = Current_Nihe_Flag;
                            if (AllAerocraftData.AutoWingCommunitationState == 1)
                            {
                                pos_num_get = 2;
                            }
                            else
                            {
                                pos_num_get = AllAerocraftData.AutoWingCommunitationState + 2;
                            }
                        }

                        if (AllAerocraftData.AutoWingLatitude > 0)
                        {
                            if (AllAerocraftData.AutoWingCommunitationState >= pos_num_get && AllAerocraftData.AutoWingCommunitationState <= AllAerocraftData.AutoWingMarkerNums
                                && AllAerocraftData.AutoWingFlightMode == 4 && AllAerocraftData.AutoWingCommunitationState >= 2)
                            {

                                Current_Optimization_Flag = AllAerocraftData.AutoWingCommunitationState;
                                double Trajectory_Optimization_Lat = 0.0;
                                double Trajectory_Optimization_Lon = 0.0;
                                if (Current_Optimization_Flag == History_Optimization_Flag)
                                {
                                    if ((Trajectory_Optimization_A[AllAerocraftData.AutoWingCommunitationState - 2] * Trajectory_Optimization_A[AllAerocraftData.AutoWingCommunitationState - 2] + Trajectory_Optimization_B[AllAerocraftData.AutoWingCommunitationState - 2] * Trajectory_Optimization_B[AllAerocraftData.AutoWingCommunitationState - 2]) != 0)
                                    {
                                        double lat_If_Out_Value = 0.0;
                                        double lon_If_Out_Value = 0.0;
                                        lat_If_Out_Value = (-Trajectory_Optimization_A[AllAerocraftData.AutoWingCommunitationState - 2] * Trajectory_Optimization_C[AllAerocraftData.AutoWingCommunitationState - 2]
                                                                      - Trajectory_Optimization_A[AllAerocraftData.AutoWingCommunitationState - 2] * Trajectory_Optimization_B[AllAerocraftData.AutoWingCommunitationState - 2]
                                                                      * AllAerocraftData.AutoWingLongitude + Trajectory_Optimization_B[AllAerocraftData.AutoWingCommunitationState - 2] * Trajectory_Optimization_B[AllAerocraftData.AutoWingCommunitationState - 2]
                                                                      * AllAerocraftData.AutoWingLatitude) / (Trajectory_Optimization_A[AllAerocraftData.AutoWingCommunitationState - 2] * Trajectory_Optimization_A[AllAerocraftData.AutoWingCommunitationState - 2] +
                                                                      Trajectory_Optimization_B[AllAerocraftData.AutoWingCommunitationState - 2] * Trajectory_Optimization_B[AllAerocraftData.AutoWingCommunitationState - 2]);
                                        lon_If_Out_Value = (Trajectory_Optimization_B[AllAerocraftData.AutoWingCommunitationState - 2] * Trajectory_Optimization_C[AllAerocraftData.AutoWingCommunitationState - 2]
                                                                        - Trajectory_Optimization_A[AllAerocraftData.AutoWingCommunitationState - 2] * Trajectory_Optimization_A[AllAerocraftData.AutoWingCommunitationState - 2] *
                                                                        AllAerocraftData.AutoWingLongitude + Trajectory_Optimization_A[AllAerocraftData.AutoWingCommunitationState - 2] * Trajectory_Optimization_B[AllAerocraftData.AutoWingCommunitationState - 2]
                                                                        * AllAerocraftData.AutoWingLatitude) / -(Trajectory_Optimization_A[AllAerocraftData.AutoWingCommunitationState - 2] * Trajectory_Optimization_A[AllAerocraftData.AutoWingCommunitationState - 2] +
                                                                      Trajectory_Optimization_B[AllAerocraftData.AutoWingCommunitationState - 2] * Trajectory_Optimization_B[AllAerocraftData.AutoWingCommunitationState - 2]);
                                        ////////////////首先确保当前的方案是有数据的//////////////////////////////////////////////////////
                                        if (WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2] > 0 && WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2] > 0
                                            && WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2 + 1] > 0 && WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2 + 1] > 0)
                                        {

                                            if (WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2] < WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2 + 1])
                                            {
                                                if (WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2] < WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2 + 1])
                                                {
                                                    if (lat_If_Out_Value >= WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2] && lat_If_Out_Value <= WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2 + 1]
                                                        && lon_If_Out_Value >= WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2] && lon_If_Out_Value <= WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2 + 1])
                                                    {
                                                        Trajectory_Optimization_Lat = lat_If_Out_Value;
                                                        Trajectory_Optimization_Lon = lon_If_Out_Value;
                                                    }
                                                    else
                                                    {
                                                        Trajectory_Optimization_Lat = lishi_lat;
                                                        Trajectory_Optimization_Lon = lishi_lon;
                                                    }
                                                }
                                                else
                                                {
                                                    if (lat_If_Out_Value >= WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2] && lat_If_Out_Value <= WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2 + 1]
                                                        && lon_If_Out_Value >= WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2 + 1] && lon_If_Out_Value <= WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2])
                                                    {
                                                        Trajectory_Optimization_Lat = lat_If_Out_Value;
                                                        Trajectory_Optimization_Lon = lon_If_Out_Value;
                                                    }
                                                    else
                                                    {
                                                        Trajectory_Optimization_Lat = lishi_lat;
                                                        Trajectory_Optimization_Lon = lishi_lon;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2] < WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2 + 1])
                                                {
                                                    if (lat_If_Out_Value >= WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2 + 1] && lat_If_Out_Value <= WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2]
                                                         && lon_If_Out_Value >= WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2] && lon_If_Out_Value <= WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2 + 1])
                                                    {
                                                        Trajectory_Optimization_Lat = lat_If_Out_Value;
                                                        Trajectory_Optimization_Lon = lon_If_Out_Value;
                                                    }
                                                    else
                                                    {
                                                        Trajectory_Optimization_Lat = lishi_lat;
                                                        Trajectory_Optimization_Lon = lishi_lon;
                                                    }
                                                }
                                                else
                                                {
                                                    if (lat_If_Out_Value >= WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2 + 1] && lat_If_Out_Value <= WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2]
                                                         && lon_If_Out_Value >= WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2 + 1] && lon_If_Out_Value <= WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2])
                                                    {
                                                        Trajectory_Optimization_Lat = lat_If_Out_Value;
                                                        Trajectory_Optimization_Lon = lon_If_Out_Value;
                                                    }
                                                    else
                                                    {
                                                        Trajectory_Optimization_Lat = lishi_lat;
                                                        Trajectory_Optimization_Lon = lishi_lon;
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            Trajectory_Optimization_Lat = AllAerocraftData.AutoWingLatitude;
                                            Trajectory_Optimization_Lon = AllAerocraftData.AutoWingLongitude;
                                        }
                                    }
                                    else
                                    {
                                        Trajectory_Optimization_Lat = AllAerocraftData.AutoWingLatitude;
                                        Trajectory_Optimization_Lon = AllAerocraftData.AutoWingLongitude;
                                    }

                                    if (Trajectory_Optimization_Lat == 0.0 || Trajectory_Optimization_Lon == 0.0)
                                    {
                                        Trajectory_Optimization_Lat = AllAerocraftData.AutoWingLatitude;
                                        Trajectory_Optimization_Lon = AllAerocraftData.AutoWingLongitude;
                                    }
                                }
                                else
                                {
                                    if ((Current_Optimization_Flag - History_Optimization_Flag) > 1 && (AllAerocraftData.AutoWingCommunitationState - 2 - 1) >= 0)
                                    {
                                        History_Optimization_Flag = Current_Optimization_Flag;
                                        ///////////////////如果有方案的话直接强制赋值////////////////////////////
                                        if (WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2 - 1] > 0 && WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2 - 1] > 0)
                                        {
                                            Trajectory_Optimization_Lat = WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2 - 1];
                                            Trajectory_Optimization_Lon = WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2 - 1];
                                        }
                                        else//////////////////如果没有方案的话直接用实际的值
                                        {
                                            Trajectory_Optimization_Lat = AllAerocraftData.AutoWingLatitude;
                                            Trajectory_Optimization_Lon = AllAerocraftData.AutoWingLongitude;
                                        }

                                        UAVMarker_two.Position = new PointLatLng(Trajectory_Optimization_Lat, Trajectory_Optimization_Lon);
                                        UAVMarker_two.Azimuth = threeD_yawangle;//显示当前点的角度
                                        UAVRoute_two.Points.Add(UAVMarker.Position);
                                        UAVRoute_two.RegenerateShape(MainMap);


                                        if (WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2] > 0 && WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2] > 0)
                                        {
                                            Trajectory_Optimization_Lat = WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2];
                                            Trajectory_Optimization_Lon = WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2];
                                        }
                                        else//////////////////如果没有方案的话直接用实际的值
                                        {
                                            Trajectory_Optimization_Lat = AllAerocraftData.AutoWingLatitude;
                                            Trajectory_Optimization_Lon = AllAerocraftData.AutoWingLongitude;
                                        }


                                        UAVMarker_two.Position = new PointLatLng(Trajectory_Optimization_Lat, Trajectory_Optimization_Lon);
                                        UAVMarker_two.Azimuth = threeD_yawangle;//显示当前点的角度
                                        UAVRoute_two.Points.Add(UAVMarker.Position);
                                        UAVRoute_two.RegenerateShape(MainMap);
                                    }
                                    else
                                    {
                                        History_Optimization_Flag = Current_Optimization_Flag;
                                        if (WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2] > 0 && WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2] > 0)
                                        {
                                            Trajectory_Optimization_Lat = WayPoint_Lat[AllAerocraftData.AutoWingCommunitationState - 2];
                                            Trajectory_Optimization_Lon = WayPoint_Lon[AllAerocraftData.AutoWingCommunitationState - 2];
                                        }
                                        else
                                        {
                                            Trajectory_Optimization_Lat = AllAerocraftData.AutoWingLatitude;
                                            Trajectory_Optimization_Lon = AllAerocraftData.AutoWingLongitude;
                                        }
                                    }

                                }
                                lishi_lat = Trajectory_Optimization_Lat;
                                lishi_lon = Trajectory_Optimization_Lon;
                                UAVMarker_two.Position = new PointLatLng(Trajectory_Optimization_Lat, Trajectory_Optimization_Lon);
                                UAVMarker_two.Azimuth = threeD_yawangle;//显示当前点的角度
                                UAVRoute_two.Points.Add(UAVMarker.Position);
                                UAVRoute_two.RegenerateShape(MainMap);
                            }
                            else
                            {
                                UAVMarker_two.Position = new PointLatLng(AllAerocraftData.AutoWingLatitude, AllAerocraftData.AutoWingLongitude);
                                UAVMarker_two.Azimuth = threeD_yawangle;//显示当前点的角度
                                UAVRoute_two.Points.Add(UAVMarker.Position);
                                UAVRoute_two.RegenerateShape(MainMap);
                            }

                        }
                   // }
                    //else
                    //{
                    //    if (AllAerocraftData.AutoWingLatitude > 0)
                    //    {
                    //        UAVMarker.Position = new PointLatLng(AllAerocraftData.AutoWingLatitude, AllAerocraftData.AutoWingLongitude);
                    //        UAVMarker.Azimuth = threeD_yawangle;//显示当前点的角度
                    //        UAVRoute.Points.Add(UAVMarker.Position);
                    //        UAVRoute.RegenerateShape(MainMap);
                    //    }
                    //}

                }
                else//启用覆盖面的话就绘制覆盖面轨迹
                {
                    if (Show_Index.Text == "")
                    {
                        Start_Cover_Flag = false;
                        //    m_cover_check.IsChecked = false;
                        System.Windows.MessageBox.Show("The Radius Can Not Be Null");
                        return;
                    }

                    double Cover_Dis = Convert.ToDouble(Show_Index.Text);
                    Cover_Angle = Destination_Angle_Function_X(AllAerocraftData.AutoWingLatitude, AllAerocraftData.AutoWingLongitude);
                    double Cover_RadianAngle = (Cover_Angle * 3.1415926) / 180.0;
                    ////////////////////////////////当前点左边点/////////////////////////////////////////////////////////////////
                    double Left_lat_point = AllAerocraftData.AutoWingLatitude + (Cover_Dis / 2.0) * Math.Sin(Cover_RadianAngle) / m_dMeterPerDeg_Latitude;
                    double Left_lon_point = AllAerocraftData.AutoWingLongitude - (Cover_Dis / 2.0) * Math.Cos(Cover_RadianAngle) / m_dMeterPerDeg_Longitude;
                    ////////////////////////////////当前点右边点/////////////////////////////////////////////////////////////////
                    double Right_lat_point = AllAerocraftData.AutoWingLatitude - (Cover_Dis / 2.0) * Math.Sin(Cover_RadianAngle) / m_dMeterPerDeg_Latitude;
                    double Right_lon_point = AllAerocraftData.AutoWingLongitude + (Cover_Dis / 2.0) * Math.Cos(Cover_RadianAngle) / m_dMeterPerDeg_Longitude;
                    for (int i = 0; i < 4; i++)
                    {
                        if (i == 0)
                        {
                            UAVMarker.Position = new PointLatLng(AllAerocraftData.AutoWingLatitude, AllAerocraftData.AutoWingLongitude);
                            UAVMarker.Azimuth = threeD_yawangle;
                            UAVRoute.Points.Add(UAVMarker.Position);
                        }
                        if (i == 1)
                        {
                            UAVMarker.Position = new PointLatLng(Left_lat_point, Left_lon_point);
                            UAVMarker.Azimuth = threeD_yawangle;
                            UAVRoute.Points.Add(UAVMarker.Position);
                        }
                        if (i == 2)
                        {
                            UAVMarker.Position = new PointLatLng(Right_lat_point, Right_lon_point);
                            UAVMarker.Azimuth = threeD_yawangle;
                            UAVRoute.Points.Add(UAVMarker.Position);
                        }
                        if (i == 3)
                        {
                            UAVMarker.Position = new PointLatLng(AllAerocraftData.AutoWingLatitude, AllAerocraftData.AutoWingLongitude);
                            UAVMarker.Azimuth = threeD_yawangle;
                            UAVRoute.Points.Add(UAVMarker.Position);
                        }

                    }
                    UAVRoute.RegenerateShape(MainMap);
                }
                Altitude.WaypointAlt = AllAerocraftData.AutoWingAltitude;
            }
            //if (DrawTrack_Count < 1)
            //{
            //    test_lat = 31.9162754963;
            //    test_lon = 118.8053374789;
            //    MainMap.Position = new PointLatLng(test_lat, test_lon);
            //    UAVMarker.Position = new PointLatLng(test_lat, test_lon);
            //    //　Home位置
            //    HomeMarker.Position = new PointLatLng(test_lat, test_lon);
            //    UAVRoute.Points.Add(UAVMarker.Position);
            //    UAVRoute.RegenerateShape(MainMap);
            //    Cover_Angle = Destination_Angle_Function_X(test_lat, test_lon);
            //    DrawTrack_Count = DrawTrack_Count + 1;
            //}
            //else
            //{
            //    // 轨迹显示
            //    /*  while (UAVRoute.Points.Count > (SettingData.TrajectoryLength * 60 * 10))
            //      {
            //          UAVRoute.Points.RemoveAt(0);
            //      }*/

            //    if (!Start_Cover_Flag)//没有启用覆盖面的的话就默认画轨迹
            //    {
            //        test_lat = test_lat + 0.000006;
            //        UAVMarker.Position = new PointLatLng(test_lat, test_lon);
            //        UAVMarker.Azimuth = threeD_yawangle;//显示当前点的角度
            //        UAVRoute.Points.Add(UAVMarker.Position);
            //        UAVRoute.RegenerateShape(MainMap);
            //    }
            //    else
            //    {
            //        if (Show_Index.Text == "")
            //        {
            //            Start_Cover_Flag = false;
            //            m_cover_check.IsChecked = false;
            //            System.Windows.MessageBox.Show("喷洒半径不能为空");
            //            return;
            //        }
            //        if (test_right_count < 50)
            //        {
            //            //   test_lon = test_lon + 0.000006;
            //            test_lat = test_lat + 0.000006;
            //            test_right_count++;
            //        }
            //        else if (test_right_count >= 50 && test_right_count < 70)
            //        {
            //            //   test_lat = test_lat - 0.000006;
            //            test_lon = test_lon + 0.000006;
            //            test_right_count++;
            //        }
            //        else if (test_right_count >= 70 && test_right_count < 170)
            //        {
            //            //      test_lon = test_lon - 0.000006;
            //            test_lat = test_lat - 0.000006;
            //            test_right_count++;
            //        }
            //        else if (test_right_count >= 170 && test_right_count < 190)
            //        {
            //            //      test_lat = test_lat + 0.000006;
            //            test_lon = test_lon + 0.000006;
            //            test_right_count++;
            //        }
            //        else
            //        {
            //            test_right_count = 0;
            //        }

            //        //  test_lon = test_lon - 0.000001;
            //        double Cover_Dis = Convert.ToDouble(Show_Index.Text);
            //        Cover_Angle = Destination_Angle_Function_X(test_lat, test_lon);
            //        double Cover_RadianAngle = (Cover_Angle * 3.1415926) / 180.0;
            //    /************************************************************当出现断点的情况***********************************************/

            //    /***************************************************************************************************************************/
            //        ////////////////////////////////当前点左边点/////////////////////////////////////////////////////////////////
            //        double Left_lat_point = test_lat + (Cover_Dis / 2.0) * Math.Sin(Cover_RadianAngle) / m_dMeterPerDeg_Latitude;
            //        double Left_lon_point = test_lon - (Cover_Dis / 2.0) * Math.Cos(Cover_RadianAngle) / m_dMeterPerDeg_Longitude;
            //        ////////////////////////////////当前点右边点/////////////////////////////////////////////////////////////////
            //        double Right_lat_point = test_lat - (Cover_Dis / 2.0) * Math.Sin(Cover_RadianAngle) / m_dMeterPerDeg_Latitude;
            //        double Right_lon_point = test_lon + (Cover_Dis / 2.0) * Math.Cos(Cover_RadianAngle) / m_dMeterPerDeg_Longitude;
            //        for (int i = 0; i < 4; i++)
            //        {
            //            if (i == 0)
            //            {
            //                UAVMarker.Position = new PointLatLng(test_lat, test_lon);
            //                UAVMarker.Azimuth = threeD_yawangle;
            //                UAVRoute.Points.Add(UAVMarker.Position);
            //            }
            //            if (i == 1)
            //            {
            //                UAVMarker.Position = new PointLatLng(Left_lat_point, Left_lon_point);
            //                UAVMarker.Azimuth = threeD_yawangle;
            //                UAVRoute.Points.Add(UAVMarker.Position);
            //            }
            //            if (i == 2)
            //            {
            //                UAVMarker.Position = new PointLatLng(Right_lat_point, Right_lon_point);
            //                UAVMarker.Azimuth = threeD_yawangle;
            //                UAVRoute.Points.Add(UAVMarker.Position);
            //            }
            //            if (i == 3)
            //            {
            //                UAVMarker.Position = new PointLatLng(test_lat, test_lon);
            //                UAVMarker.Azimuth = threeD_yawangle;
            //                UAVRoute.Points.Add(UAVMarker.Position);
            //            }

            //        }
            //        UAVRoute.RegenerateShape(MainMap);
            //    }
            //    Altitude.WaypointAlt = AllAerocraftData.AutoWingAltitude;
            //}
        }

        /// <summary>
        /// 计算飞行的角度
        /// </summary>
        /// <returns></returns>
        float Destination_Angle_Function_X(double Tace_lat, double Tace_lon)
        {
            if (design_flag_X == 0)
            {
                if (Tace_lat > 10)
                {
                    design_flag_X = 1;
                    if (second_la_X == 0)
                    {
                        first_la_X = Tace_lat;
                        first_lo_X = Tace_lon;
                    }
                    else
                    {
                        first_la_X = second_la_X;
                        first_lo_X = second_lo_X;
                    }
                }

            }
            else
            {
                second_la_X = Tace_lat;
                second_lo_X = Tace_lon;
                if (System.Math.Abs((first_la_X - second_la_X)) > 0.000006 || System.Math.Abs((first_lo_X - second_lo_X)) > 0.000006)
                {
                    design_flag_X = 0;
                    angle = Rotation_Angle_X(first_la_X, first_lo_X, second_la_X, second_lo_X);
                }
            }
            return angle;
        }
        float Rotation_Angle_X(double first_destination_la, double first_destination_lo, double second_destination_la, double second_destination_lo)
        {
            float Actual_angle = (float)0.0;
            double Actual_C = 0.0;
            double Actual_A = 0.0;

            Actual_C = Math.Cos((90 - second_destination_la) * 3.1415926 / 180.0) * Math.Cos((90 - first_destination_la) * 3.1415926 / 180.0) + Math.Sin((90 - second_destination_la) * 3.1415926 / 180.0) * Math.Sin((90 - first_destination_la) * 3.1415926 / 180.0) * Math.Cos((second_destination_lo - first_destination_lo) * 3.1415926 / 180.0);
            Actual_A = Math.Sqrt((1 - Actual_C * Actual_C));
            if (Actual_A != 0)
            {
                Actual_angle = (float)Math.Asin(((Math.Sin((90 - second_destination_la) * 3.1415926 / 180.0)) * Math.Sin((second_destination_lo - first_destination_lo) * 3.1415926 / 180.0)) / Actual_A);

                Actual_angle = (float)(Actual_angle * 180.0 / 3.1415926);
                ////////////////////////////////四个象限/////////////////////////////////////////////////////////////
                if (second_destination_la > first_destination_la && second_destination_lo > first_destination_lo)
                {
                    Actual_angle = -Actual_angle;
                }
                if (second_destination_la < first_destination_la && second_destination_lo > first_destination_lo)
                {
                    Actual_angle = -180 + Actual_angle;
                }
                if (second_destination_la < first_destination_la && second_destination_lo < first_destination_lo)
                {
                    Actual_angle = 180 + Actual_angle;
                }
                if (second_destination_la > first_destination_la && second_destination_lo < first_destination_lo)
                {
                    Actual_angle = -Actual_angle;
                }
                ///////////////////////////////四个象限////////////////////////////////////////////////////////////////
            }
            if (second_destination_la == first_destination_la && second_destination_lo >= first_destination_lo)
            {
                //Actual_angle = -90;
                Actual_angle = -90;
            }
            if (second_destination_la == first_destination_la && second_destination_lo <= first_destination_lo)
            {
                // Actual_angle = 90;
                Actual_angle = 90;
            }
            if (second_destination_la >= first_destination_la && second_destination_lo == first_destination_lo)
            {
                Actual_angle = 0;
            }
            if (second_destination_la <= first_destination_la && second_destination_lo == first_destination_lo)
            {
                Actual_angle = 180;
            }
            if (Actual_angle > 0 && Actual_angle < 180)
            {
                Actual_angle = 360 - Actual_angle;
            }
            if (Actual_angle > -180 && Actual_angle < 0)
            {
                Actual_angle = -Actual_angle;
            }
            if (Actual_angle == -180 || Actual_angle == 180)
            {
                Actual_angle = 180;
            }
            return Actual_angle;
            //return (float)(Actual_angle * 3.1415926 / 180);
        }
        /// <summary>
        /// 保存所有数据
        /// </summary>
        private void Save_All_Data()
        {
            ShowDataClass Save_AllAerocraftData = new ShowDataClass();
            Copy_Function(Save_AllAerocraftData);
            list_Save_Data.Add(Save_AllAerocraftData);
        }
        public void Copy_Function(ShowDataClass Save_AllAerocraftData)
        {

            Save_AllAerocraftData.Roll = AllAerocraftData.Roll;//Roll1

            Save_AllAerocraftData.Pitch = AllAerocraftData.Pitch;//pitch2

            Save_AllAerocraftData.Yaw = AllAerocraftData.Yaw;//Yaw3

            Save_AllAerocraftData.P = AllAerocraftData.P;//rollrate4

            Save_AllAerocraftData.Q = AllAerocraftData.Q;//pitchrate5

            Save_AllAerocraftData.R = AllAerocraftData.R;//yawrate6

            Save_AllAerocraftData.XAcc = AllAerocraftData.XAcc;//xacc7

            Save_AllAerocraftData.YAcc = AllAerocraftData.YAcc;//yacc8

            Save_AllAerocraftData.ZAcc = AllAerocraftData.ZAcc;//zacc9

            Save_AllAerocraftData.XMag = AllAerocraftData.XMag;//magx10

            Save_AllAerocraftData.YMag = AllAerocraftData.YMag;//magy11

            Save_AllAerocraftData.ZMag = AllAerocraftData.ZMag;//magz12

            Save_AllAerocraftData.LRoll = AllAerocraftData.LRoll;//prop_roll13

            Save_AllAerocraftData.LPitch = AllAerocraftData.LPitch;//prop_pitch14

            Save_AllAerocraftData.LYaw = AllAerocraftData.LYaw;//prop_yaw15

            Save_AllAerocraftData.LPower = AllAerocraftData.LPower;//prop_throttle16

            Save_AllAerocraftData.BSw1 = AllAerocraftData.BSw1;//Stitch_A17

            Save_AllAerocraftData.BSw2 = AllAerocraftData.BSw2;//Switch_B18

            Save_AllAerocraftData.BSw3 = AllAerocraftData.BSw3;//Switch_C19

            Save_AllAerocraftData.BSw4 = AllAerocraftData.BSw4;//Switch_D20

            Save_AllAerocraftData.Motor_F = AllAerocraftData.Motor_F;//Motor_M121

            Save_AllAerocraftData.Motor_B = AllAerocraftData.Motor_B;//Motor_M222

            Save_AllAerocraftData.Motor_L = AllAerocraftData.Motor_L;//Motor_M323

            Save_AllAerocraftData.Motor_R = AllAerocraftData.Motor_R;//Motor_M424

            Save_AllAerocraftData.Motor_X = AllAerocraftData.Motor_X;//Motor_M525

            Save_AllAerocraftData.Motor_Y = AllAerocraftData.Motor_Y;//Motor_M626

            Save_AllAerocraftData.AutoWingTransverseVelocity = AllAerocraftData.AutoWingTransverseVelocity;//GPS_Vn27

            Save_AllAerocraftData.AutoWingLongitudinalVelocity = AllAerocraftData.AutoWingLongitudinalVelocity;//GPS_Ve28

            Save_AllAerocraftData.AutoWingUpAndDownVelocity = AllAerocraftData.AutoWingUpAndDownVelocity;//GPS_Vd29
            Save_AllAerocraftData.AutoWingLongitude = AllAerocraftData.AutoWingLongitude;//GPS_Lon30
            Save_AllAerocraftData.AutoWingLatitude = AllAerocraftData.AutoWingLatitude;//GPS_Lat 31

            Save_AllAerocraftData.AutoWingAltitude = AllAerocraftData.AutoWingAltitude;//GPS_Alt332

            Save_AllAerocraftData.GPS_Heading = AllAerocraftData.GPS_Heading;//GPS_Heading33

            Save_AllAerocraftData.AutoWingStarNum = AllAerocraftData.AutoWingStarNum;//GPS_StarNum34

            Save_AllAerocraftData.New_GPS_Dop = AllAerocraftData.New_GPS_Dop;//GPS_Dop35

            Save_AllAerocraftData.New_Bara_Alt = AllAerocraftData.New_Bara_Alt;//bara_Alt336

            Save_AllAerocraftData.AutoWingVoltValue = AllAerocraftData.AutoWingVoltValue;//Battery37

            Save_AllAerocraftData.AutoWingFlightMode = AllAerocraftData.AutoWingFlightMode;//Flight_Mode38

            Save_AllAerocraftData.AutoWingSensorState = AllAerocraftData.AutoWingSensorState;//IMU_State39

            Save_AllAerocraftData.AutoWingCommunitationState = AllAerocraftData.AutoWingCommunitationState;//Health_State40

            Save_AllAerocraftData.New_Data1_Undefined1 = AllAerocraftData.New_Data1_Undefined1;//待定值141

            Save_AllAerocraftData.New_Data1_Undefined2 = AllAerocraftData.New_Data1_Undefined2;//待定值242

            Save_AllAerocraftData.New_Data1_Undefined3 = AllAerocraftData.New_Data1_Undefined3;//待定值343

            Save_AllAerocraftData.New_Data1_Undefined4 = AllAerocraftData.New_Data1_Undefined4;//待定值444

            Save_AllAerocraftData.New_Data1_Undefined5 = AllAerocraftData.New_Data1_Undefined5;//待定值545



            Save_AllAerocraftData.New_Frame_Type = AllAerocraftData.New_Frame_Type;//Frame_Type

            Save_AllAerocraftData.New_Motor_Starting_Percent = AllAerocraftData.New_Motor_Starting_Percent;//Motor_Starting_Percent

            Save_AllAerocraftData.New_Param_Headfile_Num = AllAerocraftData.New_Param_Headfile_Num;//Param_Headfile_Num

            Save_AllAerocraftData.XbeeRecv = AllAerocraftData.XbeeRecv;


            Save_AllAerocraftData.New_Vesion_AP = AllAerocraftData.New_Vesion_AP;//Vesion_AP

            Save_AllAerocraftData.New_Vesion_IMU = AllAerocraftData.New_Vesion_IMU;//Vesion_IMU

            Save_AllAerocraftData.AutoWing_Tasete_Hour = AllAerocraftData.AutoWing_Tasete_Hour;//Cumlative_Hour

            Save_AllAerocraftData.AutoWing_Tasete_Second = AllAerocraftData.AutoWing_Tasete_Second;//Cumlative_Second

            Save_AllAerocraftData.AutoWingDataPacket = AllAerocraftData.AutoWingDataPacket;//Waypoint_Group

            Save_AllAerocraftData.AutoWingMarkerNums = AllAerocraftData.AutoWingMarkerNums;//Waypoint_Size

            Save_AllAerocraftData.AutoWingWhichMarker = AllAerocraftData.AutoWingWhichMarker;//Waypoint_Num

            Save_AllAerocraftData.Hangpaizhibao_Value = AllAerocraftData.Hangpaizhibao_Value;//Hangpaizhibao_Value

            Save_AllAerocraftData.PlantProtectOperation = AllAerocraftData.PlantProtectOperation;//PlantProtectOperation

            Save_AllAerocraftData.Arialphotoparam = AllAerocraftData.Arialphotoparam;//Arialphotoparam

            Save_AllAerocraftData.Anquancelue_Code = AllAerocraftData.Anquancelue_Code;//Anquancelue_Code

            Save_AllAerocraftData.Anquancelue_Value = AllAerocraftData.Anquancelue_Value;//Anquancelue_Value

            Save_AllAerocraftData.basicflightparam = AllAerocraftData.basicflightparam;//basicflightparam


            Save_AllAerocraftData.AutoWingDestinationLongitude = AllAerocraftData.AutoWingDestinationLongitude;//AutoWingDestinationLongitude

            Save_AllAerocraftData.AutoWingDestinationLatitude = AllAerocraftData.AutoWingDestinationLatitude;//AutoWingDestinationLatitude

            Save_AllAerocraftData.ref_position = AllAerocraftData.ref_position;//ref_position

            Save_AllAerocraftData.velocityreference_vn = AllAerocraftData.velocityreference_vn;//velocityreference_vn

            Save_AllAerocraftData.velocityreference_ve = AllAerocraftData.velocityreference_ve;//velocityreference_ve

            Save_AllAerocraftData.attitudereference_roll = AllAerocraftData.attitudereference_roll;//attitudereference_roll

            Save_AllAerocraftData.attitudereference_pitch = AllAerocraftData.attitudereference_pitch;//attitudereference_pitch

            Save_AllAerocraftData.stabillizeref_roll = AllAerocraftData.stabillizeref_roll;//stabillizeref_roll

            Save_AllAerocraftData.stabillizeref_pitch = AllAerocraftData.stabillizeref_pitch;//stabillizeref_pitch

            Save_AllAerocraftData.attitude_yaw = AllAerocraftData.attitude_yaw;//attitude_yaw

            Save_AllAerocraftData.feedback_yaw = AllAerocraftData.feedback_yaw;//feedback_yaw

            Save_AllAerocraftData.stabillizeref_yaw = AllAerocraftData.stabillizeref_yaw;//stabillizeref_yaw

            Save_AllAerocraftData.motor_roll = AllAerocraftData.motor_roll;//motor_roll

            Save_AllAerocraftData.motor_pitch = AllAerocraftData.motor_pitch;//motor_pitch

            Save_AllAerocraftData.motor_yaw = AllAerocraftData.motor_yaw;//motor_yaw

            Save_AllAerocraftData.ref_alt = AllAerocraftData.ref_alt;//ref_alt

            Save_AllAerocraftData.altvel = AllAerocraftData.altvel;//altvel

            Save_AllAerocraftData.feedback_vd = AllAerocraftData.feedback_vd;//feedback_vd

            Save_AllAerocraftData.stabillizeref_throttle = AllAerocraftData.stabillizeref_throttle;//stabillizeref_throttle

            Save_AllAerocraftData.motor_m7 = AllAerocraftData.motor_m7;//motor_m7

            Save_AllAerocraftData.motor_m8 = AllAerocraftData.motor_m8;//motor_m8

            Save_AllAerocraftData.motor_m9 = AllAerocraftData.motor_m9;//motor_m9

            Save_AllAerocraftData.motor_m10 = AllAerocraftData.motor_m10;//motor_m10

            Save_AllAerocraftData.New_Data2_Undefined1 = AllAerocraftData.New_Data2_Undefined1;//Undefined5
            Save_AllAerocraftData.New_Data2_Undefined2 = AllAerocraftData.New_Data2_Undefined2;//Undefined5
            Save_AllAerocraftData.New_Data2_Undefined3 = AllAerocraftData.New_Data2_Undefined3;//Undefined5
            Save_AllAerocraftData.New_Data2_Undefined4 = AllAerocraftData.New_Data2_Undefined4;//Undefined5
            Save_AllAerocraftData.New_Data2_Undefined5 = AllAerocraftData.New_Data2_Undefined5;//Undefined5
        }
        private void HealthDataUpdate()
        {
            try
            {
                if (Dwindow.IsEnabled)
                {
                    Dwindow.Background = this.Background;
                    Dwindow.HealthDataSetting = DataConstellation.BindingData.Health;
                }
            }
            catch (Exception ex)
            {
                //System.Windows.MessageBox.Show("(502) HealthData Update Error: " + ex.Message);
                _logger.Error("(502) HealthData Update Error: " + ex.Message);
            }
        }
        private void OptionDataUpdate(bool ResultUpdate)
        {
            try
            {
                // ================================================================================
                //　选项屏幕
                #region 选项屏幕
                if (!OptionWindowEvent)
                {
                    //已用时间
                    double time = (double)sw.Elapsed.Hours * 3600;  //時
                    time += (double)sw.Elapsed.Minutes * 60;        //分
                    time += (double)sw.Elapsed.Seconds;             //秒
                    time += (double)sw.Elapsed.Milliseconds / 1000; //ミリ秒
                    //			double _cpu = pc.NextValue();
                    //Debug.Write(sw.Elapsed + "/" + time.ToString() + "   CPU使用率:" + (pc.NextValue()).ToString() + "%\n");

                    for (int i = 0; i < Container.Children.Count; i++)
                    {
                        if (OptionWindowEvent)
                        {
                            break; //　跳过屏幕更改选项
                        }

                        #region WaypointWindow
                        if (Container.Children[i].Content.GetType() == typeof(WaypointWindow))
                        {
                            // Waypoint　UAV目标位置
                            if (WaypointCount > 0)
                            {
                                // 更新
                                WaypointWindow Child = (WaypointWindow)Container.Children[i].Content;
                                Child.isEnable = true;
                                Child.GpsModule = GpsModule;

                                GPSMode = Child._mode;

                                // Waypoint屏幕上更新
                                PointData WaypointInput = new PointData();

                                if (Child.WaypointUpdate)
                                {
                                    WaypointMarker.Altitude = Altitude.WaypointAlt = Child.Waypoint.Alt;
                                    WaypointMarker.Position = new PointLatLng(Child.Waypoint.Lat, Child.Waypoint.Lon);
                                    WaypointMarker.Azimuth = Child.Waypoint.Yaw;
                                    WaypointMarker.Speed = Child.Waypoint.Speed;
                                    WaypointSpeedValue((string)PosSpd.Content);
                                    Child.WaypointUpdate = false;           //Waypoint输入中止
                                    Debug.WriteLine("输入更新：" + Child.Waypoint.Yaw.ToString());
                                }
                                else
                                {
                                    WaypointInput.Alt = WaypointMarker.Altitude = Altitude.WaypointAlt;
                                    WaypointInput.Lat = WaypointMarker.Position.Lat;
                                    WaypointInput.Lon = WaypointMarker.Position.Lng;
                                    WaypointInput.Yaw = WaypointMarker.Azimuth;
                                    WaypointInput.Speed = WaypointMarker.Speed;
                                    Child.Waypoint = WaypointInput;
                                    // 反映
                                    Container.Children[i].Content = Child;  // Waypoint画面更新
                                }

                                Child.Home = DataConstellation.BindingData.Homepoint;
                                // UAV当前位置
                                Child.UAVData = DataConstellation.BindingData.UAVpoint;

                            }
                            else
                            {
                                // 更新

                                ///////////////////////////////////////1、判断有没有添加marker点////////////////////////////////////////////////////////////////
                                ///////////////////////////////////////2、有添加的话，获取是哪一个marker点 将属性框设置为true//////////////////////////////////////////////////////
                                ///////////////////////////////////////3、将marker点的相关数据在属性框中显示////////////////////////////////////////////////////
                                WaypointWindow Child = (WaypointWindow)Container.Children[i].Content;
                                //Child.Waypoint.mm_IMUDataRoll = AllAerocraftData.Roll;
                                //Child.Waypoint.mm_IMUDataPitch = AllAerocraftData.Pitch;
                                //Child.Waypoint.mm_IMUDataYaw = AllAerocraftData.Yaw;
                                //Child.Waypoint.mm_GyroDataRollRate = AllAerocraftData.P;
                                //Child.Waypoint.mm_GyroDataPitchRate = AllAerocraftData.Q;
                                //Child.Waypoint.mm_GyroDataYawRate = AllAerocraftData.R;
                                //Child.Waypoint.mm_AccDataX = AllAerocraftData.XAcc;
                                //Child.Waypoint.mm_AccDataY = AllAerocraftData.YAcc;
                                //Child.Waypoint.mm_AccDataZ = AllAerocraftData.ZAcc;
                                //Child.Waypoint.mm_MagDataX = AllAerocraftData.XMag;
                                //Child.Waypoint.mm_MagDataY = AllAerocraftData.YMag;
                                //Child.Waypoint.mm_MagDataZ = AllAerocraftData.ZMag;
                                Container.Children[i].Content = Child;  // Waypoint屏幕更新
                            }
                        }
                        #endregion

                        #region ModelWindow
                        else if (Container.Children[i].Content.GetType() == typeof(ModelWindow))
                        {
                            ModelWindow Child = (ModelWindow)Container.Children[i].Content;
                            Child.RotateModel(DataConstellation.BindingData.UAVpoint.Roll, -DataConstellation.BindingData.UAVpoint.Pitch, DataConstellation.BindingData.UAVpoint.Yaw);
                            Container.Children[i].Content = Child;           // 跟新模型屏幕
                        }
                        #endregion

                        #region ChartWindow
                        else if (Container.Children[i].Content.GetType() == typeof(ChartWindow))
                        {
                            ChartWindow Child = (ChartWindow)Container.Children[i].Content;
                            Child.isEnable = true;
                            //////////////////////////////////////////////////////////////
                            // プロット

                            //if (ResultUpdate)
                            {
                                #region Chart
                                if (Child.PlotEditable)
                                {
                                    for (int j = 0; j < DataConstellation.BindingData.PlotWindow[i].PlotName.Count; j++)
                                    {
                                        int match = DataConstellation.BindingData.PlotWindow[i].PlotName[j].CompareTo("CPU使用率");

                                        if (match == 0)
                                        {
                                            //		DataConstellation.BindingData.PlotWindow[i].PlotValue[j] = _cpu;
                                        }


                                        if (DataConstellation.CommandMode == 1)
                                        {
                                            //UAV操作模式（当前时刻）
                                            int Name_Match_Roll = DataConstellation.BindingData.PlotWindow[i].PlotName[j].CompareTo("IMU/Att[@t=\"R3\"][@i=\"0\"]");
                                            if (Name_Match_Roll == 0)
                                            {
                                                DataConstellation.BindingData.PlotWindow[i].PlotValue[j] = AllAerocraftData.Roll;
                                                Child.PlotUpdate(j, new System.Windows.Point(time, DataConstellation.BindingData.PlotWindow[i].PlotValue[j]));
                                            }
                                            int Name_Match_Pitch = DataConstellation.BindingData.PlotWindow[i].PlotName[j].CompareTo("IMU/Att[@t=\"R3\"][@i=\"1\"]");
                                            if (Name_Match_Pitch == 0)
                                            {
                                                DataConstellation.BindingData.PlotWindow[i].PlotValue[j] = AllAerocraftData.Pitch;
                                                Child.PlotUpdate(j, new System.Windows.Point(time, DataConstellation.BindingData.PlotWindow[i].PlotValue[j]));
                                            }
                                            int Name_Match_Yaw = DataConstellation.BindingData.PlotWindow[i].PlotName[j].CompareTo("IMU/Att[@t=\"R3\"][@i=\"2\"]");
                                            if (Name_Match_Yaw == 0)
                                            {
                                                DataConstellation.BindingData.PlotWindow[i].PlotValue[j] = AllAerocraftData.Yaw;
                                                Child.PlotUpdate(j, new System.Windows.Point(time, DataConstellation.BindingData.PlotWindow[i].PlotValue[j]));
                                            }
                                        }
                                        else
                                        {
                                            //重新开始（重置时间）
                                            Child.PlotUpdate(j, new System.Windows.Point(DataConstellation.BindingData.CurrentTime, DataConstellation.BindingData.PlotWindow[i].PlotValue[j]));
                                        }


                                        //Debug.WriteLine("[{0}]PlotData:[{1}:{2}]  {3}\n ",time.ToString(), i.ToString(), j.ToString(), DataConstellation.BindingData.PlotWindow[i].PlotValue[j].ToString());
                                    }
                                }
                                else
                                {
                                    // 当按清除按钮下的图表显示
                                    DataConstellation.BindingData.PlotWindow[i].PlotName.Clear();
                                    DataConstellation.BindingData.PlotWindow[i].PlotValue.Clear();
                                    Child.PlotEditable = true;    //Plot有效
                                }

                                //////////////////////////////////////////////////////////////
                                // 选择您想要绘制在图表中的数据
                                if (DataConstellation.BindingData.PlotWindow.Count > 0)
                                {
                                    if (Child.SelectedIndex != -1)
                                    {
                                        if (Child.PlotDataSelectList.Count > 0)
                                        {
                                            foreach (var _plot in Child.PlotDataSelectList)
                                            {
                                                DataConstellation.BindingData.PlotWindow[i].PlotName.Add(_plot);     // 选择绘图数据
                                                DataConstellation.BindingData.PlotWindow[i].PlotValue.Add(0);                       // 添加初始状态
                                            }
                                            Child.SelectedIndex = -1;
                                        }

                                    }
                                }
                                #endregion
                            }
                            Container.Children[i].Content = Child;// 更新图表画面
                        }
                        #endregion
                        #region versionwindow
                        else if (Container.Children[i].Content.GetType() == typeof(Version_Info_Show))
                        {
                            Version_Info_Show Child = (Version_Info_Show)Container.Children[i].Content;
                            Child.Function_AllVersion_Show();
                        }
                        #endregion
                        #region Index_Set
                        else if (Container.Children[i].Content.GetType() == typeof(Index_SoftWare_Set))
                        {
                            Index_SoftWare_Set Child = (Index_SoftWare_Set)Container.Children[i].Content;
                            int Attitute_State = 0;
                            if ((AllAerocraftData.Roll >= (-3.1415926 / 2.0)) && (AllAerocraftData.Roll <= (3.1415926 / 2.0)) ||
                                (AllAerocraftData.Pitch >= (-3.1415926 / 2.0)) && (AllAerocraftData.Pitch <= (3.1415926 / 2.0)) ||
                                (AllAerocraftData.Yaw >= (-3.1415926)) && (AllAerocraftData.Yaw <= (3.1415926)))
                            {
                                Attitute_State = 0;
                            }
                            else
                            {
                                Attitute_State = 1;
                            }
                            Child.Function_AllStateShow(AllAerocraftData.AutoWingVoltValue, AllAerocraftData.AutoWingStarNum, AllAerocraftData.AutoWingSensorState, Constants.Show_UAV_ZhiBaoFuDu, Constants.Show_UAV_Noticeheight, Constants.Show_UAV_ZhiBaoSpeed, Constants.Show_UAV_Noticedistance, Attitute_State, threeD_yawangle, (int)AllAerocraftData.Hangpaizhibao_Value);
                            if (AllAerocraftData.SuccessOrFail == 2)
                            {
                                Child.Function_YKQJZ();
                            }
                            Child.Function_YKQ_LEFT();
                            Child.Function_YKQ_RIGHT();
                            ///////////////////////////////////////////中点修正函数//////////////////////////////////////////////////////////////////////////////
                            Child.Function_YKQ_MiddleModify_LEFT();
                            Child.Function_YKQ_MiddleModify_RIGHT();
                            //////////////////////////////////////////////////////////遥控器校准first_step校准开始/////////////////////////////////////////////////
                            if (Constants.AutoWing_Tel_Control_flag == 1 && AllAerocraftData.SuccessOrFail != 2 && AllAerocraftData.SuccessOrFail != 1)
                            {
                                Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                                if (Wifi_Success_Connect_Flag == true)
                                {
                                    Wait_TenSeconds_Function();//超时停止
                                    wifi_SendAutoykqjz_Start(Constants.AutoWing_Tel_Steps, Constants.AutoWing_Tel_StepsValue);//发送遥控器校准开始指令
                                }
                                else if (Dat_Save_Flag == 1)
                                {
                                    Wait_TenSeconds_Function();//超时停止
                                    Port.SendAutoykqjz_Start(Constants.AutoWing_Tel_Steps, Constants.AutoWing_Tel_StepsValue);
                                }
                                else
                                {
                                    Constants.AutoWing_Tel_Control_flag = 0;
                                    Constants.Jump_To5or50Hz_Flag = 0;
                                    System.Windows.MessageBox.Show("Disconnect");
                                }
                            }
                            else if (Constants.AutoWing_Tel_Control_flag == 1 && (AllAerocraftData.SuccessOrFail == 2 || AllAerocraftData.SuccessOrFail == 1))
                            {
                                Constants.AutoWing_Tel_Control_flag = 0;
                                Thread.Sleep(1000);//次线程休眠1秒
                                this.Dispatcher.Invoke(new Action(delegate
                                {
                                    dlg.Close();
                                }));
                                TenSeconds_Count = 0;
                                System.Windows.MessageBox.Show("遥控器校准开始");
                            }
                            ///////////////////////////////////////////遥控器校准second_step进入下一步//////////////////////////////////////////////////////////////////////////
                            if (Constants.AutoWing_Tel_Finish_flag == 1 && (AllAerocraftData.SuccessOrFail != 4 && AllAerocraftData.SuccessOrFail != 5))//反馈的校准成功是4，失败是5
                            {
                                Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                                if (Wifi_Success_Connect_Flag == true)
                                {
                                    Wait_TenSeconds_Function();//超时停止
                                    wifi_SendAutoykqjz_Start(Constants.AutoWing_Tel_Steps, Constants.AutoWing_Tel_StepsValue);//发送遥控器校准开始指令
                                }
                                else if (Dat_Save_Flag == 1)
                                {
                                    Wait_TenSeconds_Function();//超时停止
                                    Port.SendAutoykqjz_Start(Constants.AutoWing_Tel_Steps, Constants.AutoWing_Tel_StepsValue);
                                }
                                else
                                {
                                    Constants.AutoWing_Tel_Finish_flag = 0;
                                    Constants.Jump_To5or50Hz_Flag = 0;
                                    System.Windows.MessageBox.Show("Disconnect");
                                }
                            }
                            else if (Constants.AutoWing_Tel_Finish_flag == 1 && (AllAerocraftData.SuccessOrFail == 4 || AllAerocraftData.SuccessOrFail == 5))
                            {
                                Constants.AutoWing_Tel_Finish_flag = 0;
                                Thread.Sleep(1000);//次线程休眠1秒
                                this.Dispatcher.Invoke(new Action(delegate
                                {
                                    dlg.Close();
                                }));
                                TenSeconds_Count = 0;
                                if (AllAerocraftData.SuccessOrFail == 4)
                                {
                                    Child.Jump_Ykq_Sure();//跳转到中点修正界面
                                }
                                if (AllAerocraftData.SuccessOrFail == 5)
                                {
                                    Show_Fail_Style = 1;
                                    Constants.AutoWing_Tel_Steps = 10;//跳转到校准结束
                                    Constants.AutoWing_Tel_StepsValue = 0;//正反方向为0这个时候是不考虑的
                                    Constants.AutoWing_Tel_Makesure_flag = 1;
                                    System.Windows.MessageBox.Show("遥控器校准失败请点击校准开始重新校准");
                                }
                            }
                            //////////////////////////////////////////////////////////遥控器校准third_step中点修正/////////////////////////////////////////////////
                            if (Constants.AutoWing_Tel_Modifymiddle_Flag == 1 && AllAerocraftData.SuccessOrFail != 7 && AllAerocraftData.SuccessOrFail != 8)
                            {
                                Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                                if (Wifi_Success_Connect_Flag == true)
                                {
                                    Wait_TenSeconds_Function();//超时停止
                                    wifi_SendAutoykqjz_Start(Constants.AutoWing_Tel_Steps, Constants.AutoWing_Tel_StepsValue);//发送遥控器校准开始指令
                                }
                                else if (Dat_Save_Flag == 1)
                                {
                                    Wait_TenSeconds_Function();//超时停止
                                    Port.SendAutoykqjz_Start(Constants.AutoWing_Tel_Steps, Constants.AutoWing_Tel_StepsValue);
                                }
                                else
                                {
                                    Constants.AutoWing_Tel_Modifymiddle_Flag = 0;
                                    Constants.Jump_To5or50Hz_Flag = 0;
                                    System.Windows.MessageBox.Show("Disconnect");
                                }
                            }
                            else if (Constants.AutoWing_Tel_Modifymiddle_Flag == 1 && (AllAerocraftData.SuccessOrFail == 7 || AllAerocraftData.SuccessOrFail == 8))
                            {
                                Constants.AutoWing_Tel_Modifymiddle_Flag = 0;
                                Thread.Sleep(1000);//次线程休眠1秒
                                this.Dispatcher.Invoke(new Action(delegate
                                {
                                    dlg.Close();
                                }));
                                TenSeconds_Count = 0;
                                if (AllAerocraftData.SuccessOrFail == 7)
                                {
                                    Child.Function_YKQ_CHANGENEXTSTEP();   //这边要加改变退出按钮为下一步按钮
                                    System.Windows.MessageBox.Show("Modify The Middle Point Success");

                                }
                                if (AllAerocraftData.SuccessOrFail == 8)
                                {
                                    Constants.AutoWing_Tel_ReModifymiddle_Flag = 1;
                                    Constants.AutoWing_Tel_Steps = 4;
                                    //显示中点修正失败请调整遥控器摇杆位置重新校准或退出
                                    System.Windows.MessageBox.Show("Mid Point Correction Failure Please Adjust The Remote Control Rocker Position To Revise Or Exit");
                                }

                            }
                            if (Constants.AutoWing_Tel_ReModifymiddle_Flag == 1 && AllAerocraftData.SuccessOrFail != 4)
                            {
                                //////这一步的跳转在点击按钮的时候跳转/////////////////////////////
                                Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                                if (Wifi_Success_Connect_Flag == true)
                                {
                                    wifi_SendAutoykqjz_Start(Constants.AutoWing_Tel_Steps, Constants.AutoWing_Tel_StepsValue);//发送遥控器方向确认命令
                                }
                                else if (Dat_Save_Flag == 1)
                                {
                                    Port.SendAutoykqjz_Start(Constants.AutoWing_Tel_Steps, Constants.AutoWing_Tel_StepsValue);
                                }
                                else
                                {
                                    Constants.AutoWing_Tel_ReModifymiddle_Flag = 0;
                                    Constants.Jump_To5or50Hz_Flag = 0;
                                    System.Windows.MessageBox.Show("Disconnect");
                                }
                            }
                            else if (Constants.AutoWing_Tel_ReModifymiddle_Flag == 1 && AllAerocraftData.SuccessOrFail == 4)
                            {
                                Constants.AutoWing_Tel_ReModifymiddle_Flag = 0;
                            }


                            //////////////////////////////////////////////////////////遥控器校准fourth_step下一步/////////////////////////////////////////////////
                            if (Constants.AutoWing_Tel_Modifynext_Flag == 1)//中点确认后跳转并且一直发送是否反向
                            {
                                //////这一步的跳转在点击按钮的时候跳转/////////////////////////////
                                Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                                if (Wifi_Success_Connect_Flag == true)
                                {
                                    wifi_SendAutoykqjz_Start(Constants.AutoWing_Tel_Steps, Constants.AutoWing_Tel_StepsValue);//发送遥控器方向确认命令
                                }
                                else if (Dat_Save_Flag == 1)
                                {
                                    Port.SendAutoykqjz_Start(Constants.AutoWing_Tel_Steps, Constants.AutoWing_Tel_StepsValue);
                                }
                                else
                                {
                                    Constants.AutoWing_Tel_Modifynext_Flag = 0;
                                    Constants.Jump_To5or50Hz_Flag = 0;
                                    System.Windows.MessageBox.Show("Disconnect");
                                }
                            }
                            ///////////////////////////////////////////////////////////////遥控器校准Fifth_step下一步//////////////////////////////////////////////
                            if (Constants.AutoWing_Tel_Makesure_flag == 1 && AllAerocraftData.SuccessOrFail != 11 && AllAerocraftData.SuccessOrFail != 0)
                            {
                                Constants.Jump_To5or50Hz_Flag = -1;//停止所有默认发
                                if (Wifi_Success_Connect_Flag == true)
                                {
                                    Wait_TenSeconds_Function();//超时停止
                                    wifi_SendAutoykqjz_Start(Constants.AutoWing_Tel_Steps, Constants.AutoWing_Tel_StepsValue);//发送遥控器方向确认指令
                                }
                                else if (Dat_Save_Flag == 1)
                                {
                                    Wait_TenSeconds_Function();//超时停止
                                    Port.SendAutoykqjz_Start(Constants.AutoWing_Tel_Steps, Constants.AutoWing_Tel_StepsValue);
                                }
                                else
                                {
                                    Constants.AutoWing_Tel_Makesure_flag = 0;
                                    Constants.Jump_To5or50Hz_Flag = 0;
                                    System.Windows.MessageBox.Show("Disconnect");
                                }
                            }
                            else if (Constants.AutoWing_Tel_Makesure_flag == 1 && (AllAerocraftData.SuccessOrFail == 11 || AllAerocraftData.SuccessOrFail == 0))
                            {
                                Constants.Jump_To5or50Hz_Flag = 0;//恢复默认发送
                                Constants.AutoWing_Tel_Makesure_flag = 0;
                                Thread.Sleep(1000);//次线程休眠1秒
                                this.Dispatcher.Invoke(new Action(delegate
                                {
                                    dlg.Close();
                                }));
                                TenSeconds_Count = 0;
                                if (Show_Fail_Style != 1)
                                {
                                    System.Windows.MessageBox.Show("Calibration Of Remote Control Success");
                                }
                                else
                                {
                                    Show_Fail_Style = 0;
                                }

                            }
                            if(Constants.Play_Data_Back_Flag==true)
                            {
                                Child.Function_Data_Reback();
                            }
                        }
                        #endregion
                        #region Ap_id_Show
                        else if (Container.Children[i].Content.GetType() == typeof(AP_IDSET_Window))
                        {
                            AP_IDSET_Window Child = (AP_IDSET_Window)Container.Children[i].Content;
                            Child.Function_APID_Show();
                        }
                        #endregion
                        #region Imu_Data_Show
                        else if (Container.Children[i].Content.GetType() == typeof(Imu_Info_Window))
                        {
                            Imu_Info_Window Child = (Imu_Info_Window)Container.Children[i].Content;



                            Constants.mm_IMUDataRoll = AllAerocraftData.Roll;
                            Constants.mm_IMUDataPitch = AllAerocraftData.Pitch;
                            Constants.mm_IMUDataYaw = AllAerocraftData.Yaw;
                            Constants.mm_GyroDataRollRate = AllAerocraftData.P;
                            Constants.mm_GyroDataPitchRate = AllAerocraftData.Q;
                            Constants.mm_GyroDataYawRate = AllAerocraftData.R;
                            Constants.mm_AccDataX = AllAerocraftData.XAcc;
                            Constants.mm_AccDataY = AllAerocraftData.YAcc;
                            Constants.mm_AccDataZ = AllAerocraftData.ZAcc;
                            Constants.mm_MagDataX = AllAerocraftData.XMag;
                            Constants.mm_MagDataY = AllAerocraftData.YMag;
                            Constants.mm_MagDataZ = AllAerocraftData.ZMag;




                            Child.Function_ImuData_Refresh();
                        }
                        #endregion
                    }

                }

                #endregion
            }
            catch (Exception ex)
            {
                //System.Windows.MessageBox.Show("(503) OptionData Update Error: " + ex.Message);
                _logger.Error("(503) OptionData Update Error: " + ex.Message);
            }

        }
        /// <summary>
        /// 地图中心基准坐标的设置
        /// </summary>
        /// <param name="ResultUpdate"></param>
        private void MapUpdate(bool ResultUpdate)
        {
            try
            {
                if (SettingData.Set)
                {
                    switch (SettingData.TrajectoryMode)
                    {
                        case 1:
                            var _dis = Math.Round(
                                    MainMap.MapProvider.Projection.GetDistance(
                                    MainMap.Position,     // 1Pont
                                    UAVMarker.Position    // 2Point
                                    ), 4, MidpointRounding.AwayFromZero);
                            if (_dis > Constants._mapPosition /*&& BatteryName.BatteryValue != 0 && GPSName.GPSValue != 0 && LinkName.LinkValue != 0*/)
                            {
                                MainMap.Position = UAVMarker.Position;
                            }

                            break;
                        case 2:		//飞机中心
                            MainMap.Position = UAVMarker.Position;
                            break;
                        case 3:		//Waypoint中心
                            MainMap.Position = NWaypointMarker.Position;
                            break;
                        case 4:		//Home中心
                            MainMap.Position = HomeMarker.Position;
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                //System.Windows.MessageBox.Show("(504) MapPostion Error: " + ex.Message);
                _logger.Error("(504) MapPostion Error: " + ex.Message);
            }
        }
        private void SubDataUpdate()
        {
            try
            {
                // XML条件
                if (WaypointCount > 0)
                {
                    WaypointMarker.Altitude = Altitude.WaypointAlt;
                }

                Altitude.NWaypointAlt = NWaypointMarker.Altitude;

                if (Popup.IsOpen && _popupMode == 1)
                {
                    _popupCount++;
                    if (_popupCount > 30)
                    {
                        Label.Background = Brushes.Blue;
                        Popup.IsOpen = false;
                        _popupCount = 0;
                        _popupMode = 0;
                    }
                }

                if (ConnectCount == 0)
                {
                    /*	if (OpenFlightLog.IsEnabled != true)
                        {
                            OpenFlightLog.IsEnabled = true;
                        }*/
                }
                else
                {

                    /*		if (OpenFlightLog.IsEnabled != false)
                            {
                                OpenFlightLog.IsEnabled = false;
                            }*/
                }

                if (!PlayState)
                {
                    //if (SettingData.ModeSetting == "マルチウェイポイント")
                    {
                        // 空转时
                        if (DataConstellation.BindingData.nDriveMode == 0)
                        {
                            if (OpenFlightPlan.IsEnabled != true)
                            {
                                OpenFlightPlan.IsEnabled = true;
                            }
                            if (SettingData.ModeSetting == "マルチウェイポイント")//多路点
                            {
                                /*		if (CloseFlightPlan.IsEnabled != true)
                                        {
                                            CloseFlightPlan.IsEnabled = true;
                                        }
                                        if (SendFlightPlan.IsEnabled != true)
                                        {
                                            SendFlightPlan.IsEnabled = true;
                                        }*/
                            }

                        }
                        else
                        {
                            //if (OpenFlightPlan.IsEnabled != false)
                            //{
                            //    OpenFlightPlan.IsEnabled = false;
                            //}
                            //if (CloseFlightPlan.IsEnabled != false)
                            //{
                            //    CloseFlightPlan.IsEnabled = false;
                            //}
                            //if (SendFlightPlan.IsEnabled != false)
                            //{
                            //    SendFlightPlan.IsEnabled = false;
                            //}
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.Error("(505) SubDataUpdate: " + ex.Message);
            }
        }
        #endregion
        /// <summary>
        ///_messageMode[0] = AlertSpeakerMuteDeterminationProcess(true);	// 扬声器静音检测
        ///_messageMode[1] = AlertSpeakerDeterminationProcess(true);		// 扬声器音量检测
        ///_messageMode[2] = 0; 未连接
        ///_messageMode[3] = 0; 停止状态
        ///_messageMode[4] = (AlertPCDeterminationProcess(true));									//　PC 警报检测
        ///_messageMode[5] = (AlertBatteryDeterminationProcess(SettingData.AlertVoltageViewFlag));	//　电池警告检测方法
        ///_messageMode[6] = (AlertGPSDeterminationProcess(SettingData.AlertGPSViewFlag));			//　GPS 预警检测方法
        ///_messageMode[7] = (AlertLinkDeterminationProcess(SettingData.AlertLinkViewFlag));		//　链接警告检测
        ///_messageMode[8] = (AlertRCDeterminationProcess(SettingData.AlertLinkViewFlag));			//　RC警告检测
        ///_messageMode[9] = (AlertLowLvMcuProcDeterminationProcess(true));							//　下位机CPU警告处理
        ///_messageMode[10]= (AlertHighLvMcuProcDeterminationProcess(true));						//　上位机CPU警告处理
        ///_messageMode[11] = 0;
        ///_messageMode[12] = 2; 2个错误数据包
        ///_messageMode[13] = 2; 2个错误数据包
        /// </summary>
        /// <param name="isRepeat"></param>
        /// <param name="_count"></param>
        /// <returns></returns>
        #region 警告消息
        private int AlertProcess(int isRepeat, int _count = 0)
        {
            AlertMessageName.Message = "";
            AlertMessageName.AlarmFlag = 0;

            // 指定元素的数组 初始化数
            int _msapMode = -1;
            int[] _messageMode = Enumerable.Repeat<int>(-1, Constants._alertMessageCount).ToArray();
            int[] _soundMode = Enumerable.Repeat<int>(-1, Constants._alertMessageCount).ToArray();

//            _messageMode[0] = AlertSpeakerMuteDeterminationProcess(true);	// 扬声器静音检测
//            _messageMode[1] = AlertSpeakerDeterminationProcess(true);		// 扬声器音量检测

            /////////////////////////////////////////////////////////////////////////
            // 机器的错误信息 XmaManager 的 实例化对象DataConstellation Length=2
            if (AlertFlag)
            {
                for (int i = 0; i < DataConstellation.BindingData.ErrorID.Length; i++)
                {
                    if (DataConstellation.BindingData.ErrorID[i] == 0xFF)
                    {
                        // R/C（数传）系统的初始位置异常
                        if (DataConstellation.BindingData.ErrorCategory[i] == 1023)
                        {
                            _messageMode[12] = 2;
                            DataConstellation.BindingData.ErrorGCSTimer[i]++;	//100 毫秒 * 50 = 5 s (在 5 秒钟之内获得 2 错误数据包)
                        }
                        // 飞机倾斜 / 变送器操作异常
                        else if (DataConstellation.BindingData.ErrorCategory[i] == 1022)
                        {
                            _messageMode[13] = 2;
                            DataConstellation.BindingData.ErrorGCSTimer[i]++;	//100 毫秒 * 50 = 5 s (在 5 秒钟之内获得 2 错误数据包)
                        }
                        if (DataConstellation.BindingData.ErrorGCSTimer[i] > 55)
                        {
                            // Base64変換 int型:4byte 
                            byte[] byteArray = BitConverter.GetBytes(double.Parse(i.ToString()));
                            string _num = System.Convert.ToBase64String(byteArray, 0, byteArray.Length);

                            string _message =
    @"<?xml version=""1.0"" encoding=""utf-8""?>
<root>
  <message type=""mainlink send"">
    <Data>
      <UAV>
        <Error>
          <SendFlag>" + _num + @"</SendFlag>
        </Error>
      </UAV>
    </Data>
  </message>
</root>" + "\0";
                            Send(Client, _message);
                            sendDone.WaitOne();
                            DataConstellation.BindingData.ErrorGCSTimer[i] = 0;
                        }
                    }
                }
            }


            if (ConnectCount == 0)
            {
                /////////////////////////////////////////////////////////////////////////
                // 未连接
                _messageMode[2] = 0;
            }
            else
            {
                /////////////////////////////////////////////////////////////////////////
                // 机器的错误消息
                _msapMode = -1;//AlertMSAPDeterminationProcess(true);

                if (DataConstellation.BindingData.nDriveMode == 0)
                {
                    if (DataConstellation.BindingData.Health.LLMCU_RcReceiverReception == 0)
                    {
                        _messageMode[11] = 0;
                    }
                    else
                    {
                        /////////////////////////////////////////////////////////////////////////
                        // 停止状态
                        _messageMode[3] = 0;
                    }
                    // 海拔高度更新（起飞前数据更新）
                    Altitude.ElevationValue = DataConstellation.BindingData.UAVpoint.Alt;
                }
                else
                {
                    /////////////////////////////////////////////////////////////////////////
                    // 驱动器状态
                    //List<int> _mode = new List<int>();
                    // 警告消息
                    _messageMode[4] = (AlertPCDeterminationProcess(true));									//　PC 警报检测
                    _messageMode[5] = (AlertBatteryDeterminationProcess(SettingData.AlertVoltageViewFlag));	//　电池警告检测方法
                    _messageMode[6] = (AlertGPSDeterminationProcess(SettingData.AlertGPSViewFlag));			//　GPS 预警检测方法
                    _messageMode[7] = (AlertLinkDeterminationProcess(SettingData.AlertLinkViewFlag));		//　链接警告检测
                    _messageMode[8] = (AlertRCDeterminationProcess(SettingData.AlertLinkViewFlag));			//　RC警告检测
                    _messageMode[9] = (AlertLowLvMcuProcDeterminationProcess(true));							//　下位机CPU警告处理
                    _messageMode[10] = (AlertHighLvMcuProcDeterminationProcess(true));						//　上位机CPU警告处理
                    //AlertMessage(_mode);

                    //　警告音
                    //_mode = new List<int>();
                    _soundMode[4] = (AlertPCDeterminationProcess(true));									//　PC 警报检测
                    _soundMode[5] = (AlertBatteryDeterminationProcess(SettingData.AlertVoltageViewFlag));	//　电池警告检测方法
                    _soundMode[6] = (AlertGPSDeterminationProcess(SettingData.AlertGPSSoundFlag));			//　GPS 预警检测方法
                    _soundMode[7] = (AlertLinkDeterminationProcess(SettingData.AlertLinkViewFlag));			//　链接警告检测
                    _soundMode[8] = (AlertRCDeterminationProcess(SettingData.AlertLinkViewFlag));			//　RC警告检测
                    _soundMode[9] = (AlertLowLvMcuProcDeterminationProcess(true));							//　下位机CPU警告处理
                    _soundMode[10] = (AlertHighLvMcuProcDeterminationProcess(true));						//　上位机CPU警告处理
                    //_count = AlertSound(_mode, _count);

                }
            }
            AlertMessage(_messageMode, _msapMode);
            _count = AlertSound(_soundMode, _count);

            return _count;
        }
        // 主屏幕 HealthData 警告颜色
        private void AlertMessageMode(int _no, int _mode)
        {
            System.Windows.Media.SolidColorBrush _brush = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(31, 26, 80));
            _brush.Opacity = 0.7;
            if (_mode > 0)
            {
                _brush = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(192, 0, 0));
                _brush.Opacity = 0.7;
            }
            switch (_no)
            {
                case 5:
                    // 电池 (主屏幕)
                    BatteryName.Background = _brush;
                    break;
                case 6:
                    // GPS(主屏幕)
                    GPSName.Background = _brush;
                    break;
                case 7:
                    // Link(主屏幕)
                    LinkName.Background = _brush;
                    break;
                case 8:
                    // RC(主屏幕)
                    RCrecName.Background = _brush;
                    break;
            }
        }
        // 显示一条警告消息
        private void AlertMessage(int[] _mode, int _msap)
        {
            string _message = "";
            int _alerColor = -1;

            // 
            if (_msap != -1 && _msap < 2)
            {
                _message += Constants._alertMSAPMessage(_msap);
                _alerColor = 2;

            }

            // 颜色选择的警告消息
            for (int i = 0; i < _mode.Length; i++)
            {
                if (_mode[i] != -1)
                {
                    _message += Constants._alertMessage(i, _mode[i]);
                    if (_mode[i] > _alerColor)
                    {
                        _alerColor = _mode[i];
                    }
                }
                AlertMessageMode(i, _mode[i]);
            }

            // 警告消息和颜色显示/隐藏　
            if (_message != "")
            {
                AlertMessageName.Message = _message;
                AlertMessageName.Visibility = Visibility.Hidden;
#if DEBUG
				_logger.Warn("AlertMessage:" + _message);
#endif
                switch (_alerColor)
                {
                    case 0:
                        AlertMessageName.AlarmFlag = 1;//淡蓝色的消息
                        break;
                    case 1:
                        AlertMessageName.AlarmFlag = 2;//黄色的信息
                        break;
                    case 2:
                        AlertMessageName.AlarmFlag = 3;//红色的消息
                        break;
                }
            }
            else
            {
                if (AlertMessageName.Message != "")
                {
                    AlertMessageName.Message = "";
                }
                if (AlertMessageName.Visibility != Visibility.Hidden)
                {
                    AlertMessageName.Visibility = Visibility.Hidden;
                }
            }
        }
        // 警告音
        private int AlertSound(int[] _mode, int _count)
        {
            int _alerSound = -1;

            // 警告音选择
            for (int i = 0; i < _mode.Length; i++)
            {
                if (_mode[i] != -1)
                {
                    if (_mode[i] > _alerSound)
                    {
                        _alerSound = _mode[i];
                    }
                }
            }


            if (Wifi_Success_Connect_Flag == true || Dat_Save_Flag == 1)
            {
                // 警告音播放
                if (_alerSound != -1)
                {
                    switch (_alerSound)
                    {
                        case 1:
                            if (_count > 18)
                            {
                                // 每隔一秒播放一次
                                me2.Position = new TimeSpan(0);
                                _count = 0;
                            }
                            me2.Play();			//报警播放两秒
                            _count++;
                            break;
                        case 2:
                            if (_count > Properties.Settings.Default.AlertRepeatTime)
                            {
                                // 每隔三秒播放一次
                                me1.Position = new TimeSpan(0);
                                _count = 0;
                            }
                            me1.Play();			//报警播放两秒
                            _count++;
                            break;
                    }
                }
                else
                {
                    me2.Stop();
                    me1.Stop();
                    _count = 0;
                }
            }
            return _count;
        }

        #region 预警检测方法
        // 扬声器静音检测
        private int AlertSpeakerMuteDeterminationProcess(bool _flag)
        {
            int _mode = -1;

            if (_flag)
            {
                if (_mmd.AudioEndpointVolume.Mute)
                {
                    _mode = 0;
                }

            }

            return _mode;
        }
        // 扬声器音量检测
        private int AlertSpeakerDeterminationProcess(bool _flag)
        {
            int _mode = -1;

            if (_flag)
            {
                if (_mmd.AudioEndpointVolume.VolumeRange.MaxDecibels > _mmd.AudioEndpointVolume.MasterVolumeLevel)
                {
                    _mode = 0;
                }
            }

            return _mode;
        }
        // PC警报检测
        private int AlertPCDeterminationProcess(bool _flag)
        {
            int _mode = -1;

            if (_flag)
            {
                if ((SystemInformation.PowerStatus.BatteryLifePercent * 100) <= Properties.Settings.Default.PowerStatus_level1)
                {
                    _mode = 2;
                }
                else if ((SystemInformation.PowerStatus.BatteryLifePercent * 100) <= Properties.Settings.Default.PowerStatus_level2)
                {
                    _mode = 1;
                }
                else if ((SystemInformation.PowerStatus.BatteryLifePercent * 100) <= Properties.Settings.Default.PowerStatus_level3)
                {
                    _mode = 0;
                }
            }

            return _mode;
        }
        // 电池警告检测方法
        private int AlertBatteryDeterminationProcess(bool _flag)
        {
            int _mode = -1;

            if (_flag)
            {
                if (DataConstellation.BindingData.BatteryVoltage <= Constants._alertBatteryValue)
                {
                    _mode = 2;
                }
                else if (DataConstellation.BindingData.BatteryVoltage <= ((double)DataConstellation.BindingData.Health.AlertVolValue))
                {
                    _mode = 1;
                }
            }

            return _mode;
        }
        // GPS 预警检测方法
        private int AlertGPSDeterminationProcess(bool _flag)
        {
            int _mode = -1;

            if (_flag)
            {
                if (DataConstellation.BindingData.nSat <= Constants._alertGPSValue)
                {
                    _mode = 2;
                }
                else if (DataConstellation.BindingData.nSat <= DataConstellation.BindingData.Health.AlertGPSValue)
                {
                    _mode = 1;
                }
            }

            return _mode;
        }
        // 链接警报检测
        private int AlertLinkDeterminationProcess(bool _flag)
        {
            int _mode = -1;

            if (_flag)
            {
                int MainLink_UavToGcs = (int)(DataConstellation.BindingData.Health.MainLink_UavToGcs * 100 / 15);
                if (MainLink_UavToGcs <= Constants._alertLinkValue)
                {
                    _mode = 2;
                }
                else if (MainLink_UavToGcs <= ((double)DataConstellation.BindingData.Health.AlertLinkValue))
                {
                    _mode = 1;
                }
            }

            return _mode;
        }
        // RC警报检测
        private int AlertRCDeterminationProcess(bool _flag)
        {
            int _mode = -1;

            if (_flag)
            {
                int RcReceiverReception = (int)(DataConstellation.BindingData.Health.LLMCU_RcReceiverReception * 100 / 15);
                if (RcReceiverReception <= Constants._alertRCValue)
                {
                    _mode = 2;
                }
                else if (RcReceiverReception <= ((double)DataConstellation.BindingData.Health.AlertRCrecValue))
                {
                    _mode = 1;
                }
            }

            return _mode;
        }
        // 下位机CPU警报检测
        private int AlertLowLvMcuProcDeterminationProcess(bool _flag)
        {
            int _mode = -1;

            if (_flag)
            {
                int _lowLvMcuProcTime = (int)(DataConstellation.BindingData.Health.LowLvMcuProcTime);
                if (_lowLvMcuProcTime >= Constants._lowLvMcuProcTimeA)
                {
                    _mode = 2;
                }
                else if (_lowLvMcuProcTime >= Constants._lowLvMcuProcTimeW)
                {
                    _mode = 1;
                }
            }

            return _mode;
        }
        // 上位机CPU警报检测
        private int AlertHighLvMcuProcDeterminationProcess(bool _flag)
        {
            int _mode = -1;

            if (_flag)
            {
                int _highLvMcuProcTime = (int)(DataConstellation.BindingData.Health.HighLvMcuProcTime);
                if (_highLvMcuProcTime >= Constants._highLvMcuProcTimeA)
                {
                    _mode = 2;
                }
                else if (_highLvMcuProcTime >= Constants._highLvMcuProcTimeW)
                {
                    _mode = 1;
                }
            }

            return _mode;
        }

        // オートパイロットエラーメッセージ判定処理
        //private int AlertMSAPDeterminationProcess(bool _flag)
        //{
        //	int _mode = -1;

        //	if (_flag)
        //	{
        //		if (DataConstellation.BindingData.ErrorCode != 0 && DataConstellation.BindingData.ErrorParam != 0)
        //		{
        //			if (DataConstellation.BindingData.ErrorCode == 0xFF && DataConstellation.BindingData.ErrorParam == 0x01)
        //			{
        //				// 起動時セーフティ プロポの設定を確認
        //				_mode = 0;
        //			}
        //			if (DataConstellation.BindingData.ErrorCode == 0xFF && DataConstellation.BindingData.ErrorParam == 0x02)
        //			{
        //				// 起動時セーフティ 機体の姿勢が安定
        //				_mode = 1;
        //			}
        //		}
        //	}

        //	return _mode;
        //}

        private void AlertMSAPDeterminationMessage(string _message)
        {

            AlertFlag = false;

        }
        #endregion

        #endregion

        #region 命令按钮 (无人机 / 重播)
        /// <summary>
        /// 命令按钮切换
        /// </summary>
        /// <param name="mode">命令模式选择</param>
        private void CommandButtonNameChange(int mode)
        {
            _logger.Info("CommandButtonNameChange:" + mode.ToString());
            switch (mode)
            {

                case 1:     //无人机操作模式
                    User1.Content = Constants._commandUser1_1;	//返回
                    User2.Content = Constants._commandUser2_1;	//着陆
                    User3.Content = Constants._commandUser3_1;	//开始
                    User4.Content = Constants._commandUser4_1;	//暂停
                    break;
                case 2:     //日志回放模式
                    User1.Content = Constants._commandUser1_2;     //跳转到以前的模式开关点
                    if (PlayFlag)
                    {
                        User2.Content = Constants._commandUser2_3; //暂停
                    }
                    else
                    {
                        User2.Content = Constants._commandUser2_2; //重新开始
                    }
                    User3.Content = Constants._commandUser3_2;     //停止
                    User4.Content = Constants._commandUser4_2;     //飞行模式切换
                    break;

                default:
                    User1.Content = Constants._commandUser1_0;
                    User2.Content = Constants._commandUser2_0;
                    User3.Content = Constants._commandUser3_0;
                    User4.Content = Constants._commandUser4_0;
                    break;
            }
            PosSet.Content = Constants._commandPosSet;
        }

        // 命令按钮长按保持颜色变化
        private void CommandButtonColor()
        {
            switch (CommandFlag)
            {
                case 1:
                    #region User1 命令按钮
                    User1.Foreground = new SolidColorBrush(Color.FromRgb(255, 192, 0));
                    User1.BorderBrush = new SolidColorBrush(Color.FromRgb(255, 192, 0));
                    break;
                    #endregion
                case 2:
                    #region User2命令按钮
                    User2.Foreground = new SolidColorBrush(Color.FromRgb(255, 192, 0));
                    User2.BorderBrush = new SolidColorBrush(Color.FromRgb(255, 192, 0));
                    break;
                    #endregion
                case 3:
                    #region User3命令按钮
                    User3.Foreground = new SolidColorBrush(Color.FromRgb(255, 192, 0));
                    User3.BorderBrush = new SolidColorBrush(Color.FromRgb(255, 192, 0));
                    break;
                    #endregion
                case 4:
                    #region User4命令按钮
                    User4.Foreground = new SolidColorBrush(Color.FromRgb(255, 192, 0));
                    User4.BorderBrush = new SolidColorBrush(Color.FromRgb(255, 192, 0));
                    break;
                    #endregion
                case 10:
                    #region 发送
                    PosSet.Foreground = new SolidColorBrush(Color.FromRgb(255, 192, 0));
                    PosSet.BorderBrush = new SolidColorBrush(Color.FromRgb(255, 192, 0));
                    break;
                    #endregion
                case 11:
                    #region Waypointmarker　クリア
                    PosClear.Foreground = new SolidColorBrush(Color.FromRgb(255, 192, 0));
                    PosClear.BorderBrush = new SolidColorBrush(Color.FromRgb(255, 192, 0));
                    break;
                    #endregion
                default:
                    break;

            }
        }

        // 获取命令按钮按下
        private int CommandButtonMode(string str)
        {
            int mode = 0;
            _logger.Info("CommandButtonMode:" + str);

            switch (DataConstellation.CommandMode)
            {

                case 1:     //无人机操作模式
                    switch (str)
                    {
                        case Constants._commandUser1_1:
                            mode = 1;
                            break;
                        case Constants._commandUser2_1:
                            mode = 2;
                            break;
                        case Constants._commandUser3_1:
                            mode = 3;
                            break;
                        case Constants._commandUser4_1:
                            mode = 4;
                            break;
                        case Constants._commandPosSet:
                            mode = 10;
                            break;
                        case Constants._commandPosClear:
                            mode = 11;
                            break;
                        case Constants._commandPosSpd0:
                        case Constants._commandPosSpd1:
                        case Constants._commandPosSpd2:
                        case Constants._commandPosSpd3:
                            mode = 12;
                            break;
                        default:
                            break;
                    }
                    break;
                case 2:     //日志回放模式
                    switch (str)
                    {
                        case Constants._commandUser1_2:
                            mode = 1;
                            break;
                        case Constants._commandUser2_2:
                        case Constants._commandUser2_3:
                            mode = 2;
                            break;
                        case Constants._commandUser3_2:
                            mode = 3;
                            break;
                        case Constants._commandUser4_2:
                            mode = 4;
                            break;
                        case Constants._commandPosSet:
                            mode = 10;
                            break;
                        case Constants._commandPosClear:
                            mode = 11;
                            break;
                        default:
                            break;
                    }
                    break;
                default:
                    break;
            }


            return mode;
        }

        // 命令按钮事件
        private void Command_MouseDown(object sender, MouseButtonEventArgs e)
        {

            DataConstellation.BindingData.nControlMode = 3;//为了测试先将模式设置在3
            System.Windows.Controls.Label _command = sender as System.Windows.Controls.Label;

            if (_command != null)
            {
                string str = (string)_command.Content;

                CommandFlag = CommandButtonMode(str);
                if (!_command.IsMouseCaptured)
                {
                    _command.CaptureMouse();
                }
                switch (DataConstellation.CommandMode)
                {
                    case 1:     //无人机操作模式
                        if (DataConstellation.BindingData.nControlMode == 4)// && DataConstellation.BindingData.nFlightMode == 2
                        {
                            if (CommandFlag == 10)
                            {
                                if (DataConstellation.BindingData.nFlightMode == 1)
                                {
                                    CommandTimer.Interval = 1000;   //wait
                                    CommandTimer.Enabled = true;
                                    CommandTimer.Start();
                                }
                                else
                                {
                                    _command.Foreground = Brushes.Red;
                                    _command.BorderBrush = Brushes.Red;
                                }
                            }
                            else
                            {
                                if (CommandFlag == 4)	//暂停
                                {
                                    CommandTimer.Interval = 20;   //wait
                                }
                                else
                                {
                                    CommandTimer.Interval = 1000;   //wait
                                }
                                CommandTimer.Enabled = true;
                                CommandTimer.Start();
                            }
                        }
                        else if (DataConstellation.BindingData.nControlMode == 3)
                        {
                            /////这边修改为标志位触发发送
                            /*		if (CommandFlag == 1 || CommandFlag == 2)
                                    {
                                        CommandTimer.Interval = 1000;   //wait
                                        CommandTimer.Enabled = true;
                                        CommandTimer.Start();
                                    }
                                    else
                                    {
                                        _command.Foreground = Brushes.Red;
                                        _command.BorderBrush = Brushes.Red;
                                    }*/
                            if (CommandFlag == 4)//轨迹清除及开始绘制
                            {
                                CommandButtonColor();
                                MainMonitorClear();
                                DrawTrack_Count = 0;
                                Start_DrawRoute_Flag = 1;
                            }
                            if (AllAerocraftData.AutoWingFlightMode == 3 || AllAerocraftData.AutoWingFlightMode == 4
                                || AllAerocraftData.AutoWingFlightMode == 5 || AllAerocraftData.AutoWingFlightMode == 6
                                || AllAerocraftData.AutoWingFlightMode == 7 || AllAerocraftData.AutoWingFlightMode == 8
                                || AllAerocraftData.AutoWingFlightMode == 9 || AllAerocraftData.AutoWingFlightMode == 0)
                            //  if (true)
                            {
                                if (CommandFlag == 1)//自主返航
                                {
                                    CommandButtonColor();
                                    if (AllAerocraftData.AutoWingFlightMode == 3 || AllAerocraftData.AutoWingFlightMode == 4
                                       || AllAerocraftData.AutoWingFlightMode == 5 || AllAerocraftData.AutoWingFlightMode == 6
                                       || AllAerocraftData.AutoWingFlightMode == 7 || AllAerocraftData.AutoWingFlightMode == 8
                                       || AllAerocraftData.AutoWingFlightMode == 9)
                                    {
                                        AutoStartBack_Wav.Play();//自主返航语音播报
                                        if (System.Windows.Forms.MessageBox.Show("Make Sure To Send Self - Return?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                                        {
                                            AutoStartBack_Wav.Stop();//自主返航语音结束
                                            /////////////////////////////////////////////////////打开等待旋转界面///////////////////////////////////////////////
                                            if (Wifi_Success_Connect_Flag == true)
                                            {
                                                Function_Wait();
                                            }
                                            else if (Dat_Save_Flag == 1)
                                            {
                                                Function_Wait();
                                            }
                                            else
                                            {

                                            }
                                            Constants.Jump_To5or50Hz_Flag = -1;
                                            AutoWing_AutoLanding_Flag = 0;
                                            AutoWing_AutoTakeOff_Flag = 0;
                                            AutoWing_RoadPoint_Flag = 0;
                                            AutoWing_OneKeyBack_Line_Flag = 1;//先默认是直线返航
                                            //     AutoWing_OneKeyBack_Path_Flag = 0;//原路径返航先不用
                                        }
                                        else
                                        {
                                            AutoStartBack_Wav.Stop();//自主返航语音结束
                                        }
                                    }
                                    else
                                    {
                                        System.Windows.MessageBox.Show("Please Ensure That It Is Used In GPS Or Road Point Mode");
                                    }
                                }
                                if (CommandFlag == 2)//自主着陆
                                {
                                    CommandButtonColor();
                                    if (AllAerocraftData.AutoWingFlightMode == 3 || AllAerocraftData.AutoWingFlightMode == 4
                                       || AllAerocraftData.AutoWingFlightMode == 5 || AllAerocraftData.AutoWingFlightMode == 6
                                       || AllAerocraftData.AutoWingFlightMode == 7 || AllAerocraftData.AutoWingFlightMode == 8
                                       || AllAerocraftData.AutoWingFlightMode == 9)
                                    {
                                        AutoStartLand_Wav.Play();			//自主着陆
                                        if (System.Windows.Forms.MessageBox.Show("Make Sure To Send Self - Land?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                                        {
                                            AutoStartLand_Wav.Stop();			//自主着陆结束
                                            /////////////////////////////////////////////////////打开等待旋转界面///////////////////////////////////////////////
                                            if (Wifi_Success_Connect_Flag == true)
                                            {
                                                Function_Wait();
                                            }
                                            else if (Dat_Save_Flag == 1)
                                            {
                                                Function_Wait();
                                            }
                                            else
                                            {

                                            }
                                            Constants.Jump_To5or50Hz_Flag = -1;
                                            AutoWing_AutoTakeOff_Flag = 0;
                                            AutoWing_RoadPoint_Flag = 0;
                                            AutoWing_OneKeyBack_Line_Flag = 0;//先默认是直线返航
                                            //     AutoWing_OneKeyBack_Path_Flag = 0;//原路径返航先不用
                                            AutoWing_AutoLanding_Flag = 1;
                                        }
                                        else
                                        {
                                            AutoStartLand_Wav.Stop();			//自主着陆结束
                                        }
                                    }
                                    else
                                    {
                                        System.Windows.MessageBox.Show("Please Ensure That It Is Used In GPS Or Road Point Mode");
                                    }

                                }
                                if (CommandFlag == 3)//自主起飞
                                {
                                    CommandButtonColor();
                                    if (AllAerocraftData.AutoWingFlightMode == 0)
                                    {

                                        /////if(flag==true)是否断点续喷
                                        /////是的话直接发送起飞指令else的话什么也不做
                                        if (AllAerocraftData.AutoWingCommunitationState > 0 && AllAerocraftData.AutoWingCommunitationState < AllAerocraftData.AutoWingMarkerNums)
                                        {
                                            AutoStartBreakMessionTransmit_Wav.Play();			//断点续喷
                                            if (System.Windows.Forms.MessageBox.Show("Is The Breakpoint Continued?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                                            {
                                                AutoStartBreakMessionTransmit_Wav.Stop();			//断点续喷结束
                                                if (Wifi_Success_Connect_Flag == true)
                                                {
                                                    Function_Wait();
                                                }
                                                else if (Dat_Save_Flag == 1)
                                                {
                                                    Function_Wait();
                                                }
                                                else
                                                {

                                                }
                                                Constants.Jump_To5or50Hz_Flag = -1;
                                                AutoWing_AutoLanding_Flag = 0;
                                                AutoWing_RoadPoint_Flag = 0;
                                                AutoWing_OneKeyBack_Line_Flag = 0;//先默认是直线返航
                                                //     AutoWing_OneKeyBack_Path_Flag = 0;//原路径返航先不用
                                                AutoWing_AutoTakeOff_Flag = 1;
                                                return;
                                            }
                                            else
                                            {
                                                AutoStartBreakMessionTransmit_Wav.Stop();			//断点续喷结束
                                                return;
                                            }
                                        }
                                        AutoStartFly_Wav.Play();			//自主起飞语音播放
                                        if (System.Windows.Forms.MessageBox.Show("Make Sure To Send Take Off?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                                        {
                                            AutoStartFly_Wav.Stop();//自主起飞语音停止
                                            /////////////////////////////////////////////////////打开等待旋转界面///////////////////////////////////////////////
                                            if (Wifi_Success_Connect_Flag == true)
                                            {
                                                Function_Wait();
                                            }
                                            else if (Dat_Save_Flag == 1)
                                            {
                                                Function_Wait();
                                            }
                                            else
                                            {

                                            }
                                            Constants.Jump_To5or50Hz_Flag = -1;
                                            AutoWing_AutoLanding_Flag = 0;
                                            AutoWing_RoadPoint_Flag = 0;
                                            AutoWing_OneKeyBack_Line_Flag = 0;//先默认是直线返航
                                            //     AutoWing_OneKeyBack_Path_Flag = 0;//原路径返航先不用
                                            AutoWing_AutoTakeOff_Flag = 1;
                                        }
                                        else
                                        {
                                            AutoStartFly_Wav.Stop();
                                        }
                                    }
                                    else
                                    {
                                        System.Windows.MessageBox.Show("Please Ensure That It Is Used In Ready Mode");
                                    }

                                }
                                if (CommandFlag == 10)//路点发送
                                {
                                    CommandButtonColor();
                                    if (AllAerocraftData.AutoWingFlightMode == 3 || AllAerocraftData.AutoWingFlightMode == 4 || AllAerocraftData.AutoWingFlightMode == 0)
                                    {
                                        AutoStartMessionTransmit_Wav.Play();//准备上传路点语音播报
                                        if (System.Windows.Forms.MessageBox.Show("Make Sure To Send Waypoints?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                                        {
                                            AutoStartMessionTransmit_Wav.Stop();//准备上传路点语音播报结束
                                            if (ProjectList_X.Count > 0)
                                            {
                                                if (ProjectList_X[0].WaypointData.Count > 0)
                                                {
                                                   // WayPoint_NumS = ProjectList_X[0].WaypointData.Count;
                                                  //  for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                  //  {
                                                       // WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Latitude;
                                                      //  WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Longitude;
                                                        /////////////////分区域发送路点///////////////////////////////////////////
                                                  //  }
                                                    if(ProjectList_X[0].WaypointData.Count<101)
                                                    {
                                                        WayPoint_NumS = ProjectList_X[0].WaypointData.Count;
                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                        {
                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Latitude;
                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Longitude;
                                                            ///////////////分区域发送路点///////////////////////////////////////////

                                                            ////////////////////////////是否喷洒的标志位//////////////////////////////
                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[M_Save_i];
                                                        }
                                                    }
                                                    else if(ProjectList_X[0].WaypointData.Count>100)
                                                    {
                                                        if (AreaWaypointSelect_X.Count > 0 && AreaWaypointSelect_X.Count <= 1)
                                                        {

                                                            switch (AreaWaypointSelect_X[0])
                                                            {
                                                                case 1:
                                                                        WayPoint_NumS = 100;
                                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                        {
                                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Latitude;
                                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Longitude;
                                                                            ///////////////分区域发送路点///////////////////////////////////////////
                                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[M_Save_i];
                                                                        }
                                                                    break;
                                                                case 2:
                                                                        if (ProjectList_X[0].WaypointData.Count>200)
                                                                        {
                                                                            WayPoint_NumS = 100;
                                                                            for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                            {
                                                                                WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[100+M_Save_i].Latitude;
                                                                                WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[100+M_Save_i].Longitude;
                                                                                ///////////////分区域发送路点///////////////////////////////////////////
                                                                                usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[100+M_Save_i];
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            WayPoint_NumS = (ProjectList_X[0].WaypointData.Count-100);
                                                                            for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                            {
                                                                                WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[100 + M_Save_i].Latitude;
                                                                                WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[100 + M_Save_i].Longitude;
                                                                                ///////////////分区域发送路点///////////////////////////////////////////
                                                                                usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[100+M_Save_i];
                                                                            }
                                                                        }
                                                                    break;
                                                                case 3:
                                                                    if (ProjectList_X[0].WaypointData.Count > 300)
                                                                    {
                                                                        WayPoint_NumS = 100;
                                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                        {
                                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[200 + M_Save_i].Latitude;
                                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[200 + M_Save_i].Longitude;
                                                                            ///////////////分区域发送路点///////////////////////////////////////////
                                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[200+M_Save_i];
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 200);
                                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                        {
                                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[200 + M_Save_i].Latitude;
                                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[200 + M_Save_i].Longitude;
                                                                            ///////////////分区域发送路点///////////////////////////////////////////
                                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[200+M_Save_i];
                                                                        }
                                                                    }
                                                                    break;
                                                                case 4:
                                                                    if (ProjectList_X[0].WaypointData.Count > 400)
                                                                    {
                                                                        WayPoint_NumS = 100;
                                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                        {
                                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Latitude;
                                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Longitude;
                                                                            ///////////////分区域发送路点///////////////////////////////////////////
                                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[300+M_Save_i];
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 300);
                                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                        {
                                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Latitude;
                                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Longitude;
                                                                            ///////////////分区域发送路点///////////////////////////////////////////
                                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[300+M_Save_i];
                                                                        }
                                                                    }
                                                                    break;
                                                                case 5:
                                                                    if (ProjectList_X[0].WaypointData.Count > 500)
                                                                    {
                                                                        WayPoint_NumS = 100;
                                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                        {
                                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Latitude;
                                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Longitude;
                                                                            ///////////////分区域发送路点///////////////////////////////////////////
                                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[400 + M_Save_i];
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 400);
                                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                        {
                                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Latitude;
                                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Longitude;
                                                                            ///////////////分区域发送路点///////////////////////////////////////////
                                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[400 + M_Save_i];
                                                                        }
                                                                    }
                                                                    break;
                                                                //case 6:
                                                                //    if (ProjectList_X[0].WaypointData.Count > 300)
                                                                //    {
                                                                //        WayPoint_NumS = 50;
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[250 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[250 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[250+M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    else
                                                                //    {
                                                                //        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 250);
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[250 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[250 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[250+M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    break;
                                                                //case 7:
                                                                //    if (ProjectList_X[0].WaypointData.Count > 350)
                                                                //    {
                                                                //        WayPoint_NumS = 50;
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[300+M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    else
                                                                //    {
                                                                //        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 300);
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[300+M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    break;
                                                                //case 8:
                                                                //    if (ProjectList_X[0].WaypointData.Count > 400)
                                                                //    {
                                                                //        WayPoint_NumS = 50;
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[350 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[350 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[350+M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    else
                                                                //    {
                                                                //        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 350);
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[350 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[350 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[350+M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    break;
                                                                //case 9:
                                                                //    if (ProjectList_X[0].WaypointData.Count > 450)
                                                                //    {
                                                                //        WayPoint_NumS = 50;
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[400+M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    else
                                                                //    {
                                                                //        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 400);
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[400+M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    break;
                                                                //case 10:
                                                                //    if (ProjectList_X[0].WaypointData.Count > 500)
                                                                //    {
                                                                //        WayPoint_NumS = 50;
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[450 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[450 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[450+M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    else
                                                                //    {
                                                                //        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 450);
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[450 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[450 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[450+M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    break;
                                                                default:
                                                                    break;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            WayPoint_NumS = 100;
                                                            for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                            {
                                                                WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Latitude;
                                                                WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Longitude;
                                                                ///////////////分区域发送路点///////////////////////////////////////////
                                                                usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[M_Save_i];
                                                            }
                                                        }

                                                    }


                                                }
                                            }

                                            /////////////////////////////////////////////////////打开等待旋转界面///////////////////////////////////////////////
                                            if (Wifi_Success_Connect_Flag == true && WayPoint_NumS > 0)
                                            {
                                                Function_Wait();
                                            }
                                            else if (Dat_Save_Flag == 1 && WayPoint_NumS > 0)
                                            {
                                                Function_Wait();
                                            }
                                            else
                                            {

                                            }
                                            Constants.Jump_To5or50Hz_Flag = -1;
                                            AutoWing_AutoLanding_Flag = 0;
                                            AutoWing_OneKeyBack_Line_Flag = 0;//先默认是直线返航
                                            //     AutoWing_OneKeyBack_Path_Flag = 0;//原路径返航先不用
                                            AutoWing_AutoTakeOff_Flag = 0;
                                            AutoWing_RoadPoint_Flag = 1;
                                        }
                                        else
                                        {
                                            AutoStartMessionTransmit_Wav.Stop();//准备上传路点语音播报结束
                                        }
                                    }
                                    else
                                    {
                                        System.Windows.MessageBox.Show("Please Ensure That It Is Used In Road Point Mode");
                                    }
                                }
                            }
                            else
                            {
                                if (CommandFlag == 4)
                                {
                                    CommandButtonColor();
                                    MainMonitorClear();
                                    DrawTrack_Count = 0;
                                    Start_DrawRoute_Flag = 1;
                                }
                                else
                                {
                                    System.Windows.MessageBox.Show("Please Ensure That It Is Used In Correct Mode");
                                }
                            }
                        }
                        else
                        {
                            _command.Foreground = Brushes.Red;
                            _command.BorderBrush = Brushes.Red;
                        }
                        break;

                    case 2:     //日志回放模式
                        if (CommandFlag == 10 || CommandFlag == 11)
                        {
                            _command.Foreground = Brushes.Red;
                            _command.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            System.Diagnostics.Debug.WriteLine("命令：" + str);

                            if (str == Constants._commandUser2_3)					//暂停模式
                            {
                                PlayFlag = false;				//Stop
                                _command.Content = Constants._commandUser2_2;		//重新开始
                            }
                            else if (str == Constants._commandUser2_2)				//重新开始
                            {
                                #region 飞行日志回放 (最大值停止)
                                if (DataConstellation.BindingData.CurrentTime >= (PlayerSlide.Maximum - 0.5))
                                {
                                    string text = DataConstellation.SetMassage(XmlMessage.Set_FlightLogSlidebar,
                                                                                new List<string> { "FlightLog/Play/CurrentTime" },
                                                                                new List<string> { (0).ToString() });
                                    Send(Client, text); //发送
                                    sendDone.WaitOne(); //发送等待
                                    PlayerSlide.Value = 0;
                                    Thread.Sleep(20);
                                }
                                #endregion
                                PlayFlag = true;				//Paly
                                _command.Content = Constants._commandUser2_3;     //暂停
                            }
                            else if (str == Constants._commandUser3_2)				//重新开始
                            {
                                PlayFlag = false;				//Paly
                                User2.Content = Constants._commandUser2_2;			//暂停
                            }
                            CommandFlightLog();
                        }
                        break;

                    default:
                        break;
                }
            }
        }

        private void StartFly_Btn_Click(object sender, RoutedEventArgs e)
        {
            if (AllAerocraftData.AutoWingFlightMode == 0)
            {

                /////if(flag==true)是否断点续喷
                /////是的话直接发送起飞指令else的话什么也不做
                if (AllAerocraftData.AutoWingCommunitationState > 0 && AllAerocraftData.AutoWingCommunitationState < AllAerocraftData.AutoWingMarkerNums)
                {
                    AutoStartBreakMessionTransmit_Wav.Play();			//断点续喷
                    if (System.Windows.Forms.MessageBox.Show("Is The Breakpoint Continued?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                    {
                        AutoStartBreakMessionTransmit_Wav.Stop();			//断点续喷结束
                        if (Wifi_Success_Connect_Flag == true)
                        {
                            Function_Wait();
                        }
                        else if (Dat_Save_Flag == 1)
                        {
                            Function_Wait();
                        }
                        else
                        {

                        }
                        pos_num_get = (AllAerocraftData.AutoWingCommunitationState +2);
                        Constants.Jump_To5or50Hz_Flag = -1;
                        AutoWing_AutoLanding_Flag = 0;
                        AutoWing_RoadPoint_Flag = 0;
                        AutoWing_OneKeyBack_Line_Flag = 0;//先默认是直线返航
                        //     AutoWing_OneKeyBack_Path_Flag = 0;//原路径返航先不用
                        AutoWing_AutoTakeOff_Flag = 1;
                        return;
                    }
                    else
                    {
                        AutoStartBreakMessionTransmit_Wav.Stop();			//断点续喷结束
                        return;
                    }
                }
                AutoStartFly_Wav.Play();			//自主起飞语音播放
                if (System.Windows.Forms.MessageBox.Show("Make Sure To Send Take Off?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                {
                    AutoStartFly_Wav.Stop();//自主起飞语音停止
                    /////////////////////////////////////////////////////打开等待旋转界面///////////////////////////////////////////////
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        Function_Wait();
                    }
                    else if (Dat_Save_Flag == 1)
                    {
                        Function_Wait();
                    }
                    else
                    {

                    }
                    pos_num_get = (AllAerocraftData.AutoWingCommunitationState +2);
                    Constants.Jump_To5or50Hz_Flag = -1;
                    AutoWing_AutoLanding_Flag = 0;
                    AutoWing_RoadPoint_Flag = 0;
                    AutoWing_OneKeyBack_Line_Flag = 0;//先默认是直线返航
                    //     AutoWing_OneKeyBack_Path_Flag = 0;//原路径返航先不用
                    AutoWing_AutoTakeOff_Flag = 1;
                }
                else
                {
                    AutoStartFly_Wav.Stop();
                }
            }
            else
            {
                System.Windows.MessageBox.Show("Please Ensure That It Is Used In Ready Mode");
            }
        }
        private void StartLand_Btn_Click(object sender, RoutedEventArgs e)
        {
            if (AllAerocraftData.AutoWingFlightMode == 3 || AllAerocraftData.AutoWingFlightMode == 4
               || AllAerocraftData.AutoWingFlightMode == 5 || AllAerocraftData.AutoWingFlightMode == 6
               || AllAerocraftData.AutoWingFlightMode == 7 || AllAerocraftData.AutoWingFlightMode == 8
               || AllAerocraftData.AutoWingFlightMode == 9)
            {
                AutoStartLand_Wav.Play();			//自主着陆
                if (System.Windows.Forms.MessageBox.Show("Make Sure To Send Self - Land?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                {
                    AutoStartLand_Wav.Stop();			//自主着陆结束
                    /////////////////////////////////////////////////////打开等待旋转界面///////////////////////////////////////////////
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        Function_Wait();
                    }
                    else if (Dat_Save_Flag == 1)
                    {
                        Function_Wait();
                    }
                    else
                    {

                    }
                    Constants.Jump_To5or50Hz_Flag = -1;
                    AutoWing_AutoTakeOff_Flag = 0;
                    AutoWing_RoadPoint_Flag = 0;
                    AutoWing_OneKeyBack_Line_Flag = 0;//先默认是直线返航
                    //     AutoWing_OneKeyBack_Path_Flag = 0;//原路径返航先不用
                    AutoWing_AutoLanding_Flag = 1;
                }
                else
                {
                    AutoStartLand_Wav.Stop();			//自主着陆结束
                }
            }
            else
            {
                System.Windows.MessageBox.Show("Please Ensure That It Is Used In GPS Or Road Point Mode");
            }
        }
        private void StartBack_Btn_Click(object sender, RoutedEventArgs e)
        {
            if (AllAerocraftData.AutoWingFlightMode == 3 || AllAerocraftData.AutoWingFlightMode == 4
               || AllAerocraftData.AutoWingFlightMode == 5 || AllAerocraftData.AutoWingFlightMode == 6
               || AllAerocraftData.AutoWingFlightMode == 7 || AllAerocraftData.AutoWingFlightMode == 8
               || AllAerocraftData.AutoWingFlightMode == 9)
            {
                AutoStartBack_Wav.Play();//自主返航语音播报
                if (System.Windows.Forms.MessageBox.Show("Make Sure To Send Self - Return?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                {
                    AutoStartBack_Wav.Stop();//自主返航语音结束
                    /////////////////////////////////////////////////////打开等待旋转界面///////////////////////////////////////////////
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        Function_Wait();
                    }
                    else if (Dat_Save_Flag == 1)
                    {
                        Function_Wait();
                    }
                    else
                    {

                    }
                    Constants.Jump_To5or50Hz_Flag = -1;
                    AutoWing_AutoLanding_Flag = 0;
                    AutoWing_AutoTakeOff_Flag = 0;
                    AutoWing_RoadPoint_Flag = 0;
                    AutoWing_OneKeyBack_Line_Flag = 1;//先默认是直线返航
                    //     AutoWing_OneKeyBack_Path_Flag = 0;//原路径返航先不用
                }
                else
                {
                    AutoStartBack_Wav.Stop();//自主返航语音结束
                }
            }
            else
            {
                System.Windows.MessageBox.Show("Please Ensure That It Is Used In GPS Or Road Point Mode");
            }
        }
        private void StartTransmitMission_Btn_Click(object sender, RoutedEventArgs e)
        {
            if (Constants.Style_Change_HangPaiAndZhiBao_Flag==0)
            {
                if (AllAerocraftData.AutoWingFlightMode == 3 || AllAerocraftData.AutoWingFlightMode == 4 || AllAerocraftData.AutoWingFlightMode == 0)
                {
                    AutoStartMessionTransmit_Wav.Play();//准备上传路点语音播报
                    if (System.Windows.Forms.MessageBox.Show("Make Sure To Send Waypoints?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                    {
                        AutoStartMessionTransmit_Wav.Stop();//准备上传路点语音播报结束
                        if (ProjectList_X.Count > 0)
                        {
                            if (ProjectList_X[0].WaypointData.Count > 0)
                            {
                                if (ProjectList_X[0].WaypointData.Count < 101)
                                {
                                    WayPoint_NumS = ProjectList_X[0].WaypointData.Count;
                                    for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                    {
                                        WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Latitude;
                                        WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Longitude;
                                        ///////////////分区域发送路点///////////////////////////////////////////

                                        ////////////////////////////是否喷洒的标志位//////////////////////////////
                                        usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[M_Save_i];
                                    }
                                }
                                else if (ProjectList_X[0].WaypointData.Count > 100)
                                {
                                    if (AreaWaypointSelect_X.Count > 0 && AreaWaypointSelect_X.Count <= 1)
                                    {

                                        switch (AreaWaypointSelect_X[0])
                                        {
                                            case 1:
                                                WayPoint_NumS = 100;
                                                for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                {
                                                    WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Latitude;
                                                    WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Longitude;
                                                    ///////////////分区域发送路点///////////////////////////////////////////
                                                    usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[M_Save_i];
                                                }
                                                break;
                                            case 2:
                                                if (ProjectList_X[0].WaypointData.Count > 200)
                                                {
                                                    WayPoint_NumS = 100;
                                                    for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                    {
                                                        WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[100 + M_Save_i].Latitude;
                                                        WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[100 + M_Save_i].Longitude;
                                                        ///////////////分区域发送路点///////////////////////////////////////////
                                                        usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[100 + M_Save_i];
                                                    }
                                                }
                                                else
                                                {
                                                    WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 100);
                                                    for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                    {
                                                        WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[100 + M_Save_i].Latitude;
                                                        WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[100 + M_Save_i].Longitude;
                                                        ///////////////分区域发送路点///////////////////////////////////////////
                                                        usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[100 + M_Save_i];
                                                    }
                                                }
                                                break;
                                            case 3:
                                                if (ProjectList_X[0].WaypointData.Count > 300)
                                                {
                                                    WayPoint_NumS = 100;
                                                    for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                    {
                                                        WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[200 + M_Save_i].Latitude;
                                                        WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[200 + M_Save_i].Longitude;
                                                        ///////////////分区域发送路点///////////////////////////////////////////
                                                        usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[200 + M_Save_i];
                                                    }
                                                }
                                                else
                                                {
                                                    WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 200);
                                                    for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                    {
                                                        WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[200 + M_Save_i].Latitude;
                                                        WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[200 + M_Save_i].Longitude;
                                                        ///////////////分区域发送路点///////////////////////////////////////////
                                                        usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[200 + M_Save_i];
                                                    }
                                                }
                                                break;
                                            case 4:
                                                if (ProjectList_X[0].WaypointData.Count > 400)
                                                {
                                                    WayPoint_NumS = 100;
                                                    for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                    {
                                                        WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Latitude;
                                                        WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Longitude;
                                                        ///////////////分区域发送路点///////////////////////////////////////////
                                                        usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[300 + M_Save_i];
                                                    }
                                                }
                                                else
                                                {
                                                    WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 300);
                                                    for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                    {
                                                        WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Latitude;
                                                        WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Longitude;
                                                        ///////////////分区域发送路点///////////////////////////////////////////
                                                        usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[300 + M_Save_i];
                                                    }
                                                }
                                                break;
                                            case 5:
                                                if (ProjectList_X[0].WaypointData.Count > 500)
                                                {
                                                    WayPoint_NumS = 100;
                                                    for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                    {
                                                        WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Latitude;
                                                        WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Longitude;
                                                        ///////////////分区域发送路点///////////////////////////////////////////
                                                        usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[400 + M_Save_i];
                                                    }
                                                }
                                                else
                                                {
                                                    WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 400);
                                                    for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                    {
                                                        WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Latitude;
                                                        WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Longitude;
                                                        ///////////////分区域发送路点///////////////////////////////////////////
                                                        usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[400 + M_Save_i];
                                                    }
                                                }
                                                break;
                                            default:
                                                break;
                                        }
                                    }
                                    else
                                    {
                                        WayPoint_NumS = 100;
                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                        {
                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Latitude;
                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Longitude;
                                            ///////////////分区域发送路点///////////////////////////////////////////
                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[M_Save_i];
                                        }
                                    }

                                }


                            }
                        }

                        /////////////////////////////////////////////////////打开等待旋转界面///////////////////////////////////////////////
                        if (Wifi_Success_Connect_Flag == true && WayPoint_NumS > 0)
                        {
                            Function_Wait();
                        }
                        else if (Dat_Save_Flag == 1 && WayPoint_NumS > 0)
                        {
                            Function_Wait();
                        }
                        else
                        {

                        }
                        Constants.Jump_To5or50Hz_Flag = -1;
                        AutoWing_AutoLanding_Flag = 0;
                        AutoWing_OneKeyBack_Line_Flag = 0;//先默认是直线返航
                        //     AutoWing_OneKeyBack_Path_Flag = 0;//原路径返航先不用
                        AutoWing_AutoTakeOff_Flag = 0;
                        AutoWing_RoadPoint_Flag = 1;
                    }
                    else
                    {
                        AutoStartMessionTransmit_Wav.Stop();//准备上传路点语音播报结束
                    }
                }
                else
                {
                    System.Windows.MessageBox.Show("Please Ensure That It Is Used In Road Point Mode");
                }
            }
            else
            {
                if (AllAerocraftData.AutoWingFlightMode == 3 || AllAerocraftData.AutoWingFlightMode == 4 || AllAerocraftData.AutoWingFlightMode == 0)
                {
                    AutoStartMessionTransmit_Wav.Play();//准备上传路点语音播报
                    if (System.Windows.Forms.MessageBox.Show("Make Sure To Send Waypoints?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                    {
                        AutoStartMessionTransmit_Wav.Stop();//准备上传路点语音播报结束
                        if (ProjectList_X.Count > 0)
                        {
                            if (ProjectList_X[0].WaypointData.Count > 0)
                            {
                                WayPoint_NumS = ProjectList_X[0].WaypointData.Count;
                                for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                {
                                    WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Latitude;
                                    WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Longitude;
//////////////////////////////////////////////路点设置、保留、高度、航向、横向速度、纵上速度、纵下速度、悬停、保留////////////////////////////////
                                    UsedWayPoint_SetIndex[M_Save_i] = WayPoint_SetIndex[M_Save_i];
                                    UsedWayPoint_KeepIndex1[M_Save_i] = WayPoint_KeepIndex1[M_Save_i];
                                    UsedWayPoint_Height[M_Save_i] = WayPoint_Height[M_Save_i];
                                    UsedWayPoint_Yaw[M_Save_i] = WayPoint_Yaw[M_Save_i];
                                    UsedWayPoint_HengxiangSudu[M_Save_i] = WayPoint_HengxiangSudu[M_Save_i];
                                    UsedWayPoint_ZongshangSudu[M_Save_i] = WayPoint_ZongshangSudu[M_Save_i];
                                    UsedWayPoint_ZongxiaSudu[M_Save_i] = WayPoint_ZongxiaSudu[M_Save_i];
                                    UsedWayPoint_HoverTimer[M_Save_i] = WayPoint_HoverTimer[M_Save_i];
                                    UsedWayPoint_KeepIndex2[M_Save_i] = WayPoint_KeepIndex2[M_Save_i];
                                }
                            }
                        }

                        /////////////////////////////////////////////////////打开等待旋转界面///////////////////////////////////////////////
                        if (Wifi_Success_Connect_Flag == true && WayPoint_NumS > 0)
                        {
                            Function_Wait();
                        }
                        else if (Dat_Save_Flag == 1 && WayPoint_NumS > 0)
                        {
                            Function_Wait();
                        }
                        else
                        {

                        }
                        Constants.Jump_To5or50Hz_Flag = -1;
                        AutoWing_AutoLanding_Flag = 0;
                        AutoWing_OneKeyBack_Line_Flag = 0;//先默认是直线返航
                        //     AutoWing_OneKeyBack_Path_Flag = 0;//原路径返航先不用
                        AutoWing_AutoTakeOff_Flag = 0;
                        AutoWing_RoadPoint_Flag = 1;
                    }
                    else
                    {
                        AutoStartMessionTransmit_Wav.Stop();//准备上传路点语音播报结束
                    }
                }
                else
                {
                    System.Windows.MessageBox.Show("Please Ensure That It Is Used In Road Point Mode");
                }
            }
 
        }
        private void StartClearTrace_Btn_Click(object sender, RoutedEventArgs e)
        {
            CommandButtonColor();
            MainMonitorClear();
            DrawTrack_Count = 0;
            Start_DrawRoute_Flag = 1;
        }


        private void Command_MouseUp(object sender, MouseButtonEventArgs e)
        {
            System.Windows.Controls.Label _command = sender as System.Windows.Controls.Label;

            if (_command != null)
            {
                _command.Foreground = Brushes.White;
                _command.BorderBrush = Brushes.White;
                if (_command.IsMouseCaptured)
                {
                    _command.ReleaseMouseCapture();
                }
                switch (DataConstellation.CommandMode)
                {
                    case 1:     //无人机操作模式
                        if (CommandTimer.Enabled)
                        {
                            CommandTimer.Enabled = false;
                            CommandTimer.Stop();
                            CommandFlag = 0;
                        }
                        CommandStopMessage();
                        break;
                    case 2:     //日志回放模式
                        // 
                        break;
                    default:
                        break;
                }
            }
            if (CommandTimer.Enabled)
            {
                CommandTimer.Enabled = false;
                CommandTimer.Stop();
                CommandFlag = 0;
            }
        }
        private void Command_TouchDown(object sender, TouchEventArgs e)
        {
            DataConstellation.BindingData.nControlMode = 3;//为了测试先将模式设置在3
            Label.Background = Brushes.Blue;
            System.Windows.Controls.Label _command = sender as System.Windows.Controls.Label;

            if (_command != null)
            {
                string str = (string)_command.Content;

                CommandFlag = CommandButtonMode(str);
                _command.CaptureTouch(e.TouchDevice);

                switch (DataConstellation.CommandMode)
                {

                    case 1:     //无人机操作模式
                        if (DataConstellation.BindingData.nControlMode == 4)// && DataConstellation.BindingData.nFlightMode == 2
                        {
                            if (CommandFlag == 10)
                            {
                                if (DataConstellation.BindingData.nFlightMode == 1)
                                {
                                    CommandTimer.Interval = 1000;   //wait
                                    CommandTimer.Enabled = true;
                                    CommandTimer.Start();
                                }
                                else
                                {
                                    _command.Foreground = Brushes.Red;
                                    _command.BorderBrush = Brushes.Red;
                                }
                            }
                            else
                            {
                                if (CommandFlag == 4)	//暂停
                                {
                                    CommandTimer.Interval = 20;   //wait
                                }
                                else
                                {
                                    CommandTimer.Interval = 1000;   //wait
                                }
                                CommandTimer.Enabled = true;
                                CommandTimer.Start();
                            }
                        }
                        else if (DataConstellation.BindingData.nControlMode == 3)
                        {
                            /*if (CommandFlag == 1 || CommandFlag == 2)
                            {
                                CommandTimer.Interval = 1000;   //wait
                                CommandTimer.Enabled = true;
                                CommandTimer.Start();
                            }
                            elseAllAerocraftData.AutoWingFlightMode == 3
                            {
                                _command.Foreground = Brushes.Red;
                                _command.BorderBrush = Brushes.Red;
                            }*/
                            if (CommandFlag == 4)//轨迹清除及开始绘制
                            {
                                CommandButtonColor();
                                MainMonitorClear();
                                DrawTrack_Count = 0;
                                Start_DrawRoute_Flag = 1;
                            }
                            if (AllAerocraftData.AutoWingFlightMode == 3 || AllAerocraftData.AutoWingFlightMode == 4
                                || AllAerocraftData.AutoWingFlightMode == 5 || AllAerocraftData.AutoWingFlightMode == 6
                                || AllAerocraftData.AutoWingFlightMode == 7 || AllAerocraftData.AutoWingFlightMode == 8
                                || AllAerocraftData.AutoWingFlightMode == 9 || AllAerocraftData.AutoWingFlightMode == 0)
                            // if (true)
                            {
                                if (CommandFlag == 1)//自主返航
                                {
                                    CommandButtonColor();
                                    if (AllAerocraftData.AutoWingFlightMode == 3 || AllAerocraftData.AutoWingFlightMode == 4
                                        || AllAerocraftData.AutoWingFlightMode == 5 || AllAerocraftData.AutoWingFlightMode == 6
                                        || AllAerocraftData.AutoWingFlightMode == 7 || AllAerocraftData.AutoWingFlightMode == 8
                                        || AllAerocraftData.AutoWingFlightMode == 9)
                                    {
                                        AutoStartBack_Wav.Play();//自主返航语音播报
                                        if (System.Windows.Forms.MessageBox.Show("Make Sure To Send Self - Return?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                                        {
                                            AutoStartBack_Wav.Stop();//自主返航语音结束
                                            /////////////////////////////////////////////////////打开等待旋转界面///////////////////////////////////////////////
                                            if (Wifi_Success_Connect_Flag == true)
                                            {
                                                Function_Wait();
                                            }
                                            else if (Dat_Save_Flag == 1)
                                            {
                                                Function_Wait();
                                            }
                                            else
                                            {

                                            }
                                            Constants.Jump_To5or50Hz_Flag = -1;
                                            AutoWing_AutoLanding_Flag = 0;
                                            AutoWing_AutoTakeOff_Flag = 0;
                                            AutoWing_RoadPoint_Flag = 0;
                                            AutoWing_OneKeyBack_Path_Flag = 0;
                                            AutoWing_OneKeyBack_Line_Flag = 1;//先默认是直线返航
                                        }
                                        else
                                        {
                                            AutoStartBack_Wav.Stop();//自主返航语音结束
                                        }
                                    }
                                    else
                                    {
                                        System.Windows.MessageBox.Show("Please Ensure That It Is Used In GPS Or Road Point Mode");
                                    }

                                }
                                if (CommandFlag == 2)//自主着陆
                                {
                                    CommandButtonColor();
                                    if (AllAerocraftData.AutoWingFlightMode == 3 || AllAerocraftData.AutoWingFlightMode == 4
                                    || AllAerocraftData.AutoWingFlightMode == 5 || AllAerocraftData.AutoWingFlightMode == 6
                                    || AllAerocraftData.AutoWingFlightMode == 7 || AllAerocraftData.AutoWingFlightMode == 8
                                    || AllAerocraftData.AutoWingFlightMode == 9)
                                    {
                                        AutoStartLand_Wav.Play();			//自主着陆
                                        if (System.Windows.Forms.MessageBox.Show("Make Sure To Send Self - Land?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                                        {
                                            AutoStartLand_Wav.Stop();			//自主着陆结束
                                            /////////////////////////////////////////////////////打开等待旋转界面///////////////////////////////////////////////
                                            if (Wifi_Success_Connect_Flag == true)
                                            {
                                                Function_Wait();
                                            }
                                            else if (Dat_Save_Flag == 1)
                                            {
                                                Function_Wait();
                                            }
                                            else
                                            {

                                            }
                                            Constants.Jump_To5or50Hz_Flag = -1;
                                            AutoWing_AutoTakeOff_Flag = 0;
                                            AutoWing_RoadPoint_Flag = 0;
                                            AutoWing_OneKeyBack_Path_Flag = 0;
                                            AutoWing_OneKeyBack_Line_Flag = 0;//先默认是直线返航
                                            AutoWing_AutoLanding_Flag = 1;
                                        }
                                        else
                                        {
                                            AutoStartLand_Wav.Stop();			//自主着陆结束
                                        }
                                    }
                                    else
                                    {
                                        System.Windows.MessageBox.Show("Please Ensure That It Is Used In GPS Or Road Point Mode");
                                    }

                                }
                                if (CommandFlag == 3)//自主起飞
                                {
                                    CommandButtonColor();
                                    if (AllAerocraftData.AutoWingFlightMode == 0)
                                    {

                                        if (AllAerocraftData.AutoWingCommunitationState > 0 && AllAerocraftData.AutoWingCommunitationState < AllAerocraftData.AutoWingMarkerNums)
                                        {
                                            AutoStartBreakMessionTransmit_Wav.Play();			//断点续喷
                                            if (System.Windows.Forms.MessageBox.Show("Is The Breakpoint Continued?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                                            {
                                                AutoStartBreakMessionTransmit_Wav.Stop();			//断点续喷结束
                                                if (Wifi_Success_Connect_Flag == true)
                                                {
                                                    Function_Wait();
                                                }
                                                else if (Dat_Save_Flag == 1)
                                                {
                                                    Function_Wait();
                                                }
                                                else
                                                {

                                                }
                                                Constants.Jump_To5or50Hz_Flag = -1;
                                                AutoWing_AutoLanding_Flag = 0;
                                                AutoWing_RoadPoint_Flag = 0;
                                                AutoWing_OneKeyBack_Line_Flag = 0;//先默认是直线返航
                                                //     AutoWing_OneKeyBack_Path_Flag = 0;//原路径返航先不用
                                                AutoWing_AutoTakeOff_Flag = 1;
                                                return;
                                            }
                                            else
                                            {
                                                AutoStartBreakMessionTransmit_Wav.Stop();			//断点续喷结束
                                                return;
                                            }
                                        }
                                        AutoStartFly_Wav.Play();			//自主起飞语音播放
                                        if (System.Windows.Forms.MessageBox.Show("Make Sure To Send Take Off?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                                        {
                                            AutoStartFly_Wav.Stop();//自主起飞语音停止
                                            /////////////////////////////////////////////////////打开等待旋转界面///////////////////////////////////////////////
                                            if (Wifi_Success_Connect_Flag == true)
                                            {
                                                Function_Wait();
                                            }
                                            else if (Dat_Save_Flag == 1)
                                            {
                                                Function_Wait();
                                            }
                                            else
                                            {

                                            }

                                            Constants.Jump_To5or50Hz_Flag = -1;
                                            AutoWing_AutoLanding_Flag = 0;
                                            AutoWing_RoadPoint_Flag = 0;
                                            AutoWing_OneKeyBack_Path_Flag = 0;
                                            AutoWing_OneKeyBack_Line_Flag = 0;//先默认是直线返航
                                            AutoWing_AutoTakeOff_Flag = 1;
                                        }
                                        else
                                        {
                                            AutoStartFly_Wav.Stop();//自主起飞语音停止
                                        }
                                    }
                                    else
                                    {
                                        System.Windows.MessageBox.Show("Please Ensure That It Is Used In Ready Mode");
                                    }
                                }
                                if (CommandFlag == 10)//路点发送
                                {
                                    CommandButtonColor();
                                    if (AllAerocraftData.AutoWingFlightMode == 3 || AllAerocraftData.AutoWingFlightMode == 4 || AllAerocraftData.AutoWingFlightMode == 0)
                                    {
                                        AutoStartMessionTransmit_Wav.Play();//准备上传路点语音播报
                                        if (System.Windows.Forms.MessageBox.Show("Make Sure To Send Waypoints?", "Prompt", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
                                        {
                                            AutoStartMessionTransmit_Wav.Stop();//准备上传路点语音播报结束
                                            if (ProjectList_X.Count > 0)
                                            {
                                                if (ProjectList_X[0].WaypointData.Count > 0)
                                                {
                                                    // WayPoint_NumS = ProjectList_X[0].WaypointData.Count;
                                                    //  for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                    //  {
                                                    // WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Latitude;
                                                    //  WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Longitude;
                                                    /////////////////分区域发送路点///////////////////////////////////////////
                                                    //  }
                                                    if (ProjectList_X[0].WaypointData.Count < 101)
                                                    {
                                                        WayPoint_NumS = ProjectList_X[0].WaypointData.Count;
                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                        {
                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Latitude;
                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Longitude;
                                                            ///////////////分区域发送路点///////////////////////////////////////////

                                                            ////////////////////////////是否喷洒的标志位//////////////////////////////
                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[M_Save_i];
                                                        }
                                                    }
                                                    else if (ProjectList_X[0].WaypointData.Count > 100)
                                                    {
                                                        if (AreaWaypointSelect_X.Count > 0 && AreaWaypointSelect_X.Count <= 1)
                                                        {

                                                            switch (AreaWaypointSelect_X[0])
                                                            {
                                                                case 1:
                                                                    WayPoint_NumS = 100;
                                                                    for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                    {
                                                                        WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Latitude;
                                                                        WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Longitude;
                                                                        ///////////////分区域发送路点///////////////////////////////////////////
                                                                        usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[M_Save_i];
                                                                    }
                                                                    break;
                                                                case 2:
                                                                    if (ProjectList_X[0].WaypointData.Count > 200)
                                                                    {
                                                                        WayPoint_NumS = 100;
                                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                        {
                                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[100 + M_Save_i].Latitude;
                                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[100 + M_Save_i].Longitude;
                                                                            ///////////////分区域发送路点///////////////////////////////////////////
                                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[100 + M_Save_i];
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 100);
                                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                        {
                                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[100 + M_Save_i].Latitude;
                                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[100 + M_Save_i].Longitude;
                                                                            ///////////////分区域发送路点///////////////////////////////////////////
                                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[100 + M_Save_i];
                                                                        }
                                                                    }
                                                                    break;
                                                                case 3:
                                                                    if (ProjectList_X[0].WaypointData.Count > 300)
                                                                    {
                                                                        WayPoint_NumS = 100;
                                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                        {
                                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[200 + M_Save_i].Latitude;
                                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[200 + M_Save_i].Longitude;
                                                                            ///////////////分区域发送路点///////////////////////////////////////////
                                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[200 + M_Save_i];
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 200);
                                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                        {
                                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[200 + M_Save_i].Latitude;
                                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[200 + M_Save_i].Longitude;
                                                                            ///////////////分区域发送路点///////////////////////////////////////////
                                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[200 + M_Save_i];
                                                                        }
                                                                    }
                                                                    break;
                                                                case 4:
                                                                    if (ProjectList_X[0].WaypointData.Count > 400)
                                                                    {
                                                                        WayPoint_NumS = 100;
                                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                        {
                                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Latitude;
                                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Longitude;
                                                                            ///////////////分区域发送路点///////////////////////////////////////////
                                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[300 + M_Save_i];
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 300);
                                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                        {
                                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Latitude;
                                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Longitude;
                                                                            ///////////////分区域发送路点///////////////////////////////////////////
                                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[300 + M_Save_i];
                                                                        }
                                                                    }
                                                                    break;
                                                                case 5:
                                                                    if (ProjectList_X[0].WaypointData.Count > 500)
                                                                    {
                                                                        WayPoint_NumS = 100;
                                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                        {
                                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Latitude;
                                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Longitude;
                                                                            ///////////////分区域发送路点///////////////////////////////////////////
                                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[400 + M_Save_i];
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 400);
                                                                        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                        {
                                                                            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Latitude;
                                                                            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Longitude;
                                                                            ///////////////分区域发送路点///////////////////////////////////////////
                                                                            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[400 + M_Save_i];
                                                                        }
                                                                    }
                                                                    break;
                                                                //case 6:
                                                                //    if (ProjectList_X[0].WaypointData.Count > 300)
                                                                //    {
                                                                //        WayPoint_NumS = 50;
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[250 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[250 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[250 + M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    else
                                                                //    {
                                                                //        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 250);
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[250 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[250 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[250 + M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    break;
                                                                //case 7:
                                                                //    if (ProjectList_X[0].WaypointData.Count > 350)
                                                                //    {
                                                                //        WayPoint_NumS = 50;
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[300 + M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    else
                                                                //    {
                                                                //        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 300);
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[300 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[300 + M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    break;
                                                                //case 8:
                                                                //    if (ProjectList_X[0].WaypointData.Count > 400)
                                                                //    {
                                                                //        WayPoint_NumS = 50;
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[350 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[350 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[350 + M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    else
                                                                //    {
                                                                //        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 350);
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[350 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[350 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[350 + M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    break;
                                                                //case 9:
                                                                //    if (ProjectList_X[0].WaypointData.Count > 450)
                                                                //    {
                                                                //        WayPoint_NumS = 50;
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[400 + M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    else
                                                                //    {
                                                                //        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 400);
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[400 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[400 + M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    break;
                                                                //case 10:
                                                                //    if (ProjectList_X[0].WaypointData.Count > 500)
                                                                //    {
                                                                //        WayPoint_NumS = 50;
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[450 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[450 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[450 + M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    else
                                                                //    {
                                                                //        WayPoint_NumS = (ProjectList_X[0].WaypointData.Count - 450);
                                                                //        for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                                //        {
                                                                //            WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[450 + M_Save_i].Latitude;
                                                                //            WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[450 + M_Save_i].Longitude;
                                                                //            ///////////////分区域发送路点///////////////////////////////////////////
                                                                //            usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[450 + M_Save_i];
                                                                //        }
                                                                //    }
                                                                //    break;
                                                                default:
                                                                    break;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            WayPoint_NumS = 100;
                                                            for (int M_Save_i = 0; M_Save_i < WayPoint_NumS; M_Save_i++)
                                                            {
                                                                WayPoint_Lat[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Latitude;
                                                                WayPoint_Lon[M_Save_i] = ProjectList_X[0].WaypointData[M_Save_i].Longitude;
                                                                ///////////////分区域发送路点///////////////////////////////////////////
                                                                usedyesornot_pensa_flag[M_Save_i] = yesornot_pensa_flag[M_Save_i];
                                                            }
                                                        }

                                                    }


                                                }
                                            }

                                            /////////////////////////////////////////////////////打开等待旋转界面///////////////////////////////////////////////
                                            if (Wifi_Success_Connect_Flag == true && WayPoint_NumS > 0)
                                            {
                                                Function_Wait();
                                            }
                                            else if (Dat_Save_Flag == 1 && WayPoint_NumS > 0)
                                            {
                                                Function_Wait();
                                            }
                                            else
                                            {

                                            }
                                            Constants.Jump_To5or50Hz_Flag = -1;
                                            AutoWing_AutoLanding_Flag = 0;
                                            AutoWing_OneKeyBack_Line_Flag = 0;//先默认是直线返航
                                            //     AutoWing_OneKeyBack_Path_Flag = 0;//原路径返航先不用
                                            AutoWing_AutoTakeOff_Flag = 0;
                                            AutoWing_RoadPoint_Flag = 1;
                                        }
                                        else
                                        {
                                            AutoStartMessionTransmit_Wav.Stop();//准备上传路点语音播报结束
                                        }
                                    }
                                    else
                                    {
                                        System.Windows.MessageBox.Show("Please Ensure That It Is Used In Road Point Mode");
                                    }
                                }
                            }
                            else
                            {
                                if (CommandFlag == 4)
                                {
                                    CommandButtonColor();
                                    MainMonitorClear();
                                    DrawTrack_Count = 0;
                                    Start_DrawRoute_Flag = 1;
                                }
                                else
                                {
                                    System.Windows.MessageBox.Show("Please Ensure That It Is Used In Correct Mode");
                                }
                            }
                        }
                        else
                        {
                            _command.Foreground = Brushes.Red;
                            _command.BorderBrush = Brushes.Red;
                        }
                        break;

                    case 2:     //日志回放模式
                        if (CommandFlag == 10 || CommandFlag == 11)
                        {
                            _command.Foreground = Brushes.Red;
                            _command.BorderBrush = Brushes.Red;
                        }
                        else
                        {
                            System.Diagnostics.Debug.WriteLine("命令：" + str);

                            if (str == Constants._commandUser2_3)					//暂停模式
                            {
                                PlayFlag = false;				//Stop
                                _command.Content = Constants._commandUser2_2;		//重新开始
                            }
                            else if (str == Constants._commandUser2_2)				//重新开始
                            {
                                PlayFlag = true;				//Paly
                                _command.Content = Constants._commandUser2_3;     //暂停
                            }
                            else if (str == Constants._commandUser3_2)				//重新开始
                            {
                                PlayFlag = false;				//Paly
                                User2.Content = Constants._commandUser2_2;			//暂停
                            }
                            CommandFlightLog();
                        }
                        break;

                    default:
                        break;
                }
            }
        }
        private void Command_TouchUp(object sender, TouchEventArgs e)
        {
            Label.Background = Brushes.Blue;
            System.Windows.Controls.Label _command = sender as System.Windows.Controls.Label;

            if (_command != null)
            {
                _command.Foreground = Brushes.White;
                _command.BorderBrush = Brushes.White;
                _command.ReleaseTouchCapture(e.TouchDevice);

                switch (DataConstellation.CommandMode)
                {
                    case 1:     //无人机操作模式

                        if (CommandTimer.Enabled)
                        {
                            CommandTimer.Enabled = false;
                            CommandTimer.Stop();
                            CommandFlag = 0;
                        }
                        CommandStopMessage();
                        break;
                    case 2:     //日志回放模式
                        break;
                    default:
                        break;
                }
            }
            User4.Foreground = Brushes.White;
            User4.BorderBrush = Brushes.White;
            if (CommandTimer.Enabled)
            {
                CommandTimer.Enabled = false;
                CommandTimer.Stop();
                CommandFlag = 0;
            }
        }
        /// <summary>
        /// 命令失去鼠标捕获
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Command_LostMouseCapture(object sender, System.Windows.Input.MouseEventArgs e)
        {
            System.Windows.Controls.Label _command = sender as System.Windows.Controls.Label;

            if (_command != null)
            {
                _command.Foreground = Brushes.White;
                _command.BorderBrush = Brushes.White;
                if (_command.IsMouseCaptured)
                {
                    _command.ReleaseMouseCapture();//释放鼠标捕获
                }
                switch (DataConstellation.CommandMode)
                {
                    case 1:     //无人机操作模式
                        if (CommandTimer.Enabled)
                        {
                            CommandTimer.Enabled = false;
                            CommandTimer.Stop();
                            CommandFlag = 0;
                        }
                        CommandStopMessage();
                        break;
                    case 2:     //日志回放模式
                        // 
                        break;
                    default:
                        break;
                }
            }
        }
        private void Command_LostTouchCapture(object sender, TouchEventArgs e)
        {
            Label.Background = Brushes.Blue;
            System.Windows.Controls.Label _command = sender as System.Windows.Controls.Label;

            if (_command != null)
            {
                _command.Foreground = Brushes.White;
                _command.BorderBrush = Brushes.White;
                _command.ReleaseTouchCapture(e.TouchDevice);

                switch (DataConstellation.CommandMode)
                {
                    case 1:     //无人机操作模式

                        if (CommandTimer.Enabled)
                        {
                            CommandTimer.Enabled = false;
                            CommandTimer.Stop();
                            CommandFlag = 0;
                        }
                        CommandStopMessage();
                        break;
                    case 2:     //日志回放模式
                        break;
                    default:
                        break;
                }
            }
            User4.Foreground = Brushes.White;
            User4.BorderBrush = Brushes.White;
            if (CommandTimer.Enabled)
            {
                CommandTimer.Enabled = false;
                CommandTimer.Stop();
                CommandFlag = 0;
            }
        }

        // 无人机操作（开始）
        private void CommandTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (CommandTimer.Enabled)
                {
                    // 命令按钮并按住显示中颜色的变化
                    CommandButtonColor();
                    List<string> tag = new List<string>();
                    List<string> value = new List<string>();
                    string text = string.Empty;
                    switch (CommandFlag)
                    {
                        case 1:
                            #region User1 命令按钮
                            //mainlinkset消息
                            /*		tag.Add("Data/UAV/Home/SendFlag");
                                    value.Add("T");
                                    text = DataConstellation.SetMassage(XmlMessage.MainlinkSend_Home, tag, value);
                                    _logger.Info("Command GoHome");*/
                            //发送部分修改为我们这边协议部分
                            //       Port.SendOneKeyToReturn_Line(2);//直线返航
                            break;
                            #endregion
                        case 2:
                            #region User2 命令按钮
                            /*        tag.Add("Data/UAV/Land/SendFlag");
							value.Add("T");
							text = DataConstellation.SetMassage(XmlMessage.MainlinkSend_Land, tag, value);
							_logger.Info("Command Land");*/
                            //自主着陆  
                            //        Port.SendAutoLanding(1);//自主着陆
                            break;
                            #endregion
                        case 3:
                            #region User3 命令按钮
                            tag.Add("Data/UAV/Resume/SendFlag");
                            value.Add("T");
                            text = DataConstellation.SetMassage(XmlMessage.MainlinkSend_Resume, tag, value);
                            _logger.Info("Command Resume");
                            break;
                            #endregion
                        case 4:
                            #region User4 命令按钮
                            tag.Add("Data/UAV/Pause/SendFlag");
                            value.Add("T");
                            text = DataConstellation.SetMassage(XmlMessage.MainlinkSend_Pause, tag, value);
                            _logger.Info("Command Pause");
                            break;
                            #endregion
                        case 10:
                            #region Waypoint发送
                            if (WaypointCount == 1)
                            {
                                DataConstellation.BindingData.Waypoint.Lat = WaypointMarker.Position.Lat + Properties.Settings.Default.LatSub;
                                DataConstellation.BindingData.Waypoint.Lon = WaypointMarker.Position.Lng + Properties.Settings.Default.LngSub;
                                DataConstellation.BindingData.Waypoint.Yaw = WaypointMarker.Azimuth;
                                DataConstellation.BindingData.Waypoint.Alt = WaypointMarker.Altitude;
                                DataConstellation.BindingData.Waypoint.Speed = WaypointMarker.Speed;

                                Debug.WriteLine("Lat:" + DataConstellation.BindingData.Waypoint.Lat);
                                Debug.WriteLine("Lon:" + DataConstellation.BindingData.Waypoint.Lon);
                                Debug.WriteLine("Yaw:" + DataConstellation.BindingData.Waypoint.Yaw);
                                Debug.WriteLine("Alt:" + DataConstellation.BindingData.Waypoint.Alt);

                                tag.Add("Data/UAV/Wpt/SendFlag");
                                value.Add("T");
                                tag.Add("Data/UAV/Wpt/Lat");
                                value.Add(DataConstellation.BindingData.Waypoint.Lat.ToString());
                                tag.Add("Data/UAV/Wpt/Lon");
                                value.Add(DataConstellation.BindingData.Waypoint.Lon.ToString());
                                tag.Add("Data/UAV/Wpt/Alt");
                                value.Add(DataConstellation.BindingData.Waypoint.Alt.ToString());
                                tag.Add("Data/UAV/Wpt/Yaw");
                                value.Add(DataConstellation.BindingData.Waypoint.Yaw.ToString());
                                tag.Add("Data/UAV/Wpt/Spd");
                                value.Add(DataConstellation.BindingData.Waypoint.Speed.ToString());				// Settings Watpoint Speed值
                                text = DataConstellation.SetMassage(XmlMessage.MainlinkSend_Waypoint, tag, value);

                                Debug.WriteLine("Time:" + DateTime.Now);
                                //Label.Content = "長押し後、Waypointを転送します。";

                                // 指定基站GPS点
                                if (GPSMode == 1)
                                {
                                    if (!string.IsNullOrEmpty(text))
                                    {
                                        Send(Client, text); //发送
                                        sendDone.WaitOne(); //发送等待
                                        Debug.WriteLine("发送命令＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞\n" + text);
                                    }
                                    return;
                                }
                            }
                            _logger.Info("Command Waypoint");
                            break;
                            #endregion
                        case 11:
                            #region Waypointmarker　确定
                            if (WaypointCount == 1)
                            {
                                MarkerClear(WaypointMarker);
                            }
                            else
                            {
                                PosClear.Foreground = Brushes.Red;
                                PosClear.BorderBrush = Brushes.Red;
                            }
                            break;
                            #endregion
                        default:
                            text = string.Empty;
                            break;
                    }
                    if (CommandTimer.Interval == 1000 || CommandTimer.Interval == 20)
                    {
                        //CommandTimer.Interval = Constants._commandInterval;
                        CommandTimer.Enabled = false;
                        CommandTimer.Stop();
                    }
                    if (!string.IsNullOrEmpty(text))
                    {
                        Send(Client, text); //发送
                        sendDone.WaitOne(); //发送等待
                        Debug.WriteLine("发送命令＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞\n" + text);
                    }
                }
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show("(601) Command Send Error: " + ex.Message);
                _logger.Error("(601) Command Send Error: " + ex.Message);
            }

        }
        // 无人机的操作命令 (停止)
        private void CommandStopMessage()
        {
            List<string> tag = new List<string>();
            List<string> value = new List<string>();
            string text = string.Empty;
            switch (CommandFlag)
            {
                case 1:
                    #region User1命令按钮
                    //mainlinkset消息
                    tag.Add("Data/UAV/Home/SendFlag");
                    value.Add("F");
                    text = DataConstellation.SetMassage(XmlMessage.MainlinkSend_Home, tag, value);
                    break;
                    #endregion
                case 2:
                    #region User2命令按钮
                    tag.Add("Data/UAV/Land/SendFlag");
                    value.Add("F");
                    text = DataConstellation.SetMassage(XmlMessage.MainlinkSend_Land, tag, value);
                    break;
                    #endregion
                case 3:
                    #region User3命令按钮
                    tag.Add("Data/UAV/Resume/SendFlag");
                    value.Add("F");
                    text = DataConstellation.SetMassage(XmlMessage.MainlinkSend_Resume, tag, value);
                    break;
                    #endregion
                case 4:
                    #region User4命令按钮
                    tag.Add("Data/UAV/Pause/SendFlag");
                    value.Add("F");
                    text = DataConstellation.SetMassage(XmlMessage.MainlinkSend_Pause, tag, value);
                    break;
                    #endregion
                case 10:
                    #region Waypoint发送
                    if (WaypointCount == 1)
                    {
                        tag.Add("Data/UAV/Wpt/SendFlag");
                        value.Add("F");
                        text = DataConstellation.SetMassage(XmlMessage.MainlinkSend_Waypoint, tag, value);
                    }
                    break;
                    #endregion
                default:
                    text = string.Empty;
                    break;
            }
            if (CommandTimer.Interval == 1000 && CommandFlag != 11)
            {
                CommandTimer.Interval = Constants._commandInterval;
            }
            if (!string.IsNullOrEmpty(text))
            {
                Send(Client, text); //发送
                sendDone.WaitOne(); //发送等待
                Debug.WriteLine("发送命令＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞\n" + text);
            }
        }

        // 飞行日志中播放命令
        private void CommandFlightLog()
        {
            CommandButtonColor();
            string text = string.Empty; ;
            switch (CommandFlag)
            {
                case 1:
                    #region User1命令按钮
                    text = DataConstellation.SetMassage(XmlMessage.Set_FlightLogPlay,
                                                        new List<string> { "FlightLog/Play/OpeMode" },
                                                        new List<string> { "PREV" });
                    Send(Client, text); //发送
                    sendDone.WaitOne(); //发送等待
                    Debug.WriteLine("Command:" + text);
                    System.Threading.Thread.Sleep(20);		// wait	
                    text = CommandPlayPause();
                    break;
                    #endregion
                case 2:
                    #region User2命令按钮
                    text = CommandPlayPause();
                    break;
                    #endregion
                case 3:
                    #region User3命令按钮
                    text = DataConstellation.SetMassage(XmlMessage.Set_FlightLogPlay,
                                                        new List<string> { "FlightLog/Play/OpeMode" },
                                                        new List<string> { "STOP" });
                    break;
                    #endregion
                case 4:
                    #region User4命令按钮
                    text = DataConstellation.SetMassage(XmlMessage.Set_FlightLogPlay,
                                                        new List<string> { "FlightLog/Play/OpeMode" },
                                                        new List<string> { "NEXT" });
                    Send(Client, text); //发送
                    sendDone.WaitOne(); //发送等待
                    Debug.WriteLine("Command:" + text);
                    System.Threading.Thread.Sleep(20);		// wait
                    text = CommandPlayPause();
                    break;
                    #endregion
                default:
                    text = string.Empty;
                    break;
            }
            if (!string.IsNullOrEmpty(text))
            {
                Debug.WriteLine("Command:" + text + "\n\n");
                Send(Client, text); //发送
                sendDone.WaitOne(); //发送等待
            }
        }

        // 日志回放滑块
        private void PlayerSlide_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            Debug.WriteLine(">>> SCROLL：" + e.NewValue + "/" + PlayerSlide.ScrollType);
            if (DataConstellation.CommandMode == 2 &&
                PlayerSlide.ScrollType != System.Windows.Controls.Primitives.ScrollEventType.ThumbPosition)
            {

                // 滑块发送日志回放
                string text = DataConstellation.SetMassage(XmlMessage.Set_FlightLogSlidebar,
                                                            new List<string> { "FlightLog/Play/CurrentTime" },
                                                            new List<string> { e.NewValue.ToString() });
                Send(Client, text); //发送
                sendDone.WaitOne(); //发送等待

                System.Threading.Thread.Sleep(20);		// wait

                text = CommandPlayPause();

                Send(Client, text); //发送
                sendDone.WaitOne(); //发送等待
            }
            PlayerSlide.ScrollType = System.Windows.Controls.Primitives.ScrollEventType.ThumbPosition;
        }

        /// <summary>
        /// 命令开始与停止
        /// </summary>
        /// <returns></returns>
        private string CommandPlayPause()
        {
            string text;

            if (PlayFlag)   //重新开始
            {
                text = DataConstellation.SetMassage(XmlMessage.Set_FlightLogPlay,
                            new List<string> { "FlightLog/Play/OpeMode" },
                            new List<string> { "PLAY" });
            }
            else           //暂停模式
            {
                text = DataConstellation.SetMassage(XmlMessage.Set_FlightLogPlay,
                            new List<string> { "FlightLog/Play/OpeMode" },
                            new List<string> { "PAUSE" });
            }

            return text;
        }

        private void Command_TransmitCompleted()
        {
            SendSound.Position = new TimeSpan(0);
            SendSound.Stop();
            switch (DataConstellation.CommandMode)
            {

                case 1:     //无人机操作模式
                    if (DataConstellation.BindingData.nControlMode == 4)
                    {

                        switch (CommandFlag)
                        {
                            case 1:
                                Label.Content = "点击后自动返航";
                                break;
                            case 2:
                                Label.Content = "点击后自动着陆";
                                break;
                            case 3:
                                Label.Content = "点击后自动起飞";
                                break;
                            case 4:
                                Label.Content = "点击后清除轨迹";
                                break;
                            case 10:
                                Label.Content = "点击后上传路点";
                                break;
                            case 12:
                                Label.Content = "双击改变速度";
                                break;
                            default:
                                break;
                        }
                    }
                    else if (DataConstellation.BindingData.nControlMode == 3)
                    {
                        switch (CommandFlag)
                        {
                            case 1:
                                Label.Content = "点击后自动返航";
                                break;
                            case 2:
                                Label.Content = "点击后自动着陆";
                                break;
                            case 3:
                                Label.Content = "点击后自动起飞";
                                break;
                            case 4:
                                Label.Content = "点击后清除轨迹";
                                break;
                            case 10:
                                Label.Content = "点击后上传路点";
                                break;
                            case 12:
                                Label.Content = "双击改变速度。";
                                break;
                            default:
                                break;
                        }
                    }
                    else
                    {
                        string _text = "";
                        if (DataConstellation.BindingData.nControlModeName != "")
                        {
                            //         _text = DataConstellation.BindingData.nControlModeName + "模式不可用。";
                        }
                        else
                        {
                            _text = "";
                        }
                        switch (CommandFlag)
                        {
                            case 1:
                                Label.Content = "点击后自动返航";
                                break;
                            case 2:
                                Label.Content = "点击后自动着陆";
                                break;
                            case 3:
                                Label.Content = "点击后自动起飞";
                                break;
                            case 4:
                                Label.Content = "点击后清除轨迹";
                                break;
                            case 10:
                                Label.Content = "点击后上传路点";
                                break;
                            case 12:
                                Label.Content = "双击改变速度。";
                                break;
                            default:
                                break;
                        }

                    }

                    Popup.IsOpen = true;
                    break;

                case 2:     //日志回放模式
                    switch (CommandFlag)
                    {
                        case 1:
                            Label.Content = "返回到以前的控制模式。";
                            break;
                        case 2:
                            Label.Content = "播放/暂停停止。";
                            break;
                        case 3:
                            Label.Content = "停止。";
                            break;
                        case 4:
                            Label.Content = "转至控制模式。";
                            break;
                        case 10:
                            Label.Content = "在播放过程中不能使用。";
                            break;
                        case 11:
                            break;
                        default:
                            break;
                    }
                    Popup.IsOpen = true;
                    break;

                default:
                    break;
            }
        }
        private void Command_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)
        {
            System.Windows.Controls.Label _command = sender as System.Windows.Controls.Label;

            if (_command != null)
            {
                string str = (string)_command.Content;
                CommandFlag = CommandButtonMode(str);

                // 发送完成弹出显示
                Command_TransmitCompleted();
            }
        }
        private void Command_MouseLeave(object sender, System.Windows.Input.MouseEventArgs e)
        {
            Label.Background = Brushes.Blue;
            Popup.IsOpen = false;
        }
        private void Command_TouchEnter(object sender, System.Windows.Input.TouchEventArgs e)
        {
            System.Windows.Controls.Label _command = sender as System.Windows.Controls.Label;

            if (_command != null)
            {
                string str = (string)_command.Content;
                CommandFlag = CommandButtonMode(str);

                // 发送完成弹出显示
                Command_TransmitCompleted();
            }
        }
        private void Command_TouchLeave(object sender, System.Windows.Input.TouchEventArgs e)
        {
            Label.Background = Brushes.Blue;
            Popup.IsOpen = false;
        }


        private void ComandTransmitCheck()
        {
            if (DataConstellation.CommandMode == 2) return;
            // 飞行指挥和自主导航:
            if (DataConstellation.BindingData.nControlMode == 4)
            {
                switch (CommandFlag)
                {
                    case 1:			//自动反馈
                        if (DataConstellation.BindingData.CommandReplay == 4)
                        {
                            if (Label.Content != Constants._commandUser1_1 + "发送完成")
                            {
                                SendSound.Play();
                                Label.Content = Constants._commandUser1_1 + "发送完成";
                                Label.Background = Brushes.Green;
                            }
                        }
                        break;

                    case 2:			//
                        if (DataConstellation.BindingData.CommandReplay == 6)
                        {
                            if (Label.Content != Constants._commandUser2_1 + "发送完成")
                            {
                                SendSound.Play();
                                Label.Content = Constants._commandUser2_1 + "发送完成";
                                Label.Background = Brushes.Green;
                            }
                        }
                        break;

                    case 3:			//
                        if (DataConstellation.BindingData.CommandReplay == 8)
                        {
                            if (Label.Content != Constants._commandUser3_1 + "发送完成")
                            {
                                SendSound.Play();
                                Label.Content = Constants._commandUser3_1 + "发送完成";
                                Label.Background = Brushes.Green;
                            }
                        }
                        break;

                    case 4:			//
                        if (DataConstellation.BindingData.CommandReplay == 7)
                        {
                            if (Label.Content != Constants._commandUser4_1 + "发送完成")
                            {
                                SendSound.Play();
                                Label.Content = Constants._commandUser4_1 + "发送完成";
                                Label.Background = Brushes.Green;
                            }
                        }
                        break;

                    case 10:			//
                        int count = 0;
                        double _lat = Math.Abs(WaypointMarker.Position.Lat - NWaypointMarker.Position.Lat);
                        double _lng = Math.Abs(WaypointMarker.Position.Lng - NWaypointMarker.Position.Lng);
                        double _alt = Math.Abs(WaypointMarker.Altitude - NWaypointMarker.Altitude);
                        double _azi = Math.Abs(WaypointMarker.Azimuth - NWaypointMarker.Azimuth);
                        double _spd = Math.Abs(WaypointMarker.Speed - NWaypointMarker.Speed);

                        if (_lat < 0.000001)
                        {
                            count++;
                        }
                        if (_lng < 0.000001)
                        {
                            count++;
                        }
                        if (_alt < 1)
                        {
                            count++;
                        }
                        if (_azi < 1)
                        {
                            count++;
                        }
                        if (_spd < 1)
                        {
                            count++;
                        }

                        if (count >= 5)
                        {
                            if (DataConstellation.BindingData.CommandReplay == 17)
                            {
                                if (Label.Content != "Waypoint发送完成")
                                {
                                    SendSound.Play();
                                    Label.Content = "Waypoint发送完成";
                                    Label.Background = Brushes.Green;
                                }
                            }
                        }

                        break;

                    default:
                        break;
                }
            }
            else if (DataConstellation.BindingData.nControlMode == 3)
            {
                switch (CommandFlag)
                {
                    case 1:			//自动反馈
                        if (DataConstellation.BindingData.CommandReplay == 4)
                        {
                            if (Label.Content != Constants._commandUser1_1 + "发送完成")
                            {
                                SendSound.Play();
                                Label.Content = Constants._commandUser1_1 + "发送完成";
                                Label.Background = Brushes.Green;
                            }
                        }
                        break;

                    case 2:			//
                        if (DataConstellation.BindingData.CommandReplay == 6)
                        {
                            if (Label.Content != Constants._commandUser2_1 + "发送完成")
                            {
                                SendSound.Play();
                                Label.Content = Constants._commandUser2_1 + "发送完成";
                                Label.Background = Brushes.Green;
                            }
                        }
                        break;
                    default:
                        break;
                }
            }
        }

        private void PosSpd_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            switch ((string)PosSpd.Content)
            {
                case Constants._commandPosSpd0:
                    PosSpd.Content = Constants._commandPosSpd1;
                    WaypointMarker.Speed = 1;
                    break;

                case Constants._commandPosSpd1:
                    PosSpd.Content = Constants._commandPosSpd2;
                    WaypointMarker.Speed = 3;
                    break;

                case Constants._commandPosSpd2:
                    PosSpd.Content = Constants._commandPosSpd3;
                    WaypointMarker.Speed = 5;
                    break;

                case Constants._commandPosSpd3:
                    PosSpd.Content = Constants._commandPosSpd0;
                    WaypointMarker.Speed = Properties.Settings.Default.Waypoint_Speed;
                    break;

                default:
                    PosSpd.Content = Constants._commandPosSpd0;
                    WaypointMarker.Speed = Properties.Settings.Default.Waypoint_Speed;
                    break;
            }
        }
        private void WaypointSpeedValue(string _str)
        {
            switch (_str)
            {
                case Constants._commandPosSpd0:
                    //WaypointMarker.Speed = WaypointMarker.Speed;
                    break;

                case Constants._commandPosSpd1:
                    WaypointMarker.Speed = 1;
                    break;

                case Constants._commandPosSpd2:
                    WaypointMarker.Speed = 3;
                    break;

                case Constants._commandPosSpd3:
                    WaypointMarker.Speed = 5;
                    break;

                default:
                    break;
            }
        }
        #endregion

        #region 多点触摸操作 (地图)
        /// <summary>
        /// 多点触摸操作
        /// WayPoint控制
        /// 地图控件
        /// </summary>      
        private void Map_TouchDown(object sender, TouchEventArgs e)
        {
            _logger.Info("Map_TouchDown");
            TouchPoint p = e.GetTouchPoint(this);

            double dis = 9999;
            if (WaypointCount > 0)
            {
                TouchPoint p1 = e.GetTouchPoint(MainMap);
                System.Windows.Point p2 = new System.Windows.Point();
                GPoint p3 = MainMap.FromLatLngToLocal(WaypointMarker.Position);

                p2.X = (p1.Position.X - p3.X);
                p2.Y = (p1.Position.Y - p3.Y);
                dis = Math.Sqrt((p2.X * p2.X) + (p2.Y * p2.Y));
            }
            oldp = p.Position;	//初始值
            if (dis > 30)
            {
                if (MultiTouchControl.TouchCount == 0)
                {
                    MultiTouchControl.InitTouchPonit = p.Position;
                    MultiTouchControl.TouchID1 = e.TouchDevice.Id;
                    MultiTouchControl.TouchPonit1 = p.Position;

                }
                else if (MultiTouchControl.TouchCount == 1)
                {
                    MultiTouchControl.TouchID2 = e.TouchDevice.Id;
                    MultiTouchControl.TouchPonit2 = p.Position;
                }
                MultiTouchControl.TouchCount++;
            }
        }
        private void Map_TouchUp(object sender, TouchEventArgs e)
        {
            _logger.Info("Map_TouchUp");
            MultiTouchControl.TouchCount -= 1;
            if (MultiTouchControl.TouchCount < 1)
            {
                MultiTouchControl.MultiTouchdInit();   //多点触摸初始化
            }
            else if (MultiTouchControl.TouchCount < 2)
            {
            }
            MainMap.Mode = 0;
        }

        private System.Windows.Point oldp = new System.Windows.Point();
        private void Map_TouchMove(object sender, TouchEventArgs e)
        {
            _logger.Info("Map_TouchMove");

            if (MultiTouchControl.TouchCount == 0)
            {
                //if (WaypointMarker.IsMouseOver)
                //{
                //	MainMap.Mode = -1;
                //}
            }
            else
            {
                TouchPoint AreaP = e.GetTouchPoint(GridLine);
                TouchPoint p = e.GetTouchPoint(this);

                if (MultiTouchControl.TouchID1 == e.TouchDevice.Id)
                {
                    MultiTouchControl.TouchPonit1 = p.Position;
                }

                if (MultiTouchControl.TouchID2 == e.TouchDevice.Id)
                {
                    MultiTouchControl.TouchPonit2 = p.Position;

                    if (MultiTouchControl.MultiTouchdDtection())
                    {
                        MultiTouchControl.MultiTouchT();

                        // 多点触摸模式选择
                        if (MultiTouchControl.Angle != 0)
                        {
                            //////////////////////////////////////////////////////////////////////////
                            // 若要旋转
                            MapRotate.Angle += MultiTouchControl.Angle;
                            MainMap.Mode = 1;
                        }
                        else if (MultiTouchControl.Distance != 0)
                        {
                            //////////////////////////////////////////////////////////////////////////
                            // 放大缩小地图
                            ZoomName.Value += MultiTouchControl.Distance / (ZoomName.Value + 100);     // <---地图放大缩小

                            // 网格之间的距离
                            GPoint pe = MainMap.FromLatLngToLocal(MainMap.Position);
                            PointLatLng Point = MainMap.FromLocalToLatLng((int)pe.X + GRID_SIZE, (int)pe.Y);
                            double dis = Math.Round(MainMap.MapProvider.Projection.GetDistance(MainMap.Position, Point), 4, MidpointRounding.AwayFromZero);
                            dis *= 1000;// km -> m
                            DisName.Content = dis.ToString() + " m";
                            MainMap.Mode = 2;
                        }
                        MultiTouchControl.MultiTouchFlag = false;
                    }
                }
            }
        }
        private void Main_TouchUp(object sender, TouchEventArgs e)
        {
            _logger.Info("Main_TouchUp");

            MultiTouchControl.TouchCount -= 1;
            if (MultiTouchControl.TouchCount < 1)
            {
                MultiTouchControl.MultiTouchdInit();   //多点触摸初始化
            }
            else if (MultiTouchControl.TouchCount < 2)
            {
                MultiTouchControl.MultiTouchdInit();   //多点触摸初始化
            }
            MainMap.Mode = 0;
        }
        #endregion

        #region MultiWaypoint画面
        // MultiWaypoint启动按钮
        private void TransmitButton_Click(object sender, RoutedEventArgs e)
        {
            _logger.Info("TransmitButton_Click-S");

            if (DataConstellation.ReplyMode == 0 && DataConstellation.BindingData.nDriveMode == 0)
            {
                //// Closeメッセージ
                //string text = DataConstellation.CloseMassage(XmlMessage.Get_UAVData);
                //Send(Client, text);
                //sendDone.WaitOne();

                TransmitBar.Value = 0;
                TransmitSetMassage(0, DataConstellation.BindingData.MulitWaypoint.multi.Count);	//启动消息
            }
            else
            {
                string message = "无法启动传输。\n";
#if DEBUG
				if (DataConstellation.BindingData.nDriveMode != 0)
				{
					//message += "UAVが駆動モードを確認して下さい。";
					message += "ReplyMode：" + DataConstellation.ReplyMode.ToString() + " ×\n";
					message += "DriveMode：" + DataConstellation.BindingData.nDriveMode.ToString() + " ○\n";
				}
				if (DataConstellation.ReplyMode == 0)
				{
					//message += "リプレイモード確認してください。";
					message += "ReplyMode：" + DataConstellation.ReplyMode.ToString() + " ○\n";
					message += "DriveMode：" + DataConstellation.BindingData.nDriveMode.ToString() + " ×\n";
				}
				else
				{
					message += "ReplyMode：" + DataConstellation.ReplyMode.ToString() + " ×\n";
					message += "DriveMode：" + DataConstellation.BindingData.nDriveMode.ToString() + " ×\n";
				}
#endif


                //若要显示一个消息框
                System.Windows.Forms.MessageBox.Show(message, "前进按钮",
                                                        MessageBoxButtons.OK,
                                                        MessageBoxIcon.Error);
                _logger.Info("TransmitButton_Click:" + message);
            }
        }
        // 发送到 MultiWaypoint 数据的中心
        private void TransmitSetMassage(long _id, long _funcId = 0)
        {
            if (DataConstellation.BindingData.MulitWaypoint.multi.Count > 0)
            {
                string text = string.Empty;

                //开始的飞行计划数据传输
                text = DataConstellation.MulitiWaypointSetMassage(_id, _funcId, Properties.Settings.Default.LatSub, Properties.Settings.Default.LngSub);

                if (text != "")
                {
                    Send(Client, text); //发送
                    sendDone.WaitOne(); //发送等待
                    Debug.WriteLine("发送命令＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞＞\n" + text);

                    //　等待重新启动状态
                    if (_funcId != 4294967295)
                    {
                        DataConstellation.ReplyMode = 5;
                    }
                }
            }
        }
        // MultiWaypoint关闭屏幕（取消）
        private void TransmitClosingButton_Click(object sender, RoutedEventArgs e)
        {
            _logger.Info("TransmitClosingButton_Click");
            MultiWaypointClose();
        }
        // MultiWaypoint发送取消
        private void TransmitCancelButton_Click(object sender, RoutedEventArgs e)
        {
            _logger.Info("TransmitCancelButton_Click");
            var clear = MainMap.Markers.Where(p => p != null && p != UAVMarker && p != UAVRoute && p != WaypointMarker && p != NWaypointMarker && p != HomeMarker && p != SubMarker);
            MultiWaypointClose();
        }
        private void TransmitCancel(bool _cancel = false)
        {
            if (DataConstellation.ReplyMode != 0 && TransmitBar.Value != TransmitBar.Maximum)
            {
                DataConstellation.ReplyMode = -1;
            }
            else
            {
                TransmitWindow.Visibility = Visibility.Hidden;
            }
            MenuIsEnabled(0);
        }
        #endregion

        #region Waypoint操作
        /// <summary>
        /// Waypoint指定 
        /// </summary>
        private void WaypointSet(System.Windows.Point point, double dis, double diff)
        {
            _logger.Info("WaypointSet");
            point.Y += 20;

            if (DataConstellation.CommandMode == 1 && DataConstellation.BindingData.nControlMode == 4 && DataConstellation.BindingData.nFlightMode == 1)
            {
                // Waypoint唯一一个
                if (WaypointCount > 0)
                {
                    // 如果在同一个地点，跳过历史点将新点删除
                    GPoint point2 = MainMap.FromLatLngToLocal(WaypointMarker.Position);
                    System.Windows.Point pt = new System.Windows.Point();
                    pt.X = point2.X - point.X;
                    pt.Y = point2.Y - point.Y;
                    dis = Math.Sqrt((pt.X * pt.X) + (pt.Y * pt.Y));


                    if (dis > diff)
                    {
                        MarkerClear(WaypointMarker);
                    }

                }
                // 新的航点
                if ((dis > diff) && (WaypointCount == 0))
                {
                    PointLatLng Waypoint = new PointLatLng();
                    Waypoint = MainMap.FromLocalToLatLng((int)point.X, (int)point.Y - 20);

                    double _altitude = WaypointMarker.Altitude;     // 更新高度
                    double _azimuth = WaypointMarker.Azimuth;       // 航向
                    double _speed = WaypointMarker.Speed;

                    WaypointMarker = new GMapMarker(Waypoint);
                    {
                        //if (!DataConstellation.BindingData.nReset)
                        //{
                        //	WaypointMarker.Altitude = 0;   // 目標値高度バー->0
                        //	WaypointMarker.Azimuth = 0;    // 目標値方位->0
                        //	WaypointMarker.Speed = 0;
                        //}
                        //else
                        //{
                        //	WaypointMarker.Altitude = _altitude;
                        //	WaypointMarker.Azimuth = _azimuth;
                        //	WaypointMarker.Speed = _speed;
                        //}

                        WaypointMarker.Altitude = _altitude;
                        WaypointMarker.Azimuth = _azimuth;
                        WaypointMarker.Speed = _speed;
                        WaypointSpeedValue((string)PosSpd.Content);
                        WaypointMarker.Shape = new XMonitor_GUI.CustomMarkers.Waypoint(this, WaypointMarker, SettingData.DeviceMode);
                        WaypointMarker.Offset = new System.Windows.Point(-25, -40);
                        WaypointMarker.ZIndex = int.MaxValue - 2;
                        MainMap.Markers.Add(WaypointMarker);
                        WaypointCount++;
                    }
                }
            }
            else
            {
                if (DataConstellation.BindingData.nControlModeName != "")
                {
                    //            Label.Content = DataConstellation.BindingData.nControlModeName + "模式不可用。"; ;
                }
                else
                {
                   // Label.Content = "无法连接到飞机";
                }
                if (DataConstellation.CommandMode == 2)
                {
                    Label.Content = "回放模式不可用。";
                }
           //     Popup.IsOpen = true;
                _popupMode = 1;
            }
        }

        // Waypoint双击左键
        private void Uav_WayPoint(object sender, MouseButtonEventArgs e)
        {
            _logger.Info("Uav_WayPoint");
            if ((e.LeftButton == MouseButtonState.Pressed) &&
                (SettingData.DeviceMode == true) &&
                (!SettingData.ModeSetting.Equals("マルチウェイポイント")))//多路点
            {
                WaypointSet(e.GetPosition(MainMap), 1, 0);
            }
            else
            {
                if (DataConstellation.BindingData.nControlModeName != "")
                {
                    //         Label.Content = DataConstellation.BindingData.nControlModeName + "模式不可用。"; ;
                }
                else
                {
                  //  Label.Content = "无法连接到飞机。";
                }
                if (DataConstellation.CommandMode == 2)
                {
                    Label.Content = "回放模式不可用。";
                }
           //     Popup.IsOpen = true;
                _popupMode = 1;
            }
        }
        // Waypoint右键单击按下并且按住
        private void MarkerControl_MouseRightButtonDown(object sender, MouseButtonEventArgs e)
        {
            _logger.Info("MarkerControl_MouseRightButtonDown");
            if ((e.RightButton == MouseButtonState.Pressed) &&
                (SettingData.DeviceMode == false) &&
                (!SettingData.ModeSetting.Equals("マルチウェイポイント")))//多路点
            {
                if(Lock_Marker_Flag==false)
                {
                    WaypointSet(e.GetPosition(MainMap), 31, 30);
                }
            }
            else
            {
                if (DataConstellation.BindingData.nControlModeName != "")
                {
                    //         Label.Content = DataConstellation.BindingData.nControlModeName + "模式不可用。"; ;
                }
                else
                {
                  //  Label.Content = "无法连接到飞机。";
                }
                if (DataConstellation.CommandMode == 2)
                {
                    Label.Content = "回放模式不可用。";
                }
            //    Popup.IsOpen = true;
                _popupMode = 1;
            }
        }

        private void MarkerClear(GMapMarker _marker)
        {
            _logger.Info("MarkerClear");
            // 若要删除标记
            var clear = MainMap.Markers.Where(p => p == _marker);

            if (clear != null)
            {
                // 消除
                for (int i = 0; i < clear.Count(); i++)
                {
                    MainMap.Markers.Remove(clear.ElementAt(i));
                    i--;
                }
            }

            if (_marker == WaypointMarker)
            {
                WaypointCount = 0;
            }
        }

        #endregion

        #region 主屏幕操作相关
        /// <summary>
        /// 主屏幕操作相关
        /// </summary>

        // 地图旋转按钮
        private void RotateAzimuthalValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            _logger.Info("RotateAzimuthalValueChanged");
            MainMap.RenderTransform = new RotateTransform { Angle = MapRotate.Angle };
        }
        // 方向北 (0 °)旋转
        private void MapRotate_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            _logger.Info("MapRotate_MouseLeftButtonDown");
            MapRotate.Angle = 0;
            MainMap.RenderTransform = new RotateTransform { Angle = MapRotate.Angle };
        }
        // 鼠标/触摸 操作切换按钮
        private void TouchIconMouse(object sender, MouseButtonEventArgs e)
        {
            _logger.Info("TouchIconMouse");
            foreach (TabletDevice tabletDevice in Tablet.TabletDevices)
            {
                if (tabletDevice.Type == TabletDeviceType.Touch)
                {
                    if (SettingData.DeviceMode)
                    {
                        SettingData.DeviceMode = false;
                    }
                    else
                    {
                        SettingData.DeviceMode = true;
                    }
                    ChangeTouchMouse(SettingData.DeviceMode, false);
                }
            }
        }

        //　鼠标/触摸操作事件开关
        private void ChangeTouchMouse(bool f, bool Init)
        {
            Altitude.DeviceMode = f;
            if (f)
            {
                //鼠标操作
                var _image = new BitmapImage(new Uri(System.IO.Path.GetFullPath("Resources/chupindianji.png"), UriKind.Relative));
                ImageBrush _imageBrush = new ImageBrush(_image);
                TouchIcon.OpacityMask = _imageBrush;
                //TouchIcon.Source = new BitmapImage(new Uri(System.IO.Path.GetFullPath("Resources/mouse.png")));

                // 命令按钮
                this.User1.MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseDown);
                this.User1.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseUp);
                this.User2.MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseDown);
                this.User2.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseUp);
                this.User3.MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseDown);
                this.User3.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseUp);
                this.User4.MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseDown);
                this.User4.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseUp);
                this.PosSet.MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseDown);
                this.PosSet.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseUp);
                this.PosClear.MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseDown);
                this.PosClear.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseUp);

                this.User1.TouchDown -= new EventHandler<TouchEventArgs>(this.Command_TouchDown);
                this.User1.TouchUp -= new EventHandler<TouchEventArgs>(this.Command_TouchUp);
                this.User2.TouchDown -= new EventHandler<TouchEventArgs>(this.Command_TouchDown);
                this.User2.TouchUp -= new EventHandler<TouchEventArgs>(this.Command_TouchUp);
                this.User3.TouchDown -= new EventHandler<TouchEventArgs>(this.Command_TouchDown);
                this.User3.TouchUp -= new EventHandler<TouchEventArgs>(this.Command_TouchUp);
                this.User4.TouchDown -= new EventHandler<TouchEventArgs>(this.Command_TouchDown);
                this.User4.TouchUp -= new EventHandler<TouchEventArgs>(this.Command_TouchUp);
                this.PosSet.TouchDown -= new EventHandler<TouchEventArgs>(this.Command_TouchDown);
                this.PosSet.TouchUp -= new EventHandler<TouchEventArgs>(this.Command_TouchUp);
                this.PosClear.TouchDown -= new EventHandler<TouchEventArgs>(this.Command_TouchDown);
                this.PosClear.TouchUp -= new EventHandler<TouchEventArgs>(this.Command_TouchUp);

                this.User1.LostMouseCapture += new System.Windows.Input.MouseEventHandler(this.Command_LostMouseCapture);
                this.User1.LostTouchCapture -= new EventHandler<TouchEventArgs>(this.Command_LostTouchCapture);
                this.User2.LostMouseCapture += new System.Windows.Input.MouseEventHandler(this.Command_LostMouseCapture);
                this.User2.LostTouchCapture -= new EventHandler<TouchEventArgs>(this.Command_LostTouchCapture);
                this.User3.LostMouseCapture += new System.Windows.Input.MouseEventHandler(this.Command_LostMouseCapture);
                this.User3.LostTouchCapture -= new EventHandler<TouchEventArgs>(this.Command_LostTouchCapture);
                this.User4.LostMouseCapture += new System.Windows.Input.MouseEventHandler(this.Command_LostMouseCapture);
                this.User4.LostTouchCapture -= new EventHandler<TouchEventArgs>(this.Command_LostTouchCapture);
                this.PosSet.LostMouseCapture += new System.Windows.Input.MouseEventHandler(this.Command_LostMouseCapture);
                this.PosSet.LostTouchCapture -= new EventHandler<TouchEventArgs>(this.Command_LostTouchCapture);

                // 弹出用
                this.User1.MouseEnter += new System.Windows.Input.MouseEventHandler(this.Command_MouseEnter);
                this.User1.MouseLeave += new System.Windows.Input.MouseEventHandler(this.Command_MouseLeave);
                this.User2.MouseEnter += new System.Windows.Input.MouseEventHandler(this.Command_MouseEnter);
                this.User2.MouseLeave += new System.Windows.Input.MouseEventHandler(this.Command_MouseLeave);
                this.User3.MouseEnter += new System.Windows.Input.MouseEventHandler(this.Command_MouseEnter);
                this.User3.MouseLeave += new System.Windows.Input.MouseEventHandler(this.Command_MouseLeave);
                this.User4.MouseEnter += new System.Windows.Input.MouseEventHandler(this.Command_MouseEnter);
                this.User4.MouseLeave += new System.Windows.Input.MouseEventHandler(this.Command_MouseLeave);
                this.PosSet.MouseEnter += new System.Windows.Input.MouseEventHandler(this.Command_MouseEnter);
                this.PosSet.MouseLeave += new System.Windows.Input.MouseEventHandler(this.Command_MouseLeave);
                this.PosSpd.MouseEnter += new System.Windows.Input.MouseEventHandler(this.Command_MouseEnter);
                this.PosSpd.MouseLeave += new System.Windows.Input.MouseEventHandler(this.Command_MouseLeave);
                this.User1.TouchEnter -= new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.User1.TouchLeave -= new EventHandler<TouchEventArgs>(this.Command_TouchLeave);
                this.User2.TouchEnter -= new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.User2.TouchLeave -= new EventHandler<TouchEventArgs>(this.Command_TouchLeave);
                this.User3.TouchEnter -= new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.User3.TouchLeave -= new EventHandler<TouchEventArgs>(this.Command_TouchLeave);
                this.User4.TouchEnter -= new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.User4.TouchLeave -= new EventHandler<TouchEventArgs>(this.Command_TouchLeave);
                this.PosSet.TouchEnter -= new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.PosSet.TouchLeave -= new EventHandler<TouchEventArgs>(this.Command_TouchLeave);
                this.PosClear.TouchEnter -= new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.PosClear.TouchLeave -= new EventHandler<TouchEventArgs>(this.Command_TouchLeave);

                // Waypoint标记
                this.MainMap.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.Uav_WayPoint);
                this.MainMap.MouseRightButtonDown -= new System.Windows.Input.MouseButtonEventHandler(this.MarkerControl_MouseRightButtonDown);

                // 地图操作
                this.MainMap.TouchDown -= new EventHandler<TouchEventArgs>(this.Map_TouchDown);
                this.MainMap.TouchUp -= new EventHandler<TouchEventArgs>(this.Map_TouchUp);
                this.MainMap.TouchMove -= new EventHandler<TouchEventArgs>(this.Map_TouchMove);
                //MainMap.CanDragMap = true; // 右键单击拖动地图功能退出

                this.Main_Window.TouchUp -= new EventHandler<TouchEventArgs>(this.Main_TouchUp);
            }
            else
            {
                // 触摸操作
                var _image = new BitmapImage(new Uri(System.IO.Path.GetFullPath("Resources/chupindianji.png")));
                ImageBrush _imageBrush = new ImageBrush(_image);
                TouchIcon.OpacityMask = _imageBrush;
                //TouchIcon.Source = new BitmapImage(new Uri(System.IO.Path.GetFullPath("Resources/command.png")));

                // 命令按钮
                this.User1.MouseLeftButtonDown -= new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseDown);
                this.User1.MouseLeftButtonUp -= new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseUp);
                this.User2.MouseLeftButtonDown -= new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseDown);
                this.User2.MouseLeftButtonUp -= new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseUp);
                this.User3.MouseLeftButtonDown -= new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseDown);
                this.User3.MouseLeftButtonUp -= new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseUp);
                this.User4.MouseLeftButtonDown -= new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseDown);
                this.User4.MouseLeftButtonUp -= new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseUp);
                this.PosSet.MouseLeftButtonDown -= new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseDown);
                this.PosSet.MouseLeftButtonUp -= new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseUp);
                this.PosClear.MouseLeftButtonDown -= new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseDown);
                this.PosClear.MouseLeftButtonUp -= new System.Windows.Input.MouseButtonEventHandler(this.Command_MouseUp);

                this.User1.TouchDown += new EventHandler<TouchEventArgs>(this.Command_TouchDown);
                this.User1.TouchUp += new EventHandler<TouchEventArgs>(this.Command_TouchUp);
                this.User2.TouchDown += new EventHandler<TouchEventArgs>(this.Command_TouchDown);
                this.User2.TouchUp += new EventHandler<TouchEventArgs>(this.Command_TouchUp);
                this.User3.TouchDown += new EventHandler<TouchEventArgs>(this.Command_TouchDown);
                this.User3.TouchUp += new EventHandler<TouchEventArgs>(this.Command_TouchUp);
                this.User4.TouchDown += new EventHandler<TouchEventArgs>(this.Command_TouchDown);
                this.User4.TouchUp += new EventHandler<TouchEventArgs>(this.Command_TouchUp);
                this.PosSet.TouchDown += new EventHandler<TouchEventArgs>(this.Command_TouchDown);
                this.PosSet.TouchUp += new EventHandler<TouchEventArgs>(this.Command_TouchUp);
                this.PosClear.TouchDown += new EventHandler<TouchEventArgs>(this.Command_TouchDown);
                this.PosClear.TouchUp += new EventHandler<TouchEventArgs>(this.Command_TouchUp);
                this.User1.TouchEnter -= new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.User1.TouchLeave -= new EventHandler<TouchEventArgs>(this.Command_TouchLeave);
                this.User2.TouchEnter -= new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.User2.TouchLeave -= new EventHandler<TouchEventArgs>(this.Command_TouchLeave);
                this.User3.TouchEnter -= new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.User3.TouchLeave -= new EventHandler<TouchEventArgs>(this.Command_TouchLeave);
                this.User4.TouchEnter -= new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.User4.TouchLeave -= new EventHandler<TouchEventArgs>(this.Command_TouchLeave);
                this.PosSet.TouchEnter -= new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.PosSet.TouchLeave -= new EventHandler<TouchEventArgs>(this.Command_TouchLeave);
                this.PosClear.TouchEnter -= new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.PosClear.TouchLeave -= new EventHandler<TouchEventArgs>(this.Command_TouchLeave);

                this.User1.LostMouseCapture -= new System.Windows.Input.MouseEventHandler(this.Command_LostMouseCapture);
                this.User1.LostTouchCapture += new EventHandler<TouchEventArgs>(this.Command_LostTouchCapture);
                this.User2.LostMouseCapture -= new System.Windows.Input.MouseEventHandler(this.Command_LostMouseCapture);
                this.User2.LostTouchCapture += new EventHandler<TouchEventArgs>(this.Command_LostTouchCapture);
                this.User3.LostMouseCapture -= new System.Windows.Input.MouseEventHandler(this.Command_LostMouseCapture);
                this.User3.LostTouchCapture += new EventHandler<TouchEventArgs>(this.Command_LostTouchCapture);
                this.User4.LostMouseCapture -= new System.Windows.Input.MouseEventHandler(this.Command_LostMouseCapture);
                this.User4.LostTouchCapture += new EventHandler<TouchEventArgs>(this.Command_LostTouchCapture);
                this.PosSet.LostMouseCapture -= new System.Windows.Input.MouseEventHandler(this.Command_LostMouseCapture);
                this.PosSet.LostTouchCapture += new EventHandler<TouchEventArgs>(this.Command_LostTouchCapture);

                // 弹出用 在鼠标指针进入此元素的边界时发生。
                this.User1.MouseEnter -= new System.Windows.Input.MouseEventHandler(this.Command_MouseEnter);
                this.User1.MouseLeave -= new System.Windows.Input.MouseEventHandler(this.Command_MouseLeave);
                this.User2.MouseEnter -= new System.Windows.Input.MouseEventHandler(this.Command_MouseEnter);
                this.User2.MouseLeave -= new System.Windows.Input.MouseEventHandler(this.Command_MouseLeave);
                this.User3.MouseEnter -= new System.Windows.Input.MouseEventHandler(this.Command_MouseEnter);
                this.User3.MouseLeave -= new System.Windows.Input.MouseEventHandler(this.Command_MouseLeave);
                this.User4.MouseEnter -= new System.Windows.Input.MouseEventHandler(this.Command_MouseEnter);
                this.User4.MouseLeave -= new System.Windows.Input.MouseEventHandler(this.Command_MouseLeave);
                this.PosSet.MouseEnter -= new System.Windows.Input.MouseEventHandler(this.Command_MouseEnter);
                this.PosSet.MouseLeave -= new System.Windows.Input.MouseEventHandler(this.Command_MouseLeave);
                this.PosSpd.MouseEnter -= new System.Windows.Input.MouseEventHandler(this.Command_MouseEnter);
                this.PosSpd.MouseLeave -= new System.Windows.Input.MouseEventHandler(this.Command_MouseLeave);
                this.User1.TouchEnter += new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.User1.TouchLeave += new EventHandler<TouchEventArgs>(this.Command_TouchLeave);
                this.User2.TouchEnter += new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.User2.TouchLeave += new EventHandler<TouchEventArgs>(this.Command_TouchLeave);
                this.User3.TouchEnter += new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.User3.TouchLeave += new EventHandler<TouchEventArgs>(this.Command_TouchLeave);
                this.User4.TouchEnter += new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.User4.TouchLeave += new EventHandler<TouchEventArgs>(this.Command_TouchLeave);
                this.PosSet.TouchEnter += new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.PosSet.TouchLeave += new EventHandler<TouchEventArgs>(this.Command_TouchLeave);
                this.PosClear.TouchEnter += new EventHandler<TouchEventArgs>(this.Command_TouchEnter);
                this.PosClear.TouchLeave += new EventHandler<TouchEventArgs>(this.Command_TouchLeave);

                // Waypoint标记
                this.MainMap.MouseDoubleClick -= new System.Windows.Input.MouseButtonEventHandler(this.Uav_WayPoint);
                this.MainMap.MouseRightButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.MarkerControl_MouseRightButtonDown);

                // 地图操作
                this.MainMap.TouchDown += new EventHandler<TouchEventArgs>(this.Map_TouchDown);
                this.MainMap.TouchUp += new EventHandler<TouchEventArgs>(this.Map_TouchUp);
                this.MainMap.TouchMove += new EventHandler<TouchEventArgs>(this.Map_TouchMove);
                //MainMap.CanDragMap = false; // 右键单击拖动功能退出

                this.Main_Window.TouchUp += new EventHandler<TouchEventArgs>(this.Main_TouchUp);
            }
        }

        // 设置按钮(设定对话框)
        private void SettingIconMouseLeftButton(object sender, MouseButtonEventArgs e)
        {
            _logger.Info("SettingIconMouseLeftButton");
            SettingWindow();
        }
        private void SettingWindow()
        {
            SettingWindow Swindow = new SettingWindow();

            // ================================================================================
            // 设置更新处理
            SettingData.Set = false;//进入不了地图中心基准坐标的设置
            SettingData.LatLngPoint = MainMap.Position;
            SettingData.MapProvider = MainMap.MapProvider;
            GMapProvider _map = SettingData.MapProvider;
            SettingData.ProviderCopyright = (string)Copyright.Content;

            // old data
            int _mode = SettingData.TrajectoryMode;
            string _port = SettingData.SerialPortSetting;
            SettingData.Elevation = Altitude.ElevationValue;
            PointLatLng _point = SettingData.LatLngPoint;

            Debug.WriteLine("PortSet:" + SettingData.SerialPortSetting + "/" + _port);

            Swindow.Background = this.Background;
            Swindow.HealthDataSetting = DataConstellation.BindingData.Health;
            Swindow.SetDataSetting = SettingData;
            if (Properties.Settings.Default.ConfigRecord.AddressList.Count > 0) Swindow.AddressRecord = Properties.Settings.Default.ConfigRecord.AddressList;

            Swindow.ShowDialog();                       //只有在窗口关闭返回主窗口

            // ================================================================================
            // 设置完成后进行的相应的操作        设置的应用程序处理
            if (Swindow.DialogResult == true)
            {

                if (Constants.Style_Change_HangPaiAndZhiBao_Flag == 0)
                {
                    Lock_Marker_Flag = false;
                    AreaChoose_MissionDel_X(0);//这边是ABC区域marker基准点
                    AreaChooseMarkerMessionAdd_X();//这边是ABC区域marker基准点
                    AutoWing_MissionDel_X(0);//这边是区域marker基准点
                    AutoWingMarkerMessionAdd_X();//这边是区域marker基准点
                    Distance_MissionDel_X(0);//这边是区域marker基准点
                    DistanceMarkerMessionAdd_X();//这边是区域marker基准点
                    Obstacle_MissionDel_X(0);//这边是障碍点基准点
                    ObstacleMarkerMessionAdd_X();//这边是障碍点基准点
                    WayPoint_NumS = 0;
                    MissionDel_X(0);
                    MissionAndBaseMarkerAdd_X();					// Base追加
                    ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));				// ProjectRecord追加
                    //      MainMonitorClear();
                    DrawTrack_Count = 0;
                    //     Home_flag = 0;
                    Start_DrawRoute_Flag = 1;
                    m_make_click = 0;
                    fanganshengcheng.Content = "方案生成";
                    Work_Record.Content = "";
                    Function_ZhiBao_Show();
                }
                else
                {
                    Lock_Marker_Flag = false;
                    AreaChoose_MissionDel_X(0);//这边是ABC区域marker基准点
                    AreaChooseMarkerMessionAdd_X();//这边是ABC区域marker基准点
                    AutoWing_MissionDel_X(0);//这边是区域marker基准点
                    AutoWingMarkerMessionAdd_X();//这边是区域marker基准点
                    Distance_MissionDel_X(0);//这边是区域marker基准点
                    DistanceMarkerMessionAdd_X();//这边是区域marker基准点
                    Obstacle_MissionDel_X(0);//这边是障碍点基准点
                    ObstacleMarkerMessionAdd_X();//这边是障碍点基准点
                    WayPoint_NumS = 0;
                    MissionDel_X(0);
                    MissionAndBaseMarkerAdd_X();					// Base追加
                    ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));				// ProjectRecord追加
                    //      MainMonitorClear();
                    DrawTrack_Count = 0;
                    //     Home_flag = 0;
                    Start_DrawRoute_Flag = 1;
                    m_make_click = 0;
                    fanganshengcheng.Content = "方案生成";
                    Work_Record.Content = "";
                    Function_Hangpai_Show();
                }

                //端口设置
                if (SettingData.SendCommandFlag)
                {
                    //  COM 端口设置
                    DataConstellation.ReplyMode = 1;	//COM 端口设置模式
                    WaitWindow.Visibility = Visibility.Visible;

                    List<string> tag = new List<string>();
                    List<string> value = new List<string>();
                    string text = string.Empty;

                    tag.Add("Config/COM/Port");
                    value.Add(Swindow.SetDataSetting.SerialPortSetting.Replace("COM", ""));
                    tag.Add("Config/FlightLog/FilePath");
                    value.Add(Swindow.SetDataSetting.FlightLogFilePath);
                    tag.Add("Config/FlightLog/DivideSizeInByte");
                    value.Add(Swindow.SetDataSetting.DivideSizeInByte.ToString());
                    tag.Add("Config/FlightLog/StoragePeriodInDay");
                    value.Add(Swindow.SetDataSetting.StoragePeriodInDay.ToString());
                    tag.Add("Config/FlightLog/RecStopTimeFromDataStop");
                    value.Add(Swindow.SetDataSetting.RecStopTimeFromDataStop.ToString());

                    text = DataConstellation.SetMassage(XmlMessage.Set_COMPort,
                        tag,
                        value);

                    Send(Client, text);
                    sendDone.WaitOne(); //等待发送
                    Debug.WriteLine("设置 Port:\n" + text);
                    _logger.Info("SettingData SerialPort:" + SettingData.SerialPortSetting);
                }

                //设置地图相对坐标
                if (SettingData.TrajectoryMode != _mode)
                {
                    switch (SettingData.TrajectoryMode)
                    {
                        case 1:
                            MainMap.Position = SettingData.LatLngPoint;
                            break;
                        case 2:
                            MainMap.Position = UAVMarker.Position;
                            break;
                        case 3:
                            //MainMap.Position = SettingData.LatLngPoint;
                            //MainMap.Position = UAVPosition; // TODO:waypoint
                            break;
                    }
                    _logger.Info("SettingData TrajectoryMode:" + SettingData.TrajectoryMode.ToString());
                }
                // 变更地图提供商
                //if (MainMap.MapProvider.ToString() != SettingData.MapProvider.ToString())
                if (Swindow.MapChange)
                {
                    MainMap.MapProvider = GMapProviders.OpenStreetMap;
                    //MainMap.MapProvider = null;//GMap.NET.MapProviders.EmptyProvider.Instance;      // 空MapProvider for Clear
                    Thread.Sleep(1 * 1000); //空MapProvider
                    MainMap.MapProvider = SettingData.MapProvider;      //MapProvider
                    Copyright.Content = SettingData.ProviderCopyright;  //ProviderCopyright

                    if (MainMap.MapProvider.ToString() == "国土地理院地图(航空)")
                    {
                        DisName.Foreground = Brushes.White;
                        Copyright.Foreground = Brushes.White;
                        TouchIcon.Background = Brushes.White;
                        SettingIcon.Background = Brushes.White;
                        PlayerSlide.TimeForeground = Brushes.White;
                        MarkerIcon.Background = Brushes.White;
                        GridLine.BorderBrush = Brushes.White;
                        Dis1.Stroke = Brushes.White;
                        BuildView(Brushes.White);
                    }
                    else
                    {
                        DisName.Foreground = new SolidColorBrush(Color.FromRgb(31, 26, 80));
                        Copyright.Foreground = new SolidColorBrush(Color.FromRgb(31, 26, 80));
                        TouchIcon.Background = new SolidColorBrush(Color.FromRgb(31, 26, 80));
                        SettingIcon.Background = new SolidColorBrush(Color.FromRgb(31, 26, 80));
                        PlayerSlide.TimeForeground = new SolidColorBrush(Color.FromRgb(31, 26, 80));
                        MarkerIcon.Background = new SolidColorBrush(Color.FromRgb(31, 26, 80));
                        GridLine.BorderBrush = new SolidColorBrush(Color.FromRgb(31, 26, 80));
                        Dis1.Stroke = new SolidColorBrush(Color.FromRgb(31, 26, 80));
                        BuildView(new SolidColorBrush(Color.FromRgb(31, 26, 80)));
                    }
                    if (Properties.Settings.Default.Function2 == "MapProvider")
                    {
                        if ((GMapProviders.GoogleHybridMap.ToString() == MainMap.MapProvider.ToString()))
                        {
                            DisName.Foreground = Brushes.White;
                            Copyright.Foreground = Brushes.White;
                            TouchIcon.Background = Brushes.White;
                            SettingIcon.Background = Brushes.White;
                            PlayerSlide.TimeForeground = Brushes.White;
                            MarkerIcon.Background = Brushes.White;
                            GridLine.BorderBrush = Brushes.White;
                            Dis1.Stroke = Brushes.White;
                            BuildView(Brushes.White);
                        }
                    }
                    _logger.Info("SettingData MapProvider:" + MainMap.MapProvider.ToString());
                }

                // 经纬度变化
                if (MainMap.Position.Lat != SettingData.LatLngPoint.Lat || MainMap.Position.Lng != SettingData.LatLngPoint.Lng)
                {
                    MainMap.Position = SettingData.LatLngPoint;
                    _logger.Info("SettingData MapPosition:" + SettingData.LatLngPoint.Lat.ToString() + "/" + SettingData.LatLngPoint.Lng.ToString());
                }

                // 获取高度
                if (Altitude.ElevationValue != SettingData.Elevation)
                {
                    Altitude.ElevationValue = SettingData.Elevation;
                    _logger.Info("SettingData ElevationValue :" + Altitude.ElevationValue.ToString());
                }

                if (Swindow.AddressFlag)
                {
                    MainMap.Position = SettingData.LatLngPoint;
                    _logger.Info("SettingData AddressFlag :" + SettingData.LatLngPoint.Lat.ToString() + "/" + SettingData.LatLngPoint.Lng.ToString());
                }
                if (Swindow.AddressRecord.Count > 0)
                {
                    Properties.Settings.Default.ConfigRecord.AddressList = Swindow.AddressRecord;
                }

                // 更新
                DataConstellation.BindingData.Health = Swindow.HealthDataSetting;          //HealthData
                SettingData = Swindow.SetDataSetting;
                _logger.Info("SettingData SetDataSetting:" + SettingData.LatLngPoint.Lat.ToString() + "/" + SettingData.LatLngPoint.Lng.ToString());

                // 清除轨迹
                if (!SettingData.TrajectoryFlag || SettingData.TrajectoryLength == 0)
                {
                    var clear = MainMap.Markers.Where(p => p == UAVRoute);
                    if (clear != null)
                    {
                        for (int i = 0; i < clear.Count(); i++)
                        {
                            MainMap.Markers.Remove(clear.ElementAt(i));
                            i--;
                        }
                    }
                    UAVRoute = new GMapRoute(new List<PointLatLng>());
                    UAVRoute.LineBrush = Brushes.Red;
              
                    MainMap.Markers.Add(UAVRoute);
                }

                //　HealthData初期设定显示
                BatteryName.ValueMax = DataConstellation.BindingData.Health.VolMaxValue;
                BatteryName.ValueMin = DataConstellation.BindingData.Health.VolMinValue;
                BatteryName.ValueAlert = DataConstellation.BindingData.Health.AlertVolValue;

                //　显示及不显示设置
                for (int i = 0; i < SettingData.WindowNo.Count; i++)
                {
                    Options_Window(SettingData.WindowNo[i]);
                }

                if (Swindow.FilePath != "")
                {
                    // 地図イメージ
                    //MapMarker = new GMapMarker(MainMap.Position);
                    //{
                    //	MapMarker.Shape = new CustomMap(MapMarker, Swindow.FilePath);
                    //	MapMarker.Offset = new System.Windows.Point(0, 0);
                    //	MapMarker.ZIndex = 0;
                    //	MainMap.Markers.Add(MapMarker);
                    //}

                }
            }
            SettingData.Set = true;
        }

        // 窗口屏幕大小调整事件 (屏幕切换)
        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            _logger.Info("Window_SizeChanged");
            WindowSizeChange(e.NewSize.Width, e.NewSize.Height);
        }
        private void WindowSizeChange(double _width, double _height)
        {
            double r = _width / _height; //长宽比
            //PlayerSlide.Width = GridLine.Width;
            SlideSizeChanged();

            //　长宽比
            if (r < 1)
            {
                // 纵向视图
                GridLine.SetValue(Grid.RowProperty, 1);
                GridLine.SetValue(Grid.ColumnProperty, 1);
                GridLine.SetValue(Grid.RowSpanProperty, 1);
                GridLine.SetValue(Grid.ColumnSpanProperty, 3);

                RightsideArea.SetValue(Grid.RowProperty, 3);
                RightsideArea.SetValue(Grid.ColumnProperty, 1);
                RightsideArea.SetValue(Grid.RowSpanProperty, 1);
                RightsideArea.SetValue(Grid.ColumnSpanProperty, 3);

                // 选项屏幕
                Container.SetValue(Grid.RowProperty, 3);
                Container.SetValue(Grid.ColumnProperty, 1);
                Container.SetValue(Grid.RowSpanProperty, 1);
                Container.SetValue(Grid.ColumnSpanProperty, 3);
                if (DataConstellation.CommandMode == 2)
                {
                    //四个 Double 值分别描述矩形的四个边（Left、Top、Right 和 Bottom）
                    Container.Margin = new Thickness(0, 0, 0, 70);//= new System.Windows.Thickness { Left = 0, Top = 0, Right = 0, Bottom = 100 };
                }
                else
                {
                    Container.Margin = new Thickness(0);
                }
                //警告信息
                AlertMessageName.SetValue(Grid.RowProperty, 1);//行属性
                AlertMessageName.SetValue(Grid.ColumnProperty, 1);//列属性
                AlertMessageName.SetValue(Grid.RowSpanProperty, 1);//行跨属性
                AlertMessageName.SetValue(Grid.ColumnSpanProperty, 3);//列跨属性
                //箭头
                Arrow.SetValue(Grid.RowProperty, 1);
                Arrow.SetValue(Grid.ColumnProperty, 1);
                Arrow.SetValue(Grid.RowSpanProperty, 1);
                Arrow.SetValue(Grid.ColumnSpanProperty, 3);
                // 选择网格分割
                OptionGridSplitter.SetValue(Grid.RowProperty, 2);
                OptionGridSplitter.SetValue(Grid.ColumnProperty, 1);
                OptionGridSplitter.SetValue(Grid.RowSpanProperty, 1);
                OptionGridSplitter.SetValue(Grid.ColumnSpanProperty, 3);
                OptionGridSplitter.ResizeDirection = GridResizeDirection.Rows;
                //进度条
                PlayerSlide.SetValue(Grid.RowProperty, 3);
                PlayerSlide.SetValue(Grid.ColumnProperty, 1);
                PlayerSlide.SetValue(Grid.RowSpanProperty, 1);
                PlayerSlide.SetValue(Grid.ColumnSpanProperty, 3);
                //PlayerSlide.VerticalAlignment = VerticalAlignment.Top;

                BaseColumn.Width = new GridLength(250);
                BaseRow.Height = new GridLength(250);
                BaseHeight.Height = new GridLength(100);

                WindowSwitch = true;

                if (_WaypointWindowID != 0)
                {
                    Container.Children[_WaypointWindowID - 1].Width = 420;
                    Container.Children[_WaypointWindowID - 1].Height = 250;
                }
            }
            else
            {
                // 横表示
                GridLine.SetValue(Grid.RowProperty, 1);
                GridLine.SetValue(Grid.ColumnProperty, 1);
                GridLine.SetValue(Grid.RowSpanProperty, 3);
                GridLine.SetValue(Grid.ColumnSpanProperty, 1);

                RightsideArea.SetValue(Grid.RowProperty, 0);
                RightsideArea.SetValue(Grid.ColumnProperty, 3);
                RightsideArea.SetValue(Grid.RowSpanProperty, 5);
                RightsideArea.SetValue(Grid.ColumnSpanProperty, 1);

                Container.SetValue(Grid.RowProperty, 1);
                Container.SetValue(Grid.ColumnProperty, 3);
                Container.SetValue(Grid.RowSpanProperty, 3);
                Container.SetValue(Grid.ColumnSpanProperty, 1);
                Container.Margin = new Thickness(0, 0, 0, -50);

                AlertMessageName.SetValue(Grid.RowProperty, 1);
                AlertMessageName.SetValue(Grid.ColumnProperty, 1);
                AlertMessageName.SetValue(Grid.RowSpanProperty, 1);
                AlertMessageName.SetValue(Grid.ColumnSpanProperty, 1);

                Arrow.SetValue(Grid.RowProperty, 1);
                Arrow.SetValue(Grid.ColumnProperty, 1);
                Arrow.SetValue(Grid.RowSpanProperty, 3);
                Arrow.SetValue(Grid.ColumnSpanProperty, 1);

                OptionGridSplitter.SetValue(Grid.RowProperty, 1);
                OptionGridSplitter.SetValue(Grid.ColumnProperty, 2);
                OptionGridSplitter.SetValue(Grid.RowSpanProperty, 3);
                OptionGridSplitter.SetValue(Grid.ColumnSpanProperty, 1);
                OptionGridSplitter.ResizeDirection = GridResizeDirection.Columns;

                PlayerSlide.SetValue(Grid.RowProperty, 3);
                PlayerSlide.SetValue(Grid.ColumnProperty, 1);
                PlayerSlide.SetValue(Grid.RowSpanProperty, 1);
                PlayerSlide.SetValue(Grid.ColumnSpanProperty, 1);
                PlayerSlide.VerticalAlignment = VerticalAlignment.Bottom;

                BaseColumn.Width = new GridLength(250);
                BaseRow.Height = new GridLength(250);
                BaseHeight.Height = new GridLength(100);

                WindowSwitch = false;

                if (_WaypointWindowID != 0)
                {
                    Container.Children[_WaypointWindowID - 1].Width = 250;
                    Container.Children[_WaypointWindowID - 1].Height = 420;
                }

            }

            // 地图更新 (以避免由触摸飞行地图运动，当你改变窗口大小的现象)
            if (!SettingData.DeviceMode)
            {
                MainMap.Zoom += 1;
                System.Threading.Thread.Sleep(5);
                MainMap.Zoom -= 1;
            }
        }

        // 键盘输入的事件
        private void Window_PreviewKeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            _logger.Info("Window_PreviewKeyDown:" + e.Key);
            if (e.Key == Key.F1)
            {
                Options_Window(1);
            }
            else if (e.Key == Key.F2)
            {
                Options_Window(2);
            }
            else if (e.Key == Key.F3)
            {
                Options_Window(3);
            }
            else if (e.Key == Key.F4)
            {
                Options_Window(4);
            }
            else if (e.Key == Key.F5)
            {
                Options_Window(5);
            }
            else if (e.Key == Key.F6)
            {
                Options_Window(6);
            }
            else if (e.Key == Key.F7)
            {
                Options_Window(7);
            }
            else if(e.Key==Key.F8)
            {
                Options_Window(8);
            }
            else if(e.Key==Key.F9)
            {
                Options_Window(9);
            }
            else if(e.Key == Key.F12)
            {
                // 背景設定
                //Resources["WindowBackgroundBrush"] = new SolidColorBrush(Color.FromRgb(96, 125, 139));
                //ZoomName.ZoomBackground = new SolidColorBrush(Color.FromRgb(96, 125, 139));
                //ZoomName.ZoomBackground.Opacity = 0.7;
                //Resources["CanvasBackgroundBrush"] = ZoomName.ZoomBackground;
                Options_Window(11);
            }
            else if (e.Key == Key.F11)
            {
                Options_Window(10);
            }
            //if (e.Key == Key.D0)
            //{
            //	// 背景設定
            //	Resources["WindowBackgroundBrush"] = new SolidColorBrush(Color.FromRgb(0, 0, 0));
            //	ZoomName.ZoomBackground = new SolidColorBrush(Color.FromRgb(0, 0, 0));
            //	ZoomName.ZoomBackground.Opacity = 0.7;
            //	Resources["CanvasBackgroundBrush"] = ZoomName.ZoomBackground;
            //}
            //else if (e.Key == Key.D1)
            //{
            //	Resources["WindowBackgroundBrush"] = new SolidColorBrush(Color.FromRgb(31, 26, 80));
            //	ZoomName.ZoomBackground = new SolidColorBrush(Color.FromRgb(31, 26, 80));
            //	ZoomName.ZoomBackground.Opacity = 0.7;
            //	Resources["CanvasBackgroundBrush"] = ZoomName.ZoomBackground;
            //}
            //else if (e.Key == Key.D2)
            //{
            //	Resources["WindowBackgroundBrush"] = new SolidColorBrush(Color.FromRgb(86, 79, 184));
            //	ZoomName.ZoomBackground = new SolidColorBrush(Color.FromRgb(86, 79, 184));
            //	ZoomName.ZoomBackground.Opacity = 0.7;
            //	Resources["CanvasBackgroundBrush"] = ZoomName.ZoomBackground;
            //}
            //else if (e.Key == Key.D3)
            //{
            //	Resources["WindowBackgroundBrush"] = new SolidColorBrush(Color.FromRgb(236, 94, 0));
            //	ZoomName.ZoomBackground = new SolidColorBrush(Color.FromRgb(236, 94, 0));
            //	ZoomName.ZoomBackground.Opacity = 0.7;
            //	Resources["CanvasBackgroundBrush"] = ZoomName.ZoomBackground;
            //}
            //else if (e.Key == Key.D4)
            //{
            //	Resources["WindowBackgroundBrush"] = new SolidColorBrush(Color.FromRgb(150, 63, 170));
            //	ZoomName.ZoomBackground = new SolidColorBrush(Color.FromRgb(150, 63, 170));
            //	ZoomName.ZoomBackground.Opacity = 0.7;
            //	Resources["CanvasBackgroundBrush"] = ZoomName.ZoomBackground;
            //}
            //else if (e.Key == Key.D5)
            //{
            //	Resources["WindowBackgroundBrush"] = new SolidColorBrush(Color.FromRgb(209, 66, 51));
            //	ZoomName.ZoomBackground = new SolidColorBrush(Color.FromRgb(176, 61, 79));
            //	ZoomName.ZoomBackground.Opacity = 0.7;
            //	Resources["CanvasBackgroundBrush"] = ZoomName.ZoomBackground;
            //}
            //else if (e.Key == Key.D6)
            //{
            //	Resources["WindowBackgroundBrush"] = new SolidColorBrush(Color.FromRgb(199, 204, 208));
            //	ZoomName.ZoomBackground = new SolidColorBrush(Color.FromRgb(199, 204, 208));
            //	ZoomName.ZoomBackground.Opacity = 0.7;
            //	Resources["CanvasBackgroundBrush"] = ZoomName.ZoomBackground;
            //}
            //else if (e.Key == Key.D7)
            //{
            //	Resources["WindowBackgroundBrush"] = new SolidColorBrush(Color.FromRgb(60, 210, 123));
            //	ZoomName.ZoomBackground = new SolidColorBrush(Color.FromRgb(60, 210, 123));
            //	ZoomName.ZoomBackground.Opacity = 0.7;
            //	Resources["CanvasBackgroundBrush"] = ZoomName.ZoomBackground;
            //}
            //else if (e.Key == Key.D8)
            //{
            //	Resources["WindowBackgroundBrush"] = new SolidColorBrush(Color.FromRgb(240, 240, 240));
            //	ZoomName.ZoomBackground = new SolidColorBrush(Color.FromRgb(240, 240, 240));
            //	ZoomName.ZoomBackground.Opacity = 0.7;
            //	Resources["CanvasBackgroundBrush"] = ZoomName.ZoomBackground;
            //}
            //else if (e.Key == Key.D9)
            //{
            //	Resources["WindowBackgroundBrush"] = new SolidColorBrush(Color.FromRgb(172, 197, 224));
            //	ZoomName.ZoomBackground = new SolidColorBrush(Color.FromRgb(172, 197, 224));
            //	ZoomName.ZoomBackground.Opacity = 0.7;
            //	Resources["CanvasBackgroundBrush"] = ZoomName.ZoomBackground;
            //}
            //else
            //{
            //	// デフォルト
            //	Resources["WindowBackgroundBrush"] = new SolidColorBrush(Color.FromRgb(31, 26, 80));
            //	ZoomName.ZoomBackground = new SolidColorBrush(Color.FromRgb(31, 26, 80));
            //	ZoomName.ZoomBackground.Opacity = 0.7;
            //	Resources["CanvasBackgroundBrush"] = ZoomName.ZoomBackground;
            //}

        }

        // 调整窗口大小
        void SlideSizeChanged()
        {
            _logger.Info("SlideSizeChanged");

            double r = BaseWidth.ActualWidth;

            if (WindowSwitch)// 纵向视图
            {

                if (BaseRow.Height.Value > (Main_Window.Height / 2))
                {
                    BaseRow.Height = new GridLength((Main_Window.Height / 2));
                }
                r += BaseColumn.ActualWidth;
            }
            else
            {
                if (BaseColumn.Width.Value > (Main_Window.Width / 2))
                {
                    BaseColumn.Width = new GridLength((Main_Window.Width / 2));
                }
            }
            r -= 10;
            if (r > 0)
            {
                PlayerSlide.Width = r; //调整大小
            }
        }

        // UAVMarka中心变化
        private void MarkerIcon_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            _logger.Info("MarkerIcon_MouseLeftButtonDown");
            //设置的地图相对坐标
            if (UAVMarker.Position.Lat>10)
            {
                MainMap.Position = UAVMarker.Position;
            }
        }
        #endregion

        #region 有关屏幕操作选项
        private void Options_Window(int no)
        {
            _logger.Info("Options_Window:" + no.ToString());
            switch (no)
            {
                case 1:     //Waypoint数值输入的屏幕
                    if (_WaypointWindowID == 0)
                    {
                        PointData _waypoint = new PointData()
                        {
                            Lat = WaypointMarker.Position.Lat,
                            Lon = WaypointMarker.Position.Lng,
                            Alt = WaypointMarker.Altitude,
                            Speed = WaypointMarker.Speed,
                            Yaw = WaypointMarker.Azimuth,
                            Pitch = 0,
                            Roll = 0
                        };
                        Container.Children.Add(new MdiChild
                        {
                            Title = "Waypoint Window",
                            Content = new WaypointWindow(Container.Children.Count + 1, _waypoint),
                            Width = 220,
                            Height = 432,
                            Position = new System.Windows.Point(0, 0),
                            Background = new SolidColorBrush(Color.FromRgb(31, 26, 80))
                        });
                    }
                    break;
                case 2:      //图表显示
                    Container.Children.Add(new MdiChild
                    {
                        Title = "Chart Window",
                        Content = new ChartWindow(Container.Children.Count + 1),
                        Width = 250,
                        Height = 250,
                        Position = new System.Windows.Point(0, 0)
                    });
                    break;
                case 3:     //外部应用程序屏幕
                    Container.Children.Add(new MdiChild
                    {
                        Title = "Application Window",
                        Content = new ApplicationWindow(Container.Children.Count + 1),
                        Width = 250,
                        Height = 250,
                        Position = new System.Windows.Point(0, 0)
                    });
                    break;
                case 4:     //模型显示
                    if (_ModelWindowID == 0)
                    {
                        Container.Children.Add(new MdiChild
                        {
                            Title = "Model Window",
                            Content = new ModelWindow(Container.Children.Count + 1, DataConstellation.BindingData.UAVpoint.Roll, DataConstellation.BindingData.UAVpoint.Pitch, DataConstellation.BindingData.UAVpoint.Yaw),
                            Width = 250,
                            Height = 250,
                            Position = new System.Windows.Point(0, 0)
                        });
                    }
                    break;
                case 5://版本信息显示
                    Container.Children.Add(new MdiChild
                    {
                        Title = "VersionInformation Window",
                        Content = new Version_Info_Show(Container.Children.Count + 1),
                        Width = 250,
                        Height = 1000,
                        Position = new System.Windows.Point(0, 0)
                    });
                    break;
                case 6://led控制
                    Container.Children.Add(new MdiChild
                    {
                        Title = "LED Control",
                        Content = new LED_SET_Window(Container.Children.Count + 1),
                        Width = 250,
                        Height = 320,
                        Position = new System.Windows.Point(0, 0)
                    });
                    break;
                case 7://wifi socket设置
                    Container.Children.Add(new MdiChild
                    {
                        Title = "Wifi Set",
                        Content = new Wifi_Set_Window(Container.Children.Count + 1),
                        Width = 250,
                        Height = 300,
                        Position = new System.Windows.Point(0, 0)
                    });
                    break;
                case 8://参数软件设置
                    Container.Children.Add(new MdiChild
                    {
                        Title = "Index Set",
                        Content = new Index_SoftWare_Set(Container.Children.Count + 1),
                        Width = 250,
                        Height = 1100,
                        Position = new System.Windows.Point(0, 0)
                    });
                    break;
                case 9://规划的方案微调设置
                    Container.Children.Add(new MdiChild
                    {
                        Title = "Plan Set",
                        Content = new Plan_FineTuning(Container.Children.Count + 1),
                        Width = 220,
                        Height = 500,
                        Position = new System.Windows.Point(0, 0)
                    });
                    break;
                case 10://飞控id设置
                    Container.Children.Add(new MdiChild
                    {
                        Title = "AP_ID Set",
                        Content = new AP_IDSET_Window(Container.Children.Count + 1),
                        Width = 250,
                        Height = 900,
                        Position = new System.Windows.Point(0, 0)
                    });
                    break;

                case 11://IMU信息
                    Container.Children.Add(new MdiChild
                    {
                        Title = "IMU_Data Show",
                        Content = new Imu_Info_Window(Container.Children.Count + 1),
                        Width = 220,
                        Height = 432,
                        Position = new System.Windows.Point(0, 0)
                    });
                    break;

                default:
                    break;

            }
        }
        /// <summary>
        /// 右键点击选择Cascade Horizontally Vertically   CloseAll等小框
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        #region 可选的屏幕区域菜单操作
        private void Cascade_Click(object sender, RoutedEventArgs e)
        {
            _logger.Info("Cascade_Click");
            Container.MdiLayout = WPF.MDI.MdiLayout.Cascade;
        }
        private void Horizontally_Click(object sender, RoutedEventArgs e)
        {
            _logger.Info("Horizontally_Click");
            Container.MdiLayout = WPF.MDI.MdiLayout.TileHorizontal;
        }
        private void Vertically_Click(object sender, RoutedEventArgs e)
        {
            _logger.Info("Vertically_Click");
            Container.MdiLayout = WPF.MDI.MdiLayout.TileVertical;
        }
        // 关闭所有窗口选项
        private void CloseAll_Click(object sender, RoutedEventArgs e)
        {
            _logger.Info("CloseAll_Click");
            // 清除选项屏幕
            Container.Children.Clear();
        }

        private void WaypointWindow_Click(object sender, RoutedEventArgs e)
        {
            Options_Window(1);
        }
        private void ChartWindow_Click(object sender, RoutedEventArgs e)
        {
            Options_Window(2);
        }
        // 外部应用程序打开的窗口
        private void ApplicationWindow_Click(object sender, RoutedEventArgs e)
        {
            Options_Window(3);
        }
        private void ModelWindow_Click(object sender, RoutedEventArgs e)
        {
            Options_Window(4);
        }
        private void VersionWindow_Click(object sender, RoutedEventArgs e)
        {
            Options_Window(5);
        }
        private void LEDControlWindow_Click(object sender, RoutedEventArgs e)
        {
            Options_Window(6);
        }
        private void WifiSetWindow_Click(object sender, RoutedEventArgs e)
        {
            Options_Window(7);
        }
        private void IndexSetWindow_Click(object sender, RoutedEventArgs e)
        {
            Options_Window(8);
        }
        private void PlanFineTuningSetWindow_Click(object sender, RoutedEventArgs e)
        {
            Options_Window(9);
        }
        private void APIDSetWindow_Click(object sender, RoutedEventArgs e)
        {
            Options_Window(10);
        }
        private void ImuDataWindow_Click(object sender, RoutedEventArgs e)
        {
            Options_Window(11);
        }
        #endregion
        private void OptionAreaSizeChanged(object sender, SizeChangedEventArgs e)
        {
            _logger.Info("OptionAreaSizeChanged");
            SlideSizeChanged();
        }

        // 排序选项添加/删除
        void OptionsWindowCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            _logger.Info("OptionsWindowCollectionChanged");
            switch (e.Action)
            {
                case NotifyCollectionChangedAction.Add:
                    // 初始化
                    DataConstellation.BindingData.PlotWindow.Add(new PlotData()); //追加
                    if (Container.Children[Container.Children.Count - 1].Title.IndexOf("Waypoint Window") == 0)            //Waypoint数值输入的屏幕
                    {
                        _WaypointWindowID = Container.Children.Count;

                        // 改变窗口大小
                        if (WindowSwitch)
                        {
                            Container.Children[Container.Children.Count - 1].Width = 420;
                            Container.Children[Container.Children.Count - 1].Height = 250;
                        }
                        Debug.WriteLine("Waypoint Window Open" + Container.Children.Count.ToString());
                    }
                    else if (Container.Children[Container.Children.Count - 1].Title.IndexOf("Chart Window") == 0)          //Chart Window画面表示
                    {
                        DataConstellation.BindingData.PlotWindow.Add(new PlotData());
                        //DataConstellation.BindingData.PlotWindow[DataConstellation.BindingData.PlotWindow.Count - 1].ID = Container.Children.Count;
                    }
                    else if (Container.Children[Container.Children.Count - 1].Title.IndexOf("Model Window") == 0)          //模型显示
                    {
                        _ModelWindowID = Container.Children.Count;
                        Debug.WriteLine("Model Window Open" + Container.Children.Count.ToString());
                    }
                    break;

                case NotifyCollectionChangedAction.Remove:
                    OptionWindowEvent = true;
                    // 元素编号
                    if (Container.Children.Count > 0)
                    {
                        MdiChild oldChild = (MdiChild)e.OldItems[0];

                        Debug.WriteLine("OptionRemove: " + e.NewStartingIndex.ToString() + "/" + e.OldStartingIndex.ToString());
                        DataConstellation.BindingData.PlotWindow.RemoveAt(e.OldStartingIndex);//删除

                        if (oldChild.Title.IndexOf("Waypoint Window") == 0)            //Waypoint画面表示
                        {
                            _WaypointWindowID = 0;
                            Debug.WriteLine("Waypoint Window Close");

                        }
                        else if (oldChild.Title.IndexOf("Model Window") == 0)          //模型显示
                        {
                            _ModelWindowID = 0;
                            Debug.WriteLine("Model Window Close");
                        }

                    }
                    else
                    {
                        //　确定
                        _WaypointWindowID = 0;
                        _ModelWindowID = 0;
                        DataConstellation.BindingData.PlotWindow.Clear();
                    }
                    OptionWindowEvent = false;

                    break;

                case NotifyCollectionChangedAction.Reset:
                    //　确定
                    _WaypointWindowID = 0;
                    _ModelWindowID = 0;
                    DataConstellation.BindingData.PlotWindow.Clear();

                    break;
            }


        }

        #endregion

        #region 建立一个网格模式
        /// <summary>
        /// 建立一个网格模式
        /// </summary>
        private const int GRID_SIZE = 50;   //网格大小
        private ScaleTransform scaleTransform = new ScaleTransform();
        private void canvas_Loaded(object sender, RoutedEventArgs e)
        {
            if (MainMap.MapProvider.ToString() == "国土地理院地图(航空)")
            {
                BuildView(Brushes.White);
            }
            else
            {
                BuildView(new SolidColorBrush(Color.FromRgb(31, 26, 80)));
            }
            if (Properties.Settings.Default.Function2 == "MapProvider")
            {
                if ((GMapProviders.GoogleHybridMap.ToString() == MainMap.MapProvider.ToString()))
                {
                    BuildView(Brushes.White);
                }
            }
        }
        private void canvas_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            if (MainMap.MapProvider.ToString() == "国土地理院地图(航空)")
            {
                BuildView(Brushes.White);
            }
            else
            {
                BuildView(new SolidColorBrush(Color.FromRgb(31, 26, 80)));
            }
            if (Properties.Settings.Default.Function2 == "MapProvider")
            {
                if ((GMapProviders.GoogleHybridMap.ToString() == MainMap.MapProvider.ToString()))
                {
                    BuildView(Brushes.White);
                }
            }
        }
        private void BuildView(System.Windows.Media.Brush _brushe)
        {
            canvas.Children.Clear();
            scaleTransform.ScaleX = scaleTransform.ScaleY = 1;  //可视图

            //垂直线条
            //for (int i = 0; i < canvas.ActualWidth; i += GRID_SIZE)
            for (int i = (int)(canvas.ActualWidth - GRID_SIZE); i > 0; i -= GRID_SIZE)
            {

                System.Windows.Shapes.Path path = new System.Windows.Shapes.Path()
                {
                    Data = new LineGeometry(new System.Windows.Point(i, 0), new System.Windows.Point(i, canvas.ActualHeight)),
                    Stroke = _brushe,
                    StrokeThickness = 0.25
                };

                path.Data.Transform = scaleTransform;

                canvas.Children.Add(path);
            }

            // 横向线条
            for (int i = 0; i < canvas.ActualHeight; i += GRID_SIZE)
            {
                System.Windows.Shapes.Path path = new System.Windows.Shapes.Path()
                {
                    Data = new LineGeometry(new System.Windows.Point(0, i), new System.Windows.Point(canvas.ActualWidth, i)),
                    Stroke = _brushe,
                    StrokeThickness = 0.25
                };

                path.Data.Transform = scaleTransform;

                canvas.Children.Add(path);
            }
        }
        #endregion

        #region 进程间通信
        /// <summary>
        /// TCP/IP异步通信
        /// </summary>

        // ManualResetEvent instances signal completion.
        private ManualResetEvent connectDone = new ManualResetEvent(false);
        private ManualResetEvent sendDone = new ManualResetEvent(false);
        private ManualResetEvent receiveDone = new ManualResetEvent(false);

        // The response from the remote device.
        private List<string> response = new List<string>();

        // 连接过程
        private void ConnectCallback(IAsyncResult ar)
        {
            try
            {
                // Retrieve the socket from the state object.
                System.Net.Sockets.Socket _client = (System.Net.Sockets.Socket)ar.AsyncState;

                if (_client != null)
                {
                    // Complete the connection.
                    _client.EndConnect(ar);

                    Debug.WriteLine("Socket connected to " + _client.RemoteEndPoint.ToString());

                    // Signal that the connection has been made.
                    connectDone.Set();
                }
                else
                {
                    System.Windows.MessageBox.Show("(000-C) Error 初始化设定失败");
                    _logger.Error("(000-C) ConnectCallback Error");
                    FinishMode = -1;
                    Close();
                }


            }
            catch (Exception e)
            {
                _logger.Error("ConnectCallback: " + e.Message);
            }
        }
        //用于接收异步数据的状态对象
        private class AsyncStateObject
        {
            public System.Net.Sockets.Socket Socket;
            public byte[] ReceiveBuffer;
            public System.IO.MemoryStream ReceivedData;

            public AsyncStateObject(System.Net.Sockets.Socket soc)
            {
                this.Socket = soc;
                this.ReceiveBuffer = new byte[1024];
                this.ReceivedData = new System.IO.MemoryStream();
            }
        }
        //开始接收
        private void Receive(System.Net.Sockets.Socket _client)
        {
            try
            {
                AsyncStateObject state = new AsyncStateObject(_client);

                //异步通信开始
                Debug.WriteLine("Receive-----------------------Open");
                _client.BeginReceive(state.ReceiveBuffer,
                    0,
                    state.ReceiveBuffer.Length,
                    System.Net.Sockets.SocketFlags.None,
                    new System.AsyncCallback(ReceiveCallback),
                    state);

            }
            catch (Exception e)
            {
                _logger.Error("Receive: " + e.Message);
            }
        }
        // 接收回调
        private void ReceiveCallback(IAsyncResult ar)
        {
            try
            {
                AsyncStateObject state = (AsyncStateObject)ar.AsyncState;
                //Debug.WriteLine("ReceiveCallback");
                //获取加载的长度
                int len = 0;

                try
                {
                    len = state.Socket.EndReceive(ar);
                }
                catch (System.ObjectDisposedException e)
                {
                    //关闭
                    //Debug.WriteLine("ReceiveCallback-----------------------Close");
                    _logger.Error("ReceiveCallback-close: " + e.Message);
                    return;
                }

                //连接状态
                if (len <= 0)
                {
                    Debug.WriteLine("ReceiveCallback-----------------------Disconnect");
                    state.Socket.Close();
                    return;
                }

                state.ReceivedData.Write(state.ReceiveBuffer, 0, len);		//存储接收的数据
                if (state.Socket.Available == 0)
                {
                    //接收端
                    //将接收到的数据转换
                    string str = System.Text.Encoding.Default.GetString(state.ReceivedData.ToArray());
                    //response = str;		//接收数据
                    if (str.IndexOf("\0") > 0)
                    {
                        System.Globalization.StringInfo si = new System.Globalization.StringInfo(str);
                        int le = str.IndexOf("\0");

                        response.Add(si.SubstringByTextElements(0, le));

                    }
                    //for (int i = 0; i < response.Count; i++)
                    //{
                    //	Debug.WriteLine("[" + i + "] response--->>>   " + response[i].Length + "   <<<---");
                    //}
                    // クリア
                    state.ReceivedData.Close();
                    state.ReceivedData = new System.IO.MemoryStream();
                }

                //再次接收
                state.Socket.BeginReceive(state.ReceiveBuffer,
                    0,
                    state.ReceiveBuffer.Length,
                    System.Net.Sockets.SocketFlags.None,
                    new System.AsyncCallback(ReceiveCallback),
                    state);
            }
            catch (Exception e)
            {
                _logger.Error("ReceiveCallback: " + e.Message);
            }
        }
        // 发送处理
        private void Send(System.Net.Sockets.Socket _client, String data)
        {
            // Convert the string data to byte data using ASCII encoding.
            byte[] byteData = Encoding.Default.GetBytes(data);

            // Begin sending the data to the remote device.
            _client.BeginSend(byteData, 0, byteData.Length, 0, new AsyncCallback(SendCallback), _client);
        }
        private void SendCallback(IAsyncResult ar)
        {
            try
            {
                // Retrieve the socket from the state object.从状态对象检索套接字
                System.Net.Sockets.Socket client = (System.Net.Sockets.Socket)ar.AsyncState;

                // Complete sending the data to the remote device.
                int bytesSent = client.EndSend(ar);

                // Signal that all bytes have been sent.
                sendDone.Set();
            }
            catch (Exception e)
            {
                _logger.Error("SendCallback: " + e.Message);
            }
        }
        // 接收数据更新
        private bool ReceiveDataUpdate()
        {
            if (response.Count > 0)
            {
                //DataConstellation.strXmlData = new List<string>();
                for (int i = 0; i < response.Count; i++)
                {
                    if (!String.IsNullOrEmpty(response[i]))
                    {

                        if (response[i].Length > 0)
                        {
                            DataConstellation.strXmlData.Add(response[i]);		//　		
                            Debug.WriteLine("[" + i + "]ReceiveDataUpdate:" + response[i].Length + "\r\n");
                        }
                    }
                }
                response.Clear();	//　清除的传入数据

                return true;
            }
            else
            {
                return false;
            }
        }

        //============
        // 事件开始时启动
        // 第一: 从对象调用此事件过程
        // 第二: 开始时间
        public void PipeServer_StartListen(object sender, DateTime Event_Time, string Message)
        {

            // 查看收到的事件
            //label1.Text = Event_Time.ToString() + ": 开始接收。";

        }

        //============
        // 接收到反馈信息启动
        // 第一: 从对象调用此事件过程
        // 第二: 答复信息时间
        public void PipeServer_FinishTransmission(object sender, DateTime Transmit_Time, string Message)
        {
            try
            {
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    if (Message.IndexOf("GPS") != -1)
                    {
                        #region GPS 模块处理
                        var _point = XmlBase.XmlConvert.GetGpsModuleData(Message);
                        GpsModule = _point;
                        if (_point.Lat != 0 && _point.Lon != 0)
                        {
                            if (SettingData.TrajectoryMode == 5)
                            {
                                MainMap.Position = new PointLatLng(_point.Lat, _point.Lon);
                            }
                            //WaypointMarker.Position = new PointLatLng(_point.Lat, _point.Lon);
                            //HomeMarker.Position = new PointLatLng(_point.Lat, _point.Lon);
                        }
                        #endregion
                    }
                    else if ((Message.IndexOf("root") != -1) && (Message.IndexOf("mission") != -1))
                    {
                        #region MulitiWaypoint处理
                        var clear = MainMap.Markers.Where(p => p != null && p != UAVMarker && p != UAVRoute && p != WaypointMarker && p != NWaypointMarker && p != HomeMarker && p != SubMarker);
                        if (clear != null)
                        {
                            for (int i = 0; i < clear.Count(); i++)
                            {
                                MainMap.Markers.Remove(clear.ElementAt(i));
                                i--;
                            }
                        }
                        // 删除航点标记
                        MarkerClear(WaypointMarker);

                        #region MulitiWaypoint
                        // 加载 MulitiWaypoint
                        DataConstellation.MulitiWaypointRead(Message);

                        // 飞行计划最大最小发送
                        TransmitBar.Maximum = DataConstellation.BindingData.MulitWaypoint.multi.Count + 2; // MultiWaypoint编号 开始/完成消息
                        TransmitBar.Minimum = 0;
                        TransmitBar.Value = 0;

                        // MultiWaypoint自动转移模式
                        SettingData.ModeSetting = "マルチウェイポイント";//多路点

                        // 相对于地图坐标自动转化到飞行任务坐标
                        MainMap.Position = DataConstellation.BindingData.MulitWaypoint.Origin;

                        // MultiWaypoint标记
                        for (int i = 0; i < DataConstellation.BindingData.MulitWaypoint.multi.Count; i++)
                        {

                            // 计算两个点之间的距离
                            double dis1 = -1;
                            double dis2 = -1;
                            double ang1 = 0;
                            double ang2 = 0;

                            GPoint p2 = MainMap.FromLatLngToLocal(DataConstellation.BindingData.MulitWaypoint.multi[i]);
                            if (i != 0)
                            {
                                // 距离计算
                                dis1 = Math.Round(
                                    MainMap.MapProvider.Projection.GetDistance(
                                    DataConstellation.BindingData.MulitWaypoint.multi[i - 1],   // 1Pont
                                    DataConstellation.BindingData.MulitWaypoint.multi[i]        // 2Point
                                    ), 4, MidpointRounding.AwayFromZero);
                                dis1 *= 1000;    // km -> m

                                GPoint p1 = MainMap.FromLatLngToLocal(DataConstellation.BindingData.MulitWaypoint.multi[i - 1]);
                                ang1 = (Math.Atan2(p1.X - p2.X, p1.Y - p2.Y) * 180 / Math.PI) * -1;
                                ang1 += 90;
                            }
                            if (i != (DataConstellation.BindingData.MulitWaypoint.multi.Count - 1))
                            {
                                dis2 = Math.Round(
                                    MainMap.MapProvider.Projection.GetDistance(
                                    DataConstellation.BindingData.MulitWaypoint.multi[i],       // 1Pont
                                    DataConstellation.BindingData.MulitWaypoint.multi[i + 1]    // 2Point
                                    ), 4, MidpointRounding.AwayFromZero);
                                dis2 *= 1000;    // km -> m

                                GPoint p3 = MainMap.FromLatLngToLocal(DataConstellation.BindingData.MulitWaypoint.multi[i + 1]);
                                ang2 = (Math.Atan2(p3.X - p2.X, p3.Y - p2.Y) * 180 / Math.PI) * -1;
                                ang2 += 90;
                            }

                            // 标志的形成
                            GMapMarker m = new GMapMarker(DataConstellation.BindingData.MulitWaypoint.multi[i]);
                            {
                                Brush _brush = Brushes.Red; ;
                                //if (MainMap.MapProvider.ToString() == GMapProviders.OpenStreetMap.ToString() || MainMap.MapProvider.ToString() == "Mapple")
                                //{
                                //	_brush = Brushes.Red;
                                //}
                                //else
                                //{
                                //	_brush = Brushes.White;
                                //}
                                m.Shape = new MultiWaypoint(m, i + 1,
                                    DataConstellation.BindingData.MulitWaypoint.mpsi[i],
                                    DataConstellation.BindingData.MulitWaypoint.malt[i],
                                    DataConstellation.BindingData.MulitWaypoint.mspeed[i],
                                    DataConstellation.BindingData.MulitWaypoint.maccuracy[i],
                                    DataConstellation.BindingData.MulitWaypoint.mwait[i],
                                    dis1, dis2,
                                    ang1, ang2, _brush);

                                m.Offset = new System.Windows.Point(-15, -25);
                                m.ZIndex = int.MaxValue - (5 + i);
                                MainMap.Markers.Add(m);
                            }
                        }

                        // MultiWaypoint根视图
                        MapRoute route = new MapRoute(DataConstellation.BindingData.MulitWaypoint.multi, "UAV");
                        if ((route != null))
                        {
                            GMapRoute mRoute = new GMapRoute(route.Points);
                            {
                                mRoute.LineBrush = Brushes.Green;
                                mRoute.ZIndex = -1;
                                mRoute.RegenerateShape(MainMap);
                            }
                            MainMap.Markers.Add(mRoute);
                        }
                        #endregion

                        CommandButtonNameChange(DataConstellation.CommandMode = 1);			//命令开关
                        MenuIsEnabled(1);													//菜单显示/不显示开关

                        // 飞行计划发送
                        TransmitBar.Value = 0;
                        TransmitWindow.Visibility = Visibility.Visible;
                        TransmitSetMassage(0, DataConstellation.BindingData.MulitWaypoint.multi.Count);	//启动消息
                        #endregion
                    }


                }));
            }
            catch (Exception ex)
            {
                //System.Windows.MessageBox.Show("(000) Error: " + ex.Message);
                _logger.Error("(000) Error: " + ex.Message);
            }
        }
        #endregion

        #region 命名部分
        //============
        // 事件开始时执行
        // 第一: 从对象调用此事件
        // 第二：开始接收
        public void MyControl1_StartListen(object sender, DateTime Event_Time)
        {
        }

        //============
        // 启动事件接收答复信息
        // 第一: 从对象调用此事件过程
        // 第二: 请求服务器处理
        // 第三: 服务器发送答复
        public void MyControl1_ReceiveCall(object sender, DateTime Event_Time, string Reply_Message)
        {

            //// 結果表示
            //label1.Text = Event_Time.ToString() + ": 从客户端接收数据。\n\r";


            //// 在标签上显示的字符
            //label1.Text += "接收内容: *** " + Reply_Message + " ***";
            //Debug.WriteLine("接收内容: *** " + Reply_Message + " ***");
            try
            {
                PipeConnected = true;
                Dispatcher.BeginInvoke((Action)(() =>
                {
                    if (Reply_Message.IndexOf("GPS") != -1)
                    {
                        #region GPS模块处理
                        var _point = XmlBase.XmlConvert.GetGpsModuleData(Reply_Message);
                        GpsModule = _point;
                        if (_point.Lat != 0 && _point.Lon != 0)
                        {
                            if (SettingData.TrajectoryMode == 5)
                            {
                                MainMap.Position = new PointLatLng(_point.Lat, _point.Lon);
                            }
                            //WaypointMarker.Position = new PointLatLng(_point.Lat, _point.Lon);
                            //HomeMarker.Position = new PointLatLng(_point.Lat, _point.Lon);
                        }
                        #endregion
                    }
                    else if ((Reply_Message.IndexOf("root") != -1) && (Reply_Message.IndexOf("mission") != -1))
                    {
                        if (DataConstellation.BindingData.nDriveMode == 0)
                        {
                            #region MulitiWaypoint处理
                            var clear = MainMap.Markers.Where(p => p != null && p != UAVMarker && p != UAVRoute && p != WaypointMarker && p != NWaypointMarker && p != HomeMarker);
                            if (clear != null)
                            {
                                for (int i = 0; i < clear.Count(); i++)
                                {
                                    MainMap.Markers.Remove(clear.ElementAt(i));
                                    i--;
                                }
                            }
                            // Waypoint清除
                            MarkerClear(WaypointMarker);

                            #region MulitiWaypoint
                            // MulitiWaypoint加载
                            DataConstellation.MulitiWaypointRead(Reply_Message);
                            MMWinfow.Message = Reply_Message;
                            MMWinfow.HomePotion = new FlightPlanning.Waypoint()
                            {
                                Latitude = HomeMarker.Position.Lat,
                                Longitude = HomeMarker.Position.Lng,
                                Height = HomeMarker.Altitude,
                                Heading = HomeMarker.Azimuth
                            };
                            MMWinfow.FlightPlanFilePath.Text = "";

                            // 设定飞行计划的最大最小值
                            TransmitBar.Maximum = DataConstellation.BindingData.MulitWaypoint.multi.Count + 2; // MultiWaypoint数开始/完成
                            TransmitBar.Minimum = 0;
                            TransmitBar.Value = 0;

                            // MultiWaypoint自动改变模式
                            SettingData.ModeSetting = "マルチウェイポイント";//多路点

                            // 相对于地图的坐标将自动迁移到飞行计划坐标
                            MainMap.Position = DataConstellation.BindingData.MulitWaypoint.Origin;

                            // MultiWaypoint标记设置
                            for (int i = 0; i < DataConstellation.BindingData.MulitWaypoint.multi.Count; i++)
                            {

                                // 计算两点间的距离
                                double dis1 = -1;
                                double dis2 = -1;
                                double ang1 = 0;
                                double ang2 = 0;

                                GPoint p2 = MainMap.FromLatLngToLocal(DataConstellation.BindingData.MulitWaypoint.multi[i]);
                                if (i != 0)
                                {
                                    // 计算距离
                                    dis1 = Math.Round(
                                        MainMap.MapProvider.Projection.GetDistance(
                                        DataConstellation.BindingData.MulitWaypoint.multi[i - 1],   // 1Pont
                                        DataConstellation.BindingData.MulitWaypoint.multi[i]        // 2Point
                                        ), 4, MidpointRounding.AwayFromZero);
                                    dis1 *= 1000;    // km -> m

                                    GPoint p1 = MainMap.FromLatLngToLocal(DataConstellation.BindingData.MulitWaypoint.multi[i - 1]);
                                    ang1 = (Math.Atan2(p1.X - p2.X, p1.Y - p2.Y) * 180 / Math.PI) * -1;
                                    ang1 += 90;
                                }
                                if (i != (DataConstellation.BindingData.MulitWaypoint.multi.Count - 1))
                                {
                                    dis2 = Math.Round(
                                        MainMap.MapProvider.Projection.GetDistance(
                                        DataConstellation.BindingData.MulitWaypoint.multi[i],       // 1Pont
                                        DataConstellation.BindingData.MulitWaypoint.multi[i + 1]    // 2Point
                                        ), 4, MidpointRounding.AwayFromZero);
                                    dis2 *= 1000;    // km -> m

                                    GPoint p3 = MainMap.FromLatLngToLocal(DataConstellation.BindingData.MulitWaypoint.multi[i + 1]);
                                    ang2 = (Math.Atan2(p3.X - p2.X, p3.Y - p2.Y) * 180 / Math.PI) * -1;
                                    ang2 += 90;
                                }

                                // 标志的形成
                                GMapMarker m = new GMapMarker(DataConstellation.BindingData.MulitWaypoint.multi[i]);
                                {
                                    Brush _brush = Brushes.Red; ;
                                    //if (MainMap.MapProvider.ToString() == GMapProviders.OpenStreetMap.ToString() || MainMap.MapProvider.ToString() == "Mapple")
                                    //{
                                    //	_brush = Brushes.Red;
                                    //}
                                    //else
                                    //{
                                    //	_brush = Brushes.White;
                                    //}
                                    m.Shape = new MultiWaypoint(m, i + 1,
                                        DataConstellation.BindingData.MulitWaypoint.mpsi[i],
                                        DataConstellation.BindingData.MulitWaypoint.malt[i],
                                        DataConstellation.BindingData.MulitWaypoint.mspeed[i],
                                        DataConstellation.BindingData.MulitWaypoint.maccuracy[i],
                                        DataConstellation.BindingData.MulitWaypoint.mwait[i],
                                        dis1, dis2,
                                        ang1, ang2, _brush);

                                    m.Offset = new System.Windows.Point(-15, -25);
                                    m.ZIndex = int.MaxValue - (5 + i);
                                    MainMap.Markers.Add(m);
                                }
                            }

                            // MultiWaypoint根视图
                            MapRoute route = new MapRoute(DataConstellation.BindingData.MulitWaypoint.multi, "UAV");
                            if ((route != null))
                            {
                                GMapRoute mRoute = new GMapRoute(route.Points);
                                {
                                    mRoute.LineBrush = Brushes.Green;
                                    mRoute.ZIndex = -1;
                                    mRoute.RegenerateShape(MainMap);
                                }
                                MainMap.Markers.Add(mRoute);
                            }
                            #endregion

                            CommandButtonNameChange(DataConstellation.CommandMode = 1);			//命令开关
                            MenuIsEnabled(1);													//菜单显示/不显示开关

                            // 发送飞行计划
                            TransmitBar.Value = 0;
                            TransmitWindow.Visibility = Visibility.Visible;
                            TransmitSetMassage(0, DataConstellation.BindingData.MulitWaypoint.multi.Count);	//启动消息
                            #endregion
                        }
                        else if (DataConstellation.BindingData.nDriveMode == 1)
                        {
                            System.Windows.MessageBox.Show("空转解除，请发送");
                            _logger.Error("空转解除，请发送");
                        }
                        else if (DataConstellation.BindingData.nDriveMode == 2)
                        {
                            System.Windows.MessageBox.Show("飞行中。着陆后发送");
                            _logger.Error("飞行中。着陆后发送");
                        }
                        else
                        {
                            System.Windows.MessageBox.Show("不能发送飞行计划");
                            _logger.Error("不能发送飞行计划");
                        }
                    }
                }));
            }
            catch (Exception ex)
            {
                //System.Windows.MessageBox.Show("(000) Error: " + ex.Message);
                _logger.Error("(000) Error: " + ex.Message);
            }
        }

        //============
        // 发送答复开始事件
        // 第一: 从对象调用此事件
        // 第二: 答复消息发送时间
        public void MyControl1_FinishTransmission(object sender, DateTime Transmit_Time)
        {
            // *** label1.Text = Transmit_Time.ToString() + ": 有客户端应答";
            Debug.WriteLine("*** label1.Text =" + Transmit_Time.ToString() + ":回复了客户端");
        }
        #endregion
        private void Save_Data()
        {
            if (list_Save_Data.Count > 0)
            {
                String Save_Name = " ";
                String Excel_Save_Path = "";
                String Excel_Savefile_Path = "";
                String Excel_Fore_Path = "";
                String Excel_Full_Path = "";
                Save_Name = "C:\\AutoWing\\ " + System.DateTime.Now.ToString("HH-mm-ss yyyy-MM-dd ") + ".dat";
                int n;
                n = list_Save_Data.Count;
                string Space_Name = " ";
                /*===========================excel数据存储============================================*/
                Excel_Save_Path = Save_Name.Substring(Save_Name.LastIndexOf("\\") + 1);
                Excel_Savefile_Path = Excel_Save_Path.Substring(0, Excel_Save_Path.LastIndexOf("."));
                Excel_Fore_Path = Save_Name.Substring(0, Save_Name.LastIndexOf("\\"));
                Excel_Full_Path = Excel_Fore_Path + "\\ " + Excel_Savefile_Path + ".xls ";
                StreamWriter sw = new StreamWriter(Excel_Full_Path, false, Encoding.GetEncoding("gb2312"));
                StringBuilder sb = new StringBuilder();
                FileStream fs = File.Open(@Save_Name, FileMode.Create);
                // 创建写入流
                StreamWriter wr = new StreamWriter(fs);
                // 将ArrayList中的每个项逐一写入文件
                /*====================================excel的属性栏==================*/
                sb.Append("Roll" + "\t");
                sb.Append("Pitch" + "\t");
                sb.Append("Yaw" + "\t");
                sb.Append("Rollrate" + "\t");
                sb.Append("Pitchrate" + "\t");
                sb.Append("Yawrate" + "\t");
                sb.Append("Xacc" + "\t");
                sb.Append("Yacc" + "\t");
                sb.Append("Zacc" + "\t");
                sb.Append("Xmag" + "\t");
                sb.Append("Ymag" + "\t");
                sb.Append("Zmag" + "\t");
                sb.Append("LRoll" + "\t");
                sb.Append("LPitch" + "\t");
                sb.Append("LYaw" + "\t");
                sb.Append("LPower" + "\t");
                sb.Append("BSw1" + "\t");
                sb.Append("BSw2" + "\t");
                sb.Append("BSw3" + "\t");
                sb.Append("BSw4" + "\t");
                sb.Append("Motor_F" + "\t");
                sb.Append("Motor_B" + "\t");
                sb.Append("Motor_L" + "\t");
                sb.Append("Motor_R" + "\t");
                sb.Append("Motor_X" + "\t");
                sb.Append("Motor_Y" + "\t");
                sb.Append("AutoWingTransverseVelocity" + "\t");
                sb.Append("AutoWingLongitudinalVelocity" + "\t");
                sb.Append("AutoWingUpAndDownVelocity" + "\t");
                sb.Append("AutoWingLongitude" + "\t");
                sb.Append("AutoWingLatitude" + "\t");
                sb.Append("AutoWingAltitude" + "\t");
                sb.Append("GPS_Heading" + "\t");
                sb.Append("AutoWingStarNum" + "\t");
                sb.Append("GPS_Dop" + "\t");
                sb.Append("bara_Alt3" + "\t");
                sb.Append("AutoWingVoltValue" + "\t");
                sb.Append("AutoWingFlightMode" + "\t");
                sb.Append("AutoWingSensorState" + "\t");
                sb.Append("AutoWingCommunitationState" + "\t");
                sb.Append("undefined1" + "\t");
                sb.Append("undefined2" + "\t");
                sb.Append("undefined3" + "\t");
                sb.Append("undefined4" + "\t");
                sb.Append("undefined5" + "\t");
                sb.Append("Frame_Type" + "\t");//1
                sb.Append("Motor_Starting_Percent" + "\t");//2
                sb.Append("Param_Headfile_Num" + "\t");//3
                sb.Append("XbeeRecv" + "\t");//4
                sb.Append("Vesion_AP" + "\t");//5
                sb.Append("Vesion_IMU" + "\t");//6
                sb.Append("Cumlative_Hour" + "\t");//7
                sb.Append("Cumlative_Second" + "\t");//8
                sb.Append("AutoWingDataPacket" + "\t");//9
                sb.Append("AutoWingMarkerNums" + "\t");//10
                sb.Append("AutoWingWhichMarker" + "\t");//11
                sb.Append("SwitchPlantAndPhoto" + "\t");//12
                sb.Append("PlantProtectOperation" + "\t");//13
                sb.Append("AerialPhotoParam" + "\t");//14
                sb.Append("SecurityPolicy_ID" + "\t");//15
                sb.Append("SecurityPolicy_Var" + "\t");//16
                sb.Append("BasicFlightParam" + "\t");//17
                sb.Append("Destination_Lon" + "\t");//18
                sb.Append("Destination_lat" + "\t");//19
                sb.Append("Ref_Position" + "\t");//20
                sb.Append("VelocityReference_Vn" + "\t");//21
                sb.Append("VelocityReference_Ve" + "\t");//22
                sb.Append("AttitudeReference_Roll" + "\t");//23
                sb.Append("AttitudeReference_Pitch" + "\t");//24
                sb.Append("StabilizeRef_Roll" + "\t");//25
                sb.Append("StabilizeRef_Pitch" + "\t");//26
                sb.Append("AttitudeRef_Yaw" + "\t");//27
                sb.Append("FeedBack_Yaw" + "\t");//28
                sb.Append("StabilizeRef_Yaw" + "\t");//29
                sb.Append("Motor_Roll" + "\t");//30
                sb.Append("Motor_Pitch" + "\t");//31
                sb.Append("Motor_Yaw" + "\t");//32
                sb.Append("Ref_Alt" + "\t");//33
                sb.Append("Ref_AltVel" + "\t");//34
                sb.Append("FeedBack_Vd" + "\t");//35
                sb.Append("StabilizeRef_Throttle" + "\t");//36
                sb.Append("Motor_M7" + "\t");//37
                sb.Append("Motor_M8" + "\t");//38
                sb.Append("Motor_M9" + "\t");//39
                sb.Append("Motor_M10" + "\t");//40
                sb.Append("Undefined1" + "\t");//41
                sb.Append("Undefined2" + "\t");//42
                sb.Append("Undefined3" + "\t");//43
                sb.Append("Undefined4" + "\t");//44
                sb.Append("Undefined5" + "\t");//45
                sb.Append(Environment.NewLine);
                // 将ArrayList中的每个项逐一写入文件
                for (int i = 0; i < n; i++)
                {
                    wr.Write(list_Save_Data[i].Roll);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Roll.ToString() + "\t");//excel1
                    wr.Write(list_Save_Data[i].Pitch);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Pitch.ToString() + "\t");//excel2
                    wr.Write(list_Save_Data[i].Yaw);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Yaw.ToString() + "\t");//excel3
                    wr.Write(list_Save_Data[i].P);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].P.ToString() + "\t");//excel4
                    wr.Write(list_Save_Data[i].Q);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Q.ToString() + "\t");//excel5
                    wr.Write(list_Save_Data[i].R);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].R.ToString() + "\t");//excel6
                    wr.Write(list_Save_Data[i].XAcc);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].XAcc.ToString() + "\t");//excel7
                    wr.Write(list_Save_Data[i].YAcc);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].YAcc.ToString() + "\t");//excel8
                    wr.Write(list_Save_Data[i].ZAcc);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].ZAcc.ToString() + "\t");//excel9
                    wr.Write(list_Save_Data[i].XMag);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].XMag.ToString() + "\t");//excel10
                    wr.Write(list_Save_Data[i].YMag);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].YMag.ToString() + "\t");//excel11
                    wr.Write(list_Save_Data[i].ZMag);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].ZMag.ToString() + "\t");//excel12
                    wr.Write(list_Save_Data[i].LRoll);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].LRoll.ToString() + "\t");//excel13
                    wr.Write(list_Save_Data[i].LPitch);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].LPitch.ToString() + "\t");//excel14
                    wr.Write(list_Save_Data[i].LYaw);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].LYaw.ToString() + "\t");//excel15
                    wr.Write(list_Save_Data[i].LPower);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].LPower.ToString() + "\t");//excel16
                    wr.Write(list_Save_Data[i].BSw1);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].BSw1.ToString() + "\t");//excel17
                    wr.Write(list_Save_Data[i].BSw2);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].BSw2.ToString() + "\t");//excel18
                    wr.Write(list_Save_Data[i].BSw3);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].BSw3.ToString() + "\t");//excel19
                    wr.Write(list_Save_Data[i].BSw4);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].BSw4.ToString() + "\t");//excel20
                    wr.Write(list_Save_Data[i].Motor_F);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Motor_F.ToString() + "\t");//excel21
                    wr.Write(list_Save_Data[i].Motor_B);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Motor_B.ToString() + "\t");//excel22
                    wr.Write(list_Save_Data[i].Motor_L);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Motor_L.ToString() + "\t");//excel23
                    wr.Write(list_Save_Data[i].Motor_R);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Motor_R.ToString() + "\t");//excel24
                    wr.Write(list_Save_Data[i].Motor_X);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Motor_X.ToString() + "\t");//excel25
                    wr.Write(list_Save_Data[i].Motor_Y);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Motor_Y.ToString() + "\t");//excel26
                    wr.Write(list_Save_Data[i].AutoWingTransverseVelocity);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingTransverseVelocity.ToString() + "\t");//excel27
                    wr.Write(list_Save_Data[i].AutoWingLongitudinalVelocity);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingLongitudinalVelocity.ToString() + "\t");//excel28
                    wr.Write(list_Save_Data[i].AutoWingUpAndDownVelocity);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingUpAndDownVelocity.ToString() + "\t");//excel29
                    wr.Write(list_Save_Data[i].AutoWingLongitude);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingLongitude.ToString() + "\t");//excel30
                    wr.Write(list_Save_Data[i].AutoWingLatitude);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingLatitude.ToString() + "\t");//excel31
                    wr.Write(list_Save_Data[i].AutoWingAltitude);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingAltitude.ToString() + "\t");//excel32
                    wr.Write(list_Save_Data[i].GPS_Heading);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].GPS_Heading.ToString() + "\t");//excel33
                    wr.Write(list_Save_Data[i].AutoWingStarNum);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingStarNum.ToString() + "\t");//excel34
                    wr.Write(list_Save_Data[i].New_GPS_Dop);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_GPS_Dop.ToString() + "\t");//excel35
                    wr.Write(list_Save_Data[i].New_Bara_Alt);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Bara_Alt.ToString() + "\t");//excel36
                    wr.Write(list_Save_Data[i].AutoWingVoltValue);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingVoltValue.ToString() + "\t");//excel37
                    wr.Write(list_Save_Data[i].AutoWingFlightMode);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingFlightMode.ToString() + "\t");//excel38
                    wr.Write(list_Save_Data[i].AutoWingSensorState);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingSensorState.ToString() + "\t");//excel39
                    wr.Write(list_Save_Data[i].AutoWingCommunitationState);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingCommunitationState.ToString() + "\t");//excel40
                    wr.Write(list_Save_Data[i].New_Data1_Undefined1);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data1_Undefined1.ToString() + "\t");//excel41
                    wr.Write(list_Save_Data[i].New_Data1_Undefined2);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data1_Undefined2.ToString() + "\t");//excel42
                    wr.Write(list_Save_Data[i].New_Data1_Undefined3);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data1_Undefined3.ToString() + "\t");//excel43
                    wr.Write(list_Save_Data[i].New_Data1_Undefined4);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data1_Undefined4.ToString() + "\t");//excel44
                    wr.Write(list_Save_Data[i].New_Data1_Undefined5);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data1_Undefined5.ToString() + "\t");//excel45
                    wr.Write(list_Save_Data[i].New_Frame_Type);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Frame_Type.ToString() + "\t");//excel1
                    wr.Write(list_Save_Data[i].New_Motor_Starting_Percent);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Motor_Starting_Percent.ToString() + "\t");//excel2
                    wr.Write(list_Save_Data[i].New_Param_Headfile_Num);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Param_Headfile_Num.ToString() + "\t");//excel3
                    wr.Write(list_Save_Data[i].XbeeRecv);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].XbeeRecv.ToString() + "\t");//excel4
                    wr.Write(list_Save_Data[i].New_Vesion_AP);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Vesion_AP.ToString() + "\t");//excel5
                    wr.Write(list_Save_Data[i].New_Vesion_IMU);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Vesion_IMU.ToString() + "\t");//excel6
                    wr.Write(list_Save_Data[i].AutoWing_Tasete_Hour);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWing_Tasete_Hour.ToString() + "\t");//excel7
                    wr.Write(list_Save_Data[i].AutoWing_Tasete_Second);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWing_Tasete_Second.ToString() + "\t");//excel8
                    wr.Write(list_Save_Data[i].AutoWingDataPacket);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingDataPacket.ToString() + "\t");//excel9
                    wr.Write(list_Save_Data[i].AutoWingMarkerNums);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingMarkerNums.ToString() + "\t");//excel10
                    wr.Write(list_Save_Data[i].AutoWingWhichMarker);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingWhichMarker.ToString() + "\t");//excel11
                    wr.Write(list_Save_Data[i].Hangpaizhibao_Value);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Hangpaizhibao_Value.ToString() + "\t");//excel12
                    wr.Write(list_Save_Data[i].PlantProtectOperation);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].PlantProtectOperation.ToString() + "\t");//excel13
                    wr.Write(list_Save_Data[i].Arialphotoparam);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Arialphotoparam.ToString() + "\t");//excel14
                    wr.Write(list_Save_Data[i].Anquancelue_Code);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Anquancelue_Code.ToString() + "\t");//excel15
                    wr.Write(list_Save_Data[i].Anquancelue_Value);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Anquancelue_Value.ToString() + "\t");//excel16
                    wr.Write(list_Save_Data[i].basicflightparam);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].basicflightparam.ToString() + "\t");//excel17
                    wr.Write(list_Save_Data[i].AutoWingDestinationLongitude);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingDestinationLongitude.ToString() + "\t");//excel18
                    wr.Write(list_Save_Data[i].AutoWingDestinationLatitude);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingDestinationLatitude.ToString() + "\t");//excel19
                    wr.Write(list_Save_Data[i].ref_position);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].ref_position.ToString() + "\t");//excel20
                    wr.Write(list_Save_Data[i].velocityreference_vn);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].velocityreference_vn.ToString() + "\t");//excel21
                    wr.Write(list_Save_Data[i].velocityreference_ve);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].velocityreference_ve.ToString() + "\t");//excel22
                    wr.Write(list_Save_Data[i].attitudereference_roll);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].attitudereference_roll.ToString() + "\t");//excel23
                    wr.Write(list_Save_Data[i].attitudereference_pitch);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].attitudereference_pitch.ToString() + "\t");//excel24
                    wr.Write(list_Save_Data[i].stabillizeref_roll);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].stabillizeref_roll.ToString() + "\t");//excel25
                    wr.Write(list_Save_Data[i].stabillizeref_pitch);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].stabillizeref_pitch.ToString() + "\t");//excel26
                    wr.Write(list_Save_Data[i].attitude_yaw);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].attitude_yaw.ToString() + "\t");//excel27
                    wr.Write(list_Save_Data[i].feedback_yaw);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].feedback_yaw.ToString() + "\t");//excel28
                    wr.Write(list_Save_Data[i].stabillizeref_yaw);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].stabillizeref_yaw.ToString() + "\t");//excel29
                    wr.Write(list_Save_Data[i].motor_roll);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].motor_roll.ToString() + "\t");//excel30
                    wr.Write(list_Save_Data[i].motor_pitch);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].motor_pitch.ToString() + "\t");//excel31
                    wr.Write(list_Save_Data[i].motor_yaw);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].motor_yaw.ToString() + "\t");//excel32
                    wr.Write(list_Save_Data[i].ref_alt);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].ref_alt.ToString() + "\t");//excel33
                    wr.Write(list_Save_Data[i].altvel);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].altvel.ToString() + "\t");//excel34
                    wr.Write(list_Save_Data[i].feedback_vd);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].feedback_vd.ToString() + "\t");//excel35
                    wr.Write(list_Save_Data[i].stabillizeref_throttle);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].stabillizeref_throttle.ToString() + "\t");//excel36
                    wr.Write(list_Save_Data[i].motor_m7);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].motor_m7.ToString() + "\t");//excel37
                    wr.Write(list_Save_Data[i].motor_m8);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].motor_m8.ToString() + "\t");//excel38
                    wr.Write(list_Save_Data[i].motor_m9);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].motor_m9.ToString() + "\t");//excel39
                    wr.Write(list_Save_Data[i].motor_m10);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].motor_m10.ToString() + "\t");//excel40

                    wr.Write(list_Save_Data[i].New_Data2_Undefined1);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data2_Undefined1.ToString() + "\t");//excel41
                    wr.Write(list_Save_Data[i].New_Data2_Undefined2);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data2_Undefined2.ToString() + "\t");//excel42
                    wr.Write(list_Save_Data[i].New_Data2_Undefined3);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data2_Undefined3.ToString() + "\t");//excel43
                    wr.Write(list_Save_Data[i].New_Data2_Undefined4);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data2_Undefined4.ToString() + "\t");//excel44

                    wr.WriteLine(list_Save_Data[i].New_Data2_Undefined5);
                    sb.Append(list_Save_Data[i].New_Data2_Undefined5.ToString() + "\t");//excel45
                    sb.Append(Environment.NewLine);
                }
                // 关闭写入流
                wr.Flush();
                wr.Close();
                // 关闭文件
                fs.Close();
                sw.Write(sb.ToString());
                sw.Flush();
                sw.Close();
                sw.Dispose();
            }
        }

        private void Button_Save_Click(object sender, RoutedEventArgs e)
        {
            if (list_Save_Data.Count > 0)
            {
                String Save_Path = "";
                String Excel_Save_Path = "";
                String Excel_Savefile_Path = "";
                String Excel_Fore_Path = "";
                String Excel_Full_Path = "";
                //创建一个保存文件式的对话框
                Microsoft.Win32.SaveFileDialog sfd = new Microsoft.Win32.SaveFileDialog();
                //设置这个对话框的起始保存路径
                sfd.InitialDirectory = @"桌面";
                //设置保存的文件的类型，注意过滤器的语法
                sfd.Filter = "dat文件|*.dat";
                //调用ShowDialog()方法显示该对话框，该方法的返回值代表用户是否点击了确定按钮
                if (sfd.ShowDialog() == true)
                {
                    Save_Path = sfd.FileName;
                }
                else
                {
                    System.Windows.MessageBox.Show("取消保存");
                    return;
                }
                /*===========================excel数据存储============================================*/
                Excel_Save_Path = Save_Path.Substring(Save_Path.LastIndexOf("\\") + 1);
                Excel_Savefile_Path = Excel_Save_Path.Substring(0, Excel_Save_Path.LastIndexOf("."));
                Excel_Fore_Path = Save_Path.Substring(0, Save_Path.LastIndexOf("\\"));
                Excel_Full_Path = Excel_Fore_Path + "\\ " + Excel_Savefile_Path + ".xls ";
                StreamWriter sw = new StreamWriter(Excel_Full_Path, false, Encoding.GetEncoding("gb2312"));
                StringBuilder sb = new StringBuilder();
                int n;
                n = list_Save_Data.Count;
                string Space_Name = " ";
                FileStream fs = File.Open(@Save_Path, FileMode.Create);
                // 创建写入流
                StreamWriter wr = new StreamWriter(fs);
                /*====================================excel的属性栏==================*/
                sb.Append("Roll" + "\t");
                sb.Append("Pitch" + "\t");
                sb.Append("Yaw" + "\t");
                sb.Append("Rollrate" + "\t");
                sb.Append("Pitchrate" + "\t");
                sb.Append("Yawrate" + "\t");
                sb.Append("Xacc" + "\t");
                sb.Append("Yacc" + "\t");
                sb.Append("Zacc" + "\t");
                sb.Append("Xmag" + "\t");
                sb.Append("Ymag" + "\t");
                sb.Append("Zmag" + "\t");
                sb.Append("LRoll" + "\t");
                sb.Append("LPitch" + "\t");
                sb.Append("LYaw" + "\t");
                sb.Append("LPower" + "\t");
                sb.Append("BSw1" + "\t");
                sb.Append("BSw2" + "\t");
                sb.Append("BSw3" + "\t");
                sb.Append("BSw4" + "\t");
                sb.Append("Motor_F" + "\t");
                sb.Append("Motor_B" + "\t");
                sb.Append("Motor_L" + "\t");
                sb.Append("Motor_R" + "\t");
                sb.Append("Motor_X" + "\t");
                sb.Append("Motor_Y" + "\t");
                sb.Append("AutoWingTransverseVelocity" + "\t");
                sb.Append("AutoWingLongitudinalVelocity" + "\t");
                sb.Append("AutoWingUpAndDownVelocity" + "\t");
                sb.Append("AutoWingLongitude" + "\t");
                sb.Append("AutoWingLatitude" + "\t");
                sb.Append("AutoWingAltitude" + "\t");
                sb.Append("GPS_Heading" + "\t");
                sb.Append("AutoWingStarNum" + "\t");
                sb.Append("GPS_Dop" + "\t");
                sb.Append("bara_Alt3" + "\t");
                sb.Append("AutoWingVoltValue" + "\t");
                sb.Append("AutoWingFlightMode" + "\t");
                sb.Append("AutoWingSensorState" + "\t");
                sb.Append("AutoWingCommunitationState" + "\t");
                sb.Append("undefined1" + "\t");
                sb.Append("undefined2" + "\t");
                sb.Append("undefined3" + "\t");
                sb.Append("undefined4" + "\t");
                sb.Append("undefined5" + "\t");
                sb.Append("Frame_Type" + "\t");
                sb.Append("Motor_Starting_Percent" + "\t");
                sb.Append("Param_Headfile_Num" + "\t");
                sb.Append("XbeeRecv" + "\t");
                sb.Append("Vesion_AP" + "\t");
                sb.Append("Vesion_IMU" + "\t");
                sb.Append("Cumlative_Hour" + "\t");
                sb.Append("Cumlative_Second" + "\t");
                sb.Append("AutoWingDataPacket" + "\t");
                sb.Append("AutoWingMarkerNums" + "\t");
                sb.Append("AutoWingWhichMarker" + "\t");
                sb.Append("Max_Velocity" + "\t");
                sb.Append("Max_Distance" + "\t");
                sb.Append("Max_Altitude" + "\t");
                sb.Append("Max_Spraying_Swath" + "\t");
                sb.Append("Ref_Roll" + "\t");
                sb.Append("New_Kalman_Roll" + "\t");
                sb.Append("New_U_Roll" + "\t");
                sb.Append("Ref_Pitch" + "\t");
                sb.Append("Kalman_Pitch" + "\t");
                sb.Append("U_Pitch" + "\t");
                sb.Append("Ref_Yaw" + "\t");
                sb.Append("Feedback_Yaw" + "\t");
                sb.Append("Kalman_Yaw" + "\t");
                sb.Append("U_Yaw" + "\t");
                sb.Append("Ref_Alt" + "\t");
                sb.Append("Kalman_Zacc" + "\t");
                sb.Append("Kalman_Vd" + "\t");
                sb.Append("Kalman_Alt" + "\t");
                sb.Append("U_Alt" + "\t");
                sb.Append("Ref_Vn" + "\t");
                sb.Append("Pos_N_Feedback" + "\t");
                sb.Append("Kalman_Vn" + "\t");
                sb.Append("Kalman_PosN" + "\t");
                sb.Append("U_PosN" + "\t");
                sb.Append("Ref_Ve" + "\t");
                sb.Append("Pos_E_Feedback" + "\t");
                sb.Append("Kalman_Ve" + "\t");
                sb.Append("Kalman_PosE" + "\t");
                sb.Append("U_PosE" + "\t");
                sb.Append("Undefined1" + "\t");
                sb.Append("Undefined2" + "\t");
                sb.Append("Undefined3" + "\t");
                sb.Append("Undefined4" + "\t");
                sb.Append("Undefined5" + "\t");
                sb.Append(Environment.NewLine);
                // 将ArrayList中的每个项逐一写入文件
                for (int i = 0; i < n; i++)
                {
                    wr.Write(list_Save_Data[i].Roll);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Roll.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].Pitch);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Pitch.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].Yaw);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Yaw.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].P);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].P.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].Q);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Q.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].R);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].R.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].XAcc);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].XAcc.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].YAcc);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].YAcc.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].ZAcc);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].ZAcc.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].XMag);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].XMag.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].YMag);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].YMag.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].ZMag);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].ZMag.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].LRoll);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].LRoll.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].LPitch);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].LPitch.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].LYaw);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].LYaw.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].LPower);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].LPower.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].BSw1);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].BSw1.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].BSw2);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].BSw2.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].BSw3);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].BSw3.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].BSw4);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].BSw4.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].Motor_F);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Motor_F.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].Motor_B);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Motor_B.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].Motor_L);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Motor_L.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].Motor_R);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Motor_R.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].Motor_X);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Motor_X.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].Motor_Y);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Motor_Y.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWingTransverseVelocity);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingTransverseVelocity.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWingLongitudinalVelocity);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingLongitudinalVelocity.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWingUpAndDownVelocity);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingUpAndDownVelocity.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWingLongitude);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingLongitude.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWingLatitude);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingLatitude.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWingAltitude);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingAltitude.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].GPS_Heading);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].GPS_Heading.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWingStarNum);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingStarNum.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_GPS_Dop);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_GPS_Dop.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Bara_Alt);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Bara_Alt.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWingVoltValue);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingVoltValue.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWingFlightMode);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingFlightMode.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWingSensorState);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingSensorState.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWingCommunitationState);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingCommunitationState.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Data1_Undefined1);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data1_Undefined1.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Data1_Undefined2);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data1_Undefined2.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Data1_Undefined3);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data1_Undefined3.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Data1_Undefined4);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data1_Undefined4.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Data1_Undefined5);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data1_Undefined5.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Frame_Type);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Frame_Type.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Motor_Starting_Percent);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Motor_Starting_Percent.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Param_Headfile_Num);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Param_Headfile_Num.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].XbeeRecv);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].XbeeRecv.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Vesion_AP);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Vesion_AP.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Vesion_IMU);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Vesion_IMU.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWing_Tasete_Hour);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWing_Tasete_Hour.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWing_Tasete_Second);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWing_Tasete_Second.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWingDataPacket);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingDataPacket.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWingMarkerNums);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingMarkerNums.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].AutoWingWhichMarker);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].AutoWingWhichMarker.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].Set_Pensa_Sudu);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Set_Pensa_Sudu.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].Set_Pensa_Juli);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Set_Pensa_Juli.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].Set_Pensa_Gaodu);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Set_Pensa_Gaodu.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].Set_Pensa_Banjing);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].Set_Pensa_Banjing.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Ref_Roll);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Ref_Roll.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Kalman_Roll);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Kalman_Roll.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_U_Roll);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_U_Roll.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Ref_Pitch);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Ref_Pitch.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Kalman_Pitch);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Kalman_Pitch.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_U_Pitch);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_U_Pitch.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Ref_Yaw);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Ref_Yaw.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Feedback_Yaw);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Feedback_Yaw.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Kalman_Yaw);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Kalman_Yaw.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_U_Yaw);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_U_Yaw.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Ref_Alt);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Ref_Alt.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Kalman_Zacc);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Kalman_Zacc.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Kalman_Vd);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Kalman_Vd.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Kalman_Alt);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Kalman_Alt.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_U_Alt);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_U_Alt.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Ref_Vn);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Ref_Vn.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Pos_N_Feedback);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Pos_N_Feedback.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Kalman_Vn);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Kalman_Vn.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Kalman_PosN);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Kalman_PosN.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_U_PosN);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_U_PosN.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Ref_Ve);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Ref_Ve.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Pos_E_Feedback);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Pos_E_Feedback.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Kalman_Ve);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Kalman_Ve.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Kalman_PosE);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Kalman_PosE.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_U_PosE);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_U_PosE.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Data2_Undefined1);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data2_Undefined1.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Data2_Undefined2);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data2_Undefined2.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Data2_Undefined3);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data2_Undefined3.ToString() + "\t");//excel
                    wr.Write(list_Save_Data[i].New_Data2_Undefined4);
                    wr.Write(Space_Name);
                    sb.Append(list_Save_Data[i].New_Data2_Undefined4.ToString() + "\t");//excel
                    wr.WriteLine(list_Save_Data[i].New_Data2_Undefined5);
                    sb.Append(list_Save_Data[i].New_Data2_Undefined5.ToString() + "\t");//excel
                    sb.Append(Environment.NewLine);
                }
                // 关闭写入流
                wr.Flush();
                wr.Close();
                // 关闭文件
                fs.Close();
                sw.Write(sb.ToString());
                sw.Flush();
                sw.Close();
                sw.Dispose();
                System.Windows.MessageBox.Show("Save Success");
            }
        }
        /// <summary>
        /// /右击添加marker标志 修改：ZHF
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void MarkerControl_MouseRightButtonDown_X(object sender, MouseButtonEventArgs e)
        {

//            /*****************************************每次新添加的marker重新清零*********************************/
//            Marker_Set_Heading = 0.0;
//            Marker_Set_Height = 0.0;
//            Marker_Set_Velocity = 0.0;

////////////////////////////////////////////////////一旦有方案生成成功右键添加marker的功能被关闭///////////////////////////
//            if (Lock_Marker_Flag == false)
//            {
//                if (ProjectList_X.Count != 0)
//                {
//                    if (ProjectList_X[BaseSelect].WaypointData.Count >= _maxMultiWaypoint_X)
//                    {
//                        System.Windows.MessageBox.Show("(000) 航点数设置已达到上限。");
//                        return;
//                    }
//                    if (DrawMode_X == 0)
//                    {
//                        if (Keyboard.Modifiers != ModifierKeys.Control)
//                        {
//                            WaypointSelect_X.Clear();
//                        }
//                        if ((e.RightButton == MouseButtonState.Pressed) /*&& (SettingData.DeviceMode == false)*/)
//                        {
//                            if (ProjectList_X.Count > 0)
//                            {
//                                // 仅在触摸操作
//                                if (WaypointSelect_X.Count > 0)
//                                {
//                                    if (!ProjectList_X[BaseSelect].WaypointMarker[WaypointSelect_X[0] - 1].IsMouseOver)
//                                    {
//                                        WaypointAndPathAdd_X(e.GetPosition(MainMap), BaseSelect);		// Waypoint追加
//                                        ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));			// ProjectRecord追加
//                                    }
//                                }
//                                else
//                                {
//                                    WaypointAndPathAdd_X(e.GetPosition(MainMap), BaseSelect);		// Waypoint追加
//                                    ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));			// ProjectRecord追加
//                                }
//                            }
//                        }

//                        if (ProjectList_X[BaseSelect].WaypointMarker.Count > 0)
//                        {
//                            for (int i = 0; i < ProjectList_X[BaseSelect].WaypointMarker.Count; i++)
//                            {
//                                if (WaypointSelect_X.Count > 0)
//                                {
//                                    if (WaypointSelect_X[0] != ProjectList_X[BaseSelect].WaypointMarker[i].ID)
//                                    {
//                                        ProjectList_X[BaseSelect].WaypointMarker[i].Mode = -1;
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//            }
        }
        /// <summary>
        /// /追加marker新的修改:zhf
        /// </summary>
        /// <param name="_point"></param>
        /// <param name="_baseSelect"></param>
        private void WaypointAndPathAdd_X(System.Windows.Point _point, int _baseSelect)
        {
            try
            {
                PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                Waypoint = MainMap.FromLocalToLatLng((int)_point.X, (int)_point.Y); //地图上的位置
                int _id = ProjectList_X[BaseSelect].WaypointData.Count + 1;
                WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                WaypointMarkerAdd_X(ProjectList_X[BaseSelect].WaypointData[_id - 1], _id);	// WaypointMarker追加
                WaypointPathAdd_X(ProjectList_X[BaseSelect].WaypointMarker[_id - 1]);	// Path追加
                ///////////////////////////////////第四处航拍需要修改的地方///////////////////////////////


///////////////////////////////////////////添加角度生成函数///////////////////////////////////////////////////////////////
                if (Constants.Style_Change_HangPaiAndZhiBao_Flag == 1 && Constants.Angle_Auto_Make_Flag==1)
                {
                    if (_id > 1)
                    {
                        First_Moment_lat = ProjectList_X[0].WaypointData[(_id - 2)].Latitude;
                        First_Moment_lon = ProjectList_X[0].WaypointData[(_id - 2)].Longitude;
                        Second_Moment_lat = ProjectList_X[0].WaypointData[(_id - 1)].Latitude;
                        Second_Moment_lon = ProjectList_X[0].WaypointData[(_id - 1)].Longitude;
                        WayPoint_Yaw[_id - 2] = Function_TwoPoint_Angle(First_Moment_lat, First_Moment_lon, Second_Moment_lat, Second_Moment_lon);
                    }
                }
///////////////////////////////////////////添加角度生成函数///////////////////////////////////////////////////////////////
            }
            catch
            {

            }
        }
        /// <summary>
        /// 角度是否自动生成
        /// </summary>
        public void Function_JiaoduAutoMake_ActiveOrNagtive()
        {
            if(Constants.Angle_Auto_Make_Flag==0)
            {
                for(int i=0;i<100;i++)
                {
                    WayPoint_Yaw[i] = 0;
                }
            }
            else
            {
                 if (ProjectList_X.Count > 0)
                 {
                    if(ProjectList_X[BaseSelect].WaypointMarker.Count>1)
                    {
                        for(int j=0;j<(ProjectList_X[BaseSelect].WaypointMarker.Count-1);j++)
                        {
                            First_Moment_lat = ProjectList_X[0].WaypointData[(j)].Latitude;
                            First_Moment_lon = ProjectList_X[0].WaypointData[(j)].Longitude;
                            Second_Moment_lat = ProjectList_X[0].WaypointData[(j+1)].Latitude;
                            Second_Moment_lon = ProjectList_X[0].WaypointData[(j+1)].Longitude;
                            WayPoint_Yaw[j] = Function_TwoPoint_Angle(First_Moment_lat, First_Moment_lon, Second_Moment_lat, Second_Moment_lon);
                        }
                    }
                 }
            }
        }

        /// <summary>
        /// /waypoint追加 修改:zhf
        /// </summary>
        /// <param name="_point"></param>
        /// <param name="_id"></param>
        private void WaypointAdd_X(PointLatLng _point, int _id)
        {
            try
            {
                //double  = 0.0;
                //double  = 0.0;
                //double  = 0.0;

                var _waypoint = new FlightPlanning.Waypoint();
                System.Windows.Point _p = FlightPlanXML.MeterPerLatLng(ProjectList_X[BaseSelect].BaseMarker.Position, _point);
                int _count = ProjectList_X[BaseSelect].WaypointData.Count;
                if (_count > 0)
                {
                    FlightPlanning.Waypoint _waypointList = new FlightPlanning.Waypoint()
                    {
                        ID = _id,
                        Name = "",
                        Latitude = _point.Lat,
                        Longitude = _point.Lng,
                        x = Math.Round(_p.X, 3, MidpointRounding.AwayFromZero),
                        y = Math.Round(_p.Y, 3, MidpointRounding.AwayFromZero),
                        Height = Marker_Set_Height,
                        Heading = Marker_Set_Heading,
                        //     Height = Math.Round(ProjectList_X[BaseSelect].WaypointData[_count - 1].Height, 3, MidpointRounding.AwayFromZero),
                        //     Heading = Math.Round(ProjectList_X[BaseSelect].WaypointData[_count - 1].Heading, 0, MidpointRounding.AwayFromZero),
                        ThreasholdH = ProjectList_X[BaseSelect].WaypointData[_count - 1].ThreasholdH,
                        ThreasholdV = ProjectList_X[BaseSelect].WaypointData[_count - 1].ThreasholdV,
                        Wait = Fly_Route_Length_Extern,
                        Function = 0,
                        //     Speed = ProjectList_X[BaseSelect].WaypointData[_count - 1].Speed
                        Speed = Marker_Set_Velocity
                    };
                    ProjectList_X[BaseSelect].WaypointData.Add(_waypointList);
                }
                else
                {
                    FlightPlanning.Waypoint _waypointList = new FlightPlanning.Waypoint()
                    {
                        ID = _id,
                        Name = "",
                        Latitude = _point.Lat,
                        Longitude = _point.Lng,
                        x = Math.Round(_p.X, 3, MidpointRounding.AwayFromZero),
                        y = Math.Round(_p.Y, 3, MidpointRounding.AwayFromZero),
                        //     Height = Child.Waypoint.Alt,//Math.Round(Altitude.WaypointAlt, 3, MidpointRounding.AwayFromZero),
                        //     Heading = Child.Waypoint.Yaw,
                        Height = Marker_Set_Height,
                        Heading = Marker_Set_Heading,

                        //   ThreasholdH = Properties.Settings.Default.Waypoint_Threashold_X,
                        //    ThreasholdV = Properties.Settings.Default.Waypoint_Threashold_X,
                        //    Wait = Properties.Settings.Default.Waypoint_Wait_X,
                        Function = 0,
                        Speed = Marker_Set_Velocity
                    };
                    ProjectList_X[BaseSelect].WaypointData.Add(_waypointList);
                }
            }
            catch
            {

            }
        }

        private double Function_TwoPoint_Angle(double first_destination_la, double first_destination_lo, double second_destination_la, double second_destination_lo)
        {
            double Actual_angle = 0;
            double Actual_C = 0.0;
            double Actual_A = 0.0;

            Actual_C = Math.Cos((90 - second_destination_la) * 3.1415926 / 180.0) * Math.Cos((90 - first_destination_la) * 3.1415926 / 180.0) + Math.Sin((90 - second_destination_la) * 3.1415926 / 180.0) * Math.Sin((90 - first_destination_la) * 3.1415926 / 180.0) * Math.Cos((second_destination_lo - first_destination_lo) * 3.1415926 / 180.0);
            Actual_A = Math.Sqrt((1 - Actual_C * Actual_C));
            if (Actual_A != 0)
            {
                Actual_angle = Math.Asin(((Math.Sin((90 - second_destination_la) * 3.1415926 / 180.0)) * Math.Sin((second_destination_lo - first_destination_lo) * 3.1415926 / 180.0)) / Actual_A);

                Actual_angle = Actual_angle * 180.0 / 3.1415926;
                ////////////////////////////////四个象限/////////////////////////////////////////////////////////////
                if (second_destination_la > first_destination_la && second_destination_lo > first_destination_lo)
                {
                    Actual_angle = -Actual_angle;
                }
                if (second_destination_la < first_destination_la && second_destination_lo > first_destination_lo)
                {
                    Actual_angle = -180 + Actual_angle;
                }
                if (second_destination_la < first_destination_la && second_destination_lo < first_destination_lo)
                {
                    Actual_angle = 180 + Actual_angle;
                }
                if (second_destination_la > first_destination_la && second_destination_lo < first_destination_lo)
                {
                    Actual_angle = -Actual_angle;
                }
                ///////////////////////////////四个象限////////////////////////////////////////////////////////////////
            }
            if (second_destination_la == first_destination_la && second_destination_lo >= first_destination_lo)
            {
                Actual_angle = -90;
            }
            if (second_destination_la == first_destination_la && second_destination_lo <= first_destination_lo)
            {
                Actual_angle = 90;
            }
            if (second_destination_la >= first_destination_la && second_destination_lo == first_destination_lo)
            {
                Actual_angle = 0;
            }
            if (second_destination_la <= first_destination_la && second_destination_lo == first_destination_lo)
            {
                Actual_angle = 180;
            }
            if (Actual_angle >= -180 & Actual_angle<=0)
            {
                Actual_angle = -Actual_angle;
            }
            else if (Actual_angle >= 0 & Actual_angle <= 180)
            {
                Actual_angle = 360 - Actual_angle;
            }
            return Actual_angle;
        }


        /// <summary>
        /// /点的标志物的追加 修改:zhf
        /// </summary>
        /// <param name="_waypoint"></param>
        /// <param name="_id"></param>
        private void WaypointMarkerAdd_X(FlightPlanning.Waypoint _waypoint, int _id)
        {
            GMapMarker _marker = new GMapMarker(new PointLatLng(_waypoint.Latitude, _waypoint.Longitude));
            {
                _marker.Altitude = _waypoint.Height;
                _marker.Azimuth = _waypoint.Heading + ProjectList_X[BaseSelect].MissionData.Rotation;
                //_marker.Speed = Properties.Settings.Default.Waypoint_Speed;
                _marker.Speed = _waypoint.Speed;
                _marker.Shape = new CustomMarkers.Waypoint(this, _marker, SettingData.DeviceMode, _id, false);
                _marker.Offset = new System.Windows.Point(-25, -40);
                _marker.ZIndex = int.MaxValue;
            }
            ProjectList_X[BaseSelect].WaypointMarker.Add(_marker);

            if(Constants.Style_Change_HangPaiAndZhiBao_Flag==1)
            {
                MainMap.Markers.Add(ProjectList_X[BaseSelect].WaypointMarker[_id - 1]);
            }

        }
        /// <summary>
        /// /path路径的显示 修改:zhf
        /// </summary>
        /// <param name="_marker"></param>
        void WaypointPathAdd_X(GMapMarker _marker)
        {
            ProjectList_X[BaseSelect].WaypointPath.Points.Add(_marker.Position);
            ProjectList_X[BaseSelect].WaypointPath.RegenerateShape(MainMap);                      //　地图上的Path显示
            int Count = ProjectList_X[BaseSelect].WaypointPath.Points.Count;
            FlightPlanning.Path _PathList = new FlightPlanning.Path()
            {
                Waypoint1 = Count,
                Waypoint2 = Count + 1,
                Speed = ProjectList_X[BaseSelect].WaypointData[Count - 1].Speed,
                Shape = "Linear"
            };
            ProjectList_X[BaseSelect].PathData.Add(_PathList);
        }
        /// <summary>
        /// //深度拷贝 修改:zhf
        /// </summary>
        /// <param name="_projectList"></param>
        /// <returns></returns>
        private List<Project> ProjectDeepCopy_X(List<Project> _projectList)
        {
            var _projectAdd = new List<Project>();
            try
            {
                foreach (var _project in _projectList)
                {
                    var _p = new Project();
                    _p.MissionData = DeepCopyHelper_X.DeepCopy<Mission>(_project.MissionData);
                    _p.OldBasePoint = DeepCopyHelper_X.DeepCopy<PointLatLng>(_project.OldBasePoint);
                    _p.PathData = DeepCopyHelper_X.DeepCopy<List<FlightPlanning.Path>>(_project.PathData);
                    _p.WaypointData = DeepCopyHelper_X.DeepCopy<List<FlightPlanning.Waypoint>>(_project.WaypointData);
                    _projectAdd.Add(_p);
                }
            }
            catch
            {

            }
            return _projectAdd;
        }
        /// <summary>
        /// 启动路点添加 修改:zhf
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Lock_Marker_Flag = false;

                AreaChoose_MissionDel_X(0);//这边是ABC区域marker基准点
                AreaChooseMarkerMessionAdd_X();//这边是ABC区域marker基准点

                AutoWing_MissionDel_X(0);//这边是区域marker基准点
                AutoWingMarkerMessionAdd_X();//这边是区域marker基准点

                Distance_MissionDel_X(0);//这边是区域marker基准点
                DistanceMarkerMessionAdd_X();//这边是区域marker基准点

                Obstacle_MissionDel_X(0);//这边是障碍点基准点
                ObstacleMarkerMessionAdd_X();//这边是障碍点基准点

                WayPoint_NumS = 0;
                MissionDel_X(0);
                MissionAndBaseMarkerAdd_X();					// Base追加
                ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));				// ProjectRecord追加
          //      MainMonitorClear();
                DrawTrack_Count = 0;
           //     Home_flag = 0;
                Start_DrawRoute_Flag = 1;
                m_make_click = 0;
                fanganshengcheng.Content = "方案生成";
                Work_Record.Content = "";

                if (AllAerocraftData.Hangpaizhibao_Value==1)
                {
                    for (int jj = 0; jj < 100; jj++)
                    {
                        WayPoint_HengxiangSudu[jj] = Convert.ToDouble(Constants.Show_UAV_HangPaiSpeed.ToString("#0.0"));
                        WayPoint_ZongshangSudu[jj] = Convert.ToDouble(Constants.Show_UAV_HangPaiUpSpeed.ToString("#0.0"));
                        WayPoint_ZongxiaSudu[jj] = Convert.ToDouble(Constants.Show_UAV_HangPaiDownSpeed.ToString("#0.0"));
                    }
                    WaypointWindow Child = (WaypointWindow)Container.Children[0].Content;
                    Child.WaypointUpdate = false;           //Waypoint释放
                    Child.isEnable = true;
                    for (int ii = 0; ii < 100; ii++)
                    {
                        Child.Function_Reset();
                        WayPoint_SetIndex[ii] = 0;
                    }
                }
                else
                {
                    for (int jj = 0; jj < 100; jj++)
                    {
                        WayPoint_Height[jj] = 0.0;
                        WayPoint_HoverTimer[jj] = 0.0;
                        WayPoint_SetIndex[jj] = 0;
                        WayPoint_KeepIndex1[jj] = 0;
                        WayPoint_Yaw[jj] = 0.0;
                        WayPoint_HengxiangSudu[jj] = 0.0;
                        WayPoint_ZongshangSudu[jj] = 0.0;
                        WayPoint_ZongxiaSudu[jj] = 0.0;
                        WayPoint_KeepIndex2[jj] = 0.0;
                    }
                }

            }
            catch
            {

            }
        }
        /// <summary>
        /// 针对marker初始化添加的
        /// </summary>
        private void AutoWingMarkerMessionAdd_X()
        {
            ProjectList_Marker.Add(new Project());
            ProjectList_Marker[0].WaypointData = new List<FlightPlanning.Waypoint>();
            ProjectList_Marker[0].WaypointMarker = new List<GMapMarker>();

            MainMap.Markers.Add(ProjectList_Marker[0].WaypointPath);
            ProjectList_Marker[0].MissionData = MissionAdd_X(MainMap.Position);	// 新規Mission追加
            AutoWing_BaseMarkerAdd_X(ProjectList_Marker[0].MissionData, 0);					// 新規BaseMarker追加
        }
/// <summary>
/// 障碍点允许添加
/// </summary>
        private void ObstacleMarkerMessionAdd_X()
        {
            ProjectList_ObstacleInfo.Add(new Project());
            ProjectList_ObstacleInfo[0].WaypointData = new List<FlightPlanning.Waypoint>();
            ProjectList_ObstacleInfo[0].WaypointMarker = new List<GMapMarker>();

            MainMap.Markers.Add(ProjectList_ObstacleInfo[0].WaypointPath);
            ProjectList_ObstacleInfo[0].MissionData = MissionAdd_X(MainMap.Position);	// 新規Mission追加
            Obstacle_BaseMarkerAdd_X(ProjectList_ObstacleInfo[0].MissionData, 0);					// 新規BaseMarker追加
        }
        
        private void DistanceMarkerMessionAdd_X()
        {
            ProjectList_Distance.Add(new Project());
            ProjectList_Distance[0].WaypointData = new List<FlightPlanning.Waypoint>();
            ProjectList_Distance[0].WaypointMarker = new List<GMapMarker>();

            MainMap.Markers.Add(ProjectList_Distance[0].WaypointPath);
            ProjectList_Distance[0].MissionData = MissionAdd_X(MainMap.Position);	// 新規Mission追加
            Distance_BaseMarkerAdd_X(ProjectList_Distance[0].MissionData, 0);					// 新規BaseMarker追加
        }
        private void AreaChooseMarkerMessionAdd_X()
        {
            ProjectList_AreaChoose.Add(new Project());
            ProjectList_AreaChoose[0].WaypointData = new List<FlightPlanning.Waypoint>();
            ProjectList_AreaChoose[0].WaypointMarker = new List<GMapMarker>();

            MainMap.Markers.Add(ProjectList_AreaChoose[0].WaypointPath);
            ProjectList_AreaChoose[0].MissionData = MissionAdd_X(MainMap.Position);	// 新規Mission追加
            AreaChoose_BaseMarkerAdd_X(ProjectList_AreaChoose[0].MissionData, 0);					// 新規BaseMarker追加
        }
        private void AreaChoose_BaseMarkerAdd_X(Mission _mission, int _index)
        {
            // 选择清除
            if (ProjectList_AreaChoose.Count > 0)
            {
                for (int i = 0; i < (ProjectList_AreaChoose.Count - 1); i++)
                {
                    if (ProjectList_AreaChoose[i].BaseMarker != null)
                    {
                        ProjectList_AreaChoose[i].BaseMarker.Mode = -1;
                    }
                }
            }
            // 嵌入的地图上的参考点
            GMapMarker _baseMarker = new GMapMarker(new PointLatLng(_mission.Latitude, _mission.Longitude));
            {
                _baseMarker.Altitude = _mission.Altitude;
                _baseMarker.Azimuth = _mission.Rotation;
                _baseMarker.Speed = Properties.Settings.Default.Waypoint_Speed;
                _baseMarker.Shape = new BasePoint(this, _baseMarker, SettingData.DeviceMode, ProjectList_AreaChoose.Count, true);
                _baseMarker.Offset = new System.Windows.Point(-15, -15);
                _baseMarker.ZIndex = int.MaxValue;
                _baseMarker.Mode = 1;
            }
            ProjectList_AreaChoose[_index].BaseMarker = _baseMarker;

            // 嵌入BaseMarker在地图上
        //    MainMap.Markers.Add(ProjectList_AreaChoose[_index].BaseMarker);

            // 
            ProjectList_AreaChoose[_index].ProjectPath.Points.Add(new PointLatLng());
            ProjectList_AreaChoose[_index].ProjectPath.Points.Add(new PointLatLng());
            ProjectList_AreaChoose[_index].ProjectPath.LineBrush = Brushes.Red;
            MainMap.Markers.Add(ProjectList_AreaChoose[_index].ProjectPath);
        }
        private void Distance_BaseMarkerAdd_X(Mission _mission, int _index)
        {
            // 选择清除
            if (ProjectList_Distance.Count > 0)
            {
                for (int i = 0; i < (ProjectList_Distance.Count - 1); i++)
                {
                    if (ProjectList_Distance[i].BaseMarker != null)
                    {
                        ProjectList_Distance[i].BaseMarker.Mode = -1;
                    }
                }
            }
            // 嵌入的地图上的参考点
            GMapMarker _baseMarker = new GMapMarker(new PointLatLng(_mission.Latitude, _mission.Longitude));
            {
                _baseMarker.Altitude = _mission.Altitude;
                _baseMarker.Azimuth = _mission.Rotation;
                _baseMarker.Speed = Properties.Settings.Default.Waypoint_Speed;
                _baseMarker.Shape = new BasePoint(this, _baseMarker, SettingData.DeviceMode, ProjectList_Distance.Count, true);
                _baseMarker.Offset = new System.Windows.Point(-15, -15);
                _baseMarker.ZIndex = int.MaxValue;
                _baseMarker.Mode = 1;
            }
            ProjectList_Distance[_index].BaseMarker = _baseMarker;

            // 嵌入BaseMarker在地图上
            //          MainMap.Markers.Add(ProjectList_Marker[_index].BaseMarker);

            // 
            ProjectList_Distance[_index].ProjectPath.Points.Add(new PointLatLng());
            ProjectList_Distance[_index].ProjectPath.Points.Add(new PointLatLng());
            ProjectList_Distance[_index].ProjectPath.LineBrush = Brushes.Red;
            MainMap.Markers.Add(ProjectList_Distance[_index].ProjectPath);
        }

        private void AutoWing_BaseMarkerAdd_X(Mission _mission, int _index)
        {
            // 选择清除
            if (ProjectList_Marker.Count > 0)
            {
                for (int i = 0; i < (ProjectList_Marker.Count - 1); i++)
                {
                    if (ProjectList_Marker[i].BaseMarker != null)
                    {
                        ProjectList_Marker[i].BaseMarker.Mode = -1;
                    }
                }
            }
            // 嵌入的地图上的参考点
            GMapMarker _baseMarker = new GMapMarker(new PointLatLng(_mission.Latitude, _mission.Longitude));
            {
                _baseMarker.Altitude = _mission.Altitude;
                _baseMarker.Azimuth = _mission.Rotation;
                _baseMarker.Speed = Properties.Settings.Default.Waypoint_Speed;
                _baseMarker.Shape = new BasePoint(this, _baseMarker, SettingData.DeviceMode, ProjectList_Marker.Count, true);
                _baseMarker.Offset = new System.Windows.Point(-15, -15);
                _baseMarker.ZIndex = int.MaxValue;
                _baseMarker.Mode = 1;
            }
            ProjectList_Marker[_index].BaseMarker = _baseMarker;

            // 嵌入BaseMarker在地图上
  //          MainMap.Markers.Add(ProjectList_Marker[_index].BaseMarker);

            // 
            ProjectList_Marker[_index].ProjectPath.Points.Add(new PointLatLng());
            ProjectList_Marker[_index].ProjectPath.Points.Add(new PointLatLng());
            ProjectList_Marker[_index].ProjectPath.LineBrush = Brushes.Red;
            MainMap.Markers.Add(ProjectList_Marker[_index].ProjectPath);
        }

        private void Obstacle_BaseMarkerAdd_X(Mission _mission, int _index)
        {
            // 选择清除
            if (ProjectList_ObstacleInfo.Count > 0)
            {
                for (int i = 0; i < (ProjectList_ObstacleInfo.Count - 1); i++)
                {
                    if (ProjectList_ObstacleInfo[i].BaseMarker != null)
                    {
                        ProjectList_ObstacleInfo[i].BaseMarker.Mode = -1;
                    }
                }
            }
            // 嵌入的地图上的参考点
            GMapMarker _baseMarker = new GMapMarker(new PointLatLng(_mission.Latitude, _mission.Longitude));
            {
                _baseMarker.Altitude = _mission.Altitude;
                _baseMarker.Azimuth = _mission.Rotation;
                _baseMarker.Speed = Properties.Settings.Default.Waypoint_Speed;
                _baseMarker.Shape = new BasePoint(this, _baseMarker, SettingData.DeviceMode, ProjectList_ObstacleInfo.Count, true);
                _baseMarker.Offset = new System.Windows.Point(-15, -15);
                _baseMarker.ZIndex = int.MaxValue;
                _baseMarker.Mode = 1;
            }
            ProjectList_ObstacleInfo[_index].BaseMarker = _baseMarker;

            // 嵌入BaseMarker在地图上
            //          MainMap.Markers.Add(ProjectList_Marker[_index].BaseMarker);

            // 
            ProjectList_ObstacleInfo[_index].ProjectPath.Points.Add(new PointLatLng());
            ProjectList_ObstacleInfo[_index].ProjectPath.Points.Add(new PointLatLng());
            ProjectList_ObstacleInfo[_index].ProjectPath.LineBrush = Brushes.Red;
            MainMap.Markers.Add(ProjectList_ObstacleInfo[_index].ProjectPath);
        }

        /// <summary>
        /// Marker点的删除
        /// </summary>
        /// <param name="_index"></param>
        private void AutoWing_MissionDel_X(int _index)
        {
            if (ProjectList_Marker.Count > 0 && ProjectList_Marker.Count > _index)
            {
                MapToMarkerClear_X(ProjectList_Marker[_index].BaseMarker);
                for (int i = 0; i < ProjectList_Marker[_index].WaypointMarker.Count; i++)
                {
                    AutoWing_MapToMarkerClear_X(ProjectList_Marker[_index].WaypointMarker[i]);
                }
                ProjectList_Marker.RemoveAt(_index);
            }
      //      AutoWing_MarkerAllClear_X();
        }
/// <summary>
/// 障碍点的基准点删除
/// </summary>
/// <param name="_index"></param>
        private void Obstacle_MissionDel_X(int _index)
        {
            if (ProjectList_ObstacleInfo.Count > 0 && ProjectList_ObstacleInfo.Count > _index)
            {
                MapToMarkerClear_X(ProjectList_ObstacleInfo[_index].BaseMarker);
                for (int i = 0; i < ProjectList_ObstacleInfo[_index].WaypointMarker.Count; i++)
                {
                    AutoWing_MapToMarkerClear_X(ProjectList_ObstacleInfo[_index].WaypointMarker[i]);
                }
                ProjectList_ObstacleInfo.RemoveAt(_index);
            }
            //      AutoWing_MarkerAllClear_X();
        }


        private void Distance_MissionDel_X(int _index)
        {
            if (ProjectList_Distance.Count > 0 && ProjectList_Distance.Count > _index)
            {
                MapToMarkerClear_X(ProjectList_Distance[_index].BaseMarker);
                for (int i = 0; i < ProjectList_Distance[_index].WaypointMarker.Count; i++)
                {
                    AutoWing_MapToMarkerClear_X(ProjectList_Distance[_index].WaypointMarker[i]);
                }
                ProjectList_Distance.RemoveAt(_index);
            }
        }

        private void AreaChoose_MissionDel_X(int _index)
        {
            if (ProjectList_AreaChoose.Count > 0 && ProjectList_AreaChoose.Count > _index)
            {
                MapToMarkerClear_X(ProjectList_AreaChoose[_index].BaseMarker);
                for (int i = 0; i < ProjectList_AreaChoose[_index].WaypointMarker.Count; i++)
                {
                    AutoWing_MapToMarkerClear_X(ProjectList_AreaChoose[_index].WaypointMarker[i]);
                }
                ProjectList_AreaChoose.RemoveAt(_index);
            }
        }

        private void AutoWing_MapToMarkerClear_X(GMapMarker _marker)
        {
            // 削除标记
            var clear = MainMap.Markers.Where(p => p == _marker);

            if (clear != null)
            {
                // 削除
                for (int i = 0; i < clear.Count(); i++)
                {
                    MainMap.Markers.Remove(clear.ElementAt(i));
                    i--;
                }
            }
        }
        /// <summary>
        /// base点添加  修改:zhf
        /// </summary>
        private void MissionAndBaseMarkerAdd_X()
        {
            ProjectList_X.Add(new Project());										//添加项目
            BaseSelect = ProjectList_X.Count - 1;									//项目选择更换
            ProjectList_X[BaseSelect].WaypointData = new List<FlightPlanning.Waypoint>();
            ProjectList_X[BaseSelect].WaypointMarker = new List<GMapMarker>();
            ProjectList_X[BaseSelect].PathData = new List<FlightPlanning.Path>();
            MainMap.Markers.Add(ProjectList_X[BaseSelect].WaypointPath);
            ProjectList_X[BaseSelect].MissionData = MissionAdd_X(MainMap.Position);	// 新規Mission追加
            BaseMarkerAdd_X(ProjectList_X[BaseSelect].MissionData, BaseSelect);					// 新規BaseMarker追加
        }
        private Mission MissionAdd_X(PointLatLng _point)
        {
            // Mission管理
            var _mission = new Mission()
            {
                Name = "Mission" + (BaseSelect + 1).ToString(),
                enabled = true,
                Latitude = _point.Lat,
                Longitude = _point.Lng,
                Altitude = 0,   //
                Rotation = 0,   //
                ScaleX = 1.0,   //
                ScaleY = 1.0,   //
                ScaleZ = 1.0,   //
                AltitudeMode = "relativeToHome"
            };
            return _mission;
        }
        private void BaseMarkerAdd_X(Mission _mission, int _index)
        {
            // 选择清除
            if (ProjectList_X.Count > 0)
            {
                for (int i = 0; i < (ProjectList_X.Count - 1); i++)
                {
                    if (ProjectList_X[i].BaseMarker != null)
                    {
                        ProjectList_X[i].BaseMarker.Mode = -1;
                    }
                }
            }
            // 嵌入的地图上的参考点
            GMapMarker _baseMarker = new GMapMarker(new PointLatLng(_mission.Latitude, _mission.Longitude));
            {
                _baseMarker.Altitude = _mission.Altitude;
                _baseMarker.Azimuth = _mission.Rotation;
                _baseMarker.Speed = Properties.Settings.Default.Waypoint_Speed;
                _baseMarker.Shape = new BasePoint(this, _baseMarker, SettingData.DeviceMode, ProjectList_X.Count, true);
                _baseMarker.Offset = new System.Windows.Point(-15, -15);
                _baseMarker.ZIndex = int.MaxValue;
                _baseMarker.Mode = 1;
            }
            ProjectList_X[_index].BaseMarker = _baseMarker;

            // 嵌入BaseMarker在地图上
            MainMap.Markers.Add(ProjectList_X[_index].BaseMarker);

            // 
            ProjectList_X[_index].ProjectPath.Points.Add(new PointLatLng());
            ProjectList_X[_index].ProjectPath.Points.Add(new PointLatLng());
            ProjectList_X[_index].ProjectPath.LineBrush = Brushes.Red;
            MainMap.Markers.Add(ProjectList_X[_index].ProjectPath);
        }


        private void AutoWing_BaseMarkerAdd2_X(Mission _mission, int _index)
        {
            // 选择清除
            if (ProjectList_Marker.Count > 0)
            {
                for (int i = 0; i < (ProjectList_Marker.Count - 1); i++)
                {
                    if (ProjectList_Marker[i].BaseMarker != null)
                    {
                        ProjectList_Marker[i].BaseMarker.Mode = -1;
                    }
                }
            }
            // 嵌入的地图上的参考点
            GMapMarker _baseMarker = new GMapMarker(new PointLatLng(_mission.Latitude, _mission.Longitude));
            {
                _baseMarker.Altitude = _mission.Altitude;
                _baseMarker.Azimuth = _mission.Rotation;
                _baseMarker.Speed = Properties.Settings.Default.Waypoint_Speed;
                _baseMarker.Shape = new BasePoint(this, _baseMarker, SettingData.DeviceMode, ProjectList_X.Count, true);
                _baseMarker.Offset = new System.Windows.Point(-15, -15);
                _baseMarker.ZIndex = int.MaxValue;
                _baseMarker.Mode = 1;
            }
            ProjectList_Marker[_index].BaseMarker = _baseMarker;

            // 嵌入BaseMarker在地图上
   //         MainMap.Markers.Add(ProjectList_X[_index].BaseMarker);
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            try
            {
                if (ProjectList_X.Count > 0)
                {
                    Lock_Marker_Flag = false;
                    MissionDel_X(BaseSelect);
                    MainMonitorClear();
                    PointCount = 0;
                    WayPoint_NumS = 0;
                    DrawTrack_Count = 0;
                    m_make_click = 0;
                    fanganshengcheng.Content = "方案生成";
                    Work_Record.Content = "";
                }
            }
            catch
            {

            }
        }
        /// <summary>
        /// /清除基准点 修改：zhf
        /// </summary>
        /// <param name="_index"></param>
        private void MissionDel_X(int _index)
        {
            if (ProjectList_X.Count > 0 && ProjectList_X.Count > _index)
            {
                MapToMarkerClear_X(ProjectList_X[_index].BaseMarker);
                for (int i = 0; i < ProjectList_X[_index].WaypointMarker.Count; i++)
                {
                    MapToMarkerClear_X(ProjectList_X[_index].WaypointMarker[i]);
                }
                ProjectList_X[_index].WaypointPath.Points.Clear();
                MapToMarkerClear_X(ProjectList_X[_index].WaypointPath);
                ProjectList_X.RemoveAt(_index);

                // MissionView更新
                BaseSelect = 0;
                for (int i = 0; i < ProjectList_X.Count; i++)
                {
                    ProjectList_X[i].MissionData.Name = "Mission" + (i + 1).ToString();
                }
                WaypointValueChanged_X(BaseSelect);
            }
          //  MarkerAllClear_X();
        }
        /// <summary>
        /// /删除指定标志 修改:zhf
        /// </summary>
        /// <param name="_marker"></param>
        private void MapToMarkerClear_X(GMapMarker _marker)
        {
            // 削除标记
            var clear = MainMap.Markers.Where(p => p == _marker);

            if (clear != null)
            {
                // 削除
                for (int i = 0; i < clear.Count(); i++)
                {
                    MainMap.Markers.Remove(clear.ElementAt(i));
                    i--;
                }
            }
        }
        private void WaypointValueChanged_X(int _index)
        {
            double _dis = 0;
            double _time = 0;
            if (ProjectList_X.Count > _index)
            {
                int i = 0;
                foreach (var _waypoint in ProjectList_X[_index].WaypointData)
                {
                    if (i != 0 && i < ProjectList_X[_index].WaypointData.Count)
                    {
                        #region 推算飞行距离和时间
                        // 距離算出
                        var _sdis = Math.Round(
                            MainMap.MapProvider.Projection.GetDistance(
                            new PointLatLng(ProjectList_X[_index].WaypointMarker[i - 1].Position.Lat, ProjectList_X[_index].WaypointMarker[i - 1].Position.Lng),			// 1Point
                            new PointLatLng(ProjectList_X[_index].WaypointMarker[i].Position.Lat, ProjectList_X[_index].WaypointMarker[i].Position.Lng)        // 2Point
                            ), 4, MidpointRounding.AwayFromZero);
                        _sdis *= 1000;    // km -> m

                        double _h = Math.Abs(ProjectList_X[_index].WaypointMarker[i].Altitude - ProjectList_X[_index].WaypointMarker[i - 1].Altitude);
                        _sdis = Math.Sqrt((_sdis * _sdis) + (_h * _h));
                        _dis += _sdis;

                        double _t = 0;
                        for (int k = 1; k <= _sdis; k++)
                        {
                            double _s = k * 0.2;
                            if (ProjectList_X[_index].WaypointMarker[i].Speed > _s)
                            {
                                _t += _s;
                            }
                            else
                            {
                                _t += ProjectList_X[_index].WaypointMarker[i].Speed;
                            }
                        }
                        double _stime = _t;
                        //var _stime = _sdis / (ProjectList[_index].WaypointData[i].Speed);	// [m/s]
                        _time += _stime + ProjectList_X[_index].WaypointData[i].Wait;

                        #endregion
                    }
                    i++;
                }
                //int millisec = Environment.TickCount; // 毫秒単位
                int _sec = (int)Math.Truncate(_time);
                //int _millisec = (int)(_time % 1000.0);
                //var _ts = new TimeSpan(0, 0, 0, _sec, _millisec);
                var _ts = new TimeSpan(0, 0, 0, _sec);
            }
        }

        private void AutoWing_MarkerAllClear_X()
        {
            try
            {
                if (ProjectList_Marker.Count > 0)
                {
                    MapToMarkerClear_X(ProjectList_Marker[0].BaseMarker);
                    for (int i = 0; i < ProjectList_Marker[0].WaypointMarker.Count; i++)
                    {
                        MapToMarkerClear_X(ProjectList_Marker[0].WaypointMarker[i]);
                    }
                    MapToMarkerClear_X(ProjectList_Marker[0].WaypointPath);
                }
                UAVMarker.Clear();
                // 显示连接时无人机标志
                if (Client.Connected)
                {
                    // 当前的经度和纬度/方位UAVmarker
                    UAVMarker = new GMapMarker(new PointLatLng());
                    {
                        UAVMarker.Shape = new Position(UAVMarker);
                        UAVMarker.Offset = new System.Windows.Point(-15, -25);
                        UAVMarker.ZIndex = int.MaxValue;
                        MainMap.Markers.Add(UAVMarker);
                    }
                }
            }
            catch
            {

            }
        }
        private void MarkerAllClear_X()
        {
            try
            {
                if (ProjectList_X.Count > 0)
                {
                    MapToMarkerClear_X(ProjectList_X[0].BaseMarker);
                    for (int i = 0; i < ProjectList_X[0].WaypointMarker.Count; i++)
                    {
                        MapToMarkerClear_X(ProjectList_X[0].WaypointMarker[i]);
                    }
                //    ProjectList_X[0].WaypointPath.Points.Clear();
                    MapToMarkerClear_X(ProjectList_X[0].WaypointPath);
                //    ProjectList_X.RemoveAt(0);
                }
                UAVMarker.Clear();
      //          ProjectList_X.Clear();
               // MainMap.Markers.Clear();

       //         PointCount = 0;
                // 显示连接时无人机标志
                if (Client.Connected)
                {
                    // 当前的经度和纬度/方位UAVmarker
                    UAVMarker = new GMapMarker(new PointLatLng());
                    {
                        UAVMarker.Shape = new Position(UAVMarker);
                        UAVMarker.Offset = new System.Windows.Point(-15, -25);
                        UAVMarker.ZIndex = int.MaxValue;
                        MainMap.Markers.Add(UAVMarker);
                    }
                }
            }
            catch
            {

            }
        }
        private void MainMap_MouseMove_X(object sender, System.Windows.Input.MouseEventArgs e)
        {
            try
            {
                if ((e.LeftButton == MouseButtonState.Pressed)/* && (SettingData.DeviceMode == true)*/)
                {
                    MainMapMove(e.GetPosition(MainMap));
                }
            }
            catch
            {

            }
        }
        private bool MarkerMove = false;
        private bool BaseMarkerMove = false;
        private void MainMapMove(System.Windows.Point _p)
        {
            if (ProjectList_X.Count > 0)
            {
                if (Constants.Style_Change_HangPaiAndZhiBao_Flag==0)
                {
                    #region
                    if (ProjectList_X[BaseSelect].WaypointMarker.Count > 0)
                    {
                        PointLatLng _point = MainMap.FromLocalToLatLng((int)_p.X, (int)_p.Y);
                        var _maker = ProjectList_X[BaseSelect].WaypointMarker.Where(p => p.Position == _point);
                        var i = ProjectList_X[BaseSelect].WaypointMarker.Select(p => p.Position == _point);
                    }
                    #endregion

                    #region
                    // WaypointSelect.Clear();
                    for (int i = 0; i < ProjectList_Marker[BaseSelect].WaypointMarker.Count; i++)
                    {
                        // 現在是当前鼠标（触摸）操作
                        if (ProjectList_Marker[0].WaypointMarker[i].IsMouseOver == true)
                        {
                            if (ProjectList_Marker[0].WaypointMarker.Count > 2)
                            {
                                MarkerMove = true;//移動

                                /////////////清除之前的距离marker
                                if (ProjectList_Distance.Count > 0)
                                {
                                    MapToMarkerClear_X(ProjectList_Distance[0].BaseMarker);
                                    for (int j = 0; j < ProjectList_Distance[0].WaypointMarker.Count; j++)
                                    {
                                        MapToMarkerClear_X(ProjectList_Distance[0].WaypointMarker[j]);
                                    }
                                    MapToMarkerClear_X(ProjectList_Distance[0].WaypointPath);
                                }
                                DistanceMarkerMessionAdd_X();//这边是距离marker基准点



                                ProjectList_Marker[0].WaypointData[i].Latitude = ProjectList_Marker[0].WaypointMarker[i].Position.Lat;//首先保存所有的经纬度区域点
                                ProjectList_Marker[0].WaypointData[i].Longitude = ProjectList_Marker[0].WaypointMarker[i].Position.Lng;
                                Make_MultiPenSa_Plan();


                                for (int ii = 1; ii < ProjectList_Marker[0].WaypointData.Count; ii++)
                                {

                                    PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                                    //////////////////////////////////计算两点之间的距离////////////////////////////////////////////////////////////
                                    Extern_TwoPointDis = Land_Distance(ProjectList_Marker[0].WaypointData[ii - 1].Latitude, ProjectList_Marker[0].WaypointData[ii - 1].Longitude, ProjectList_Marker[0].WaypointData[ii].Latitude, ProjectList_Marker[0].WaypointData[ii].Longitude) * 1000.0;
                                    Waypoint.Lat = (ProjectList_Marker[0].WaypointData[ii - 1].Latitude + ProjectList_Marker[0].WaypointData[ii].Latitude) / 2.0;
                                    Waypoint.Lng = (ProjectList_Marker[0].WaypointData[ii - 1].Longitude + ProjectList_Marker[0].WaypointData[ii].Longitude) / 2.0;
                                    int _id = ProjectList_Distance[0].WaypointData.Count + 1;
                                    Distance_WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                                    Distance_WaypointMarkerAdd_X(ProjectList_Distance[0].WaypointData[_id - 1], _id);	// WaypointMarker追加
                                }

                                ///////////////针对超过两个点的时候要把第一个点和最后一个点连接
                                if (ProjectList_Marker[0].WaypointData.Count > 2)
                                {
                                    PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                                    Extern_TwoPointDis = Land_Distance(ProjectList_Marker[0].WaypointData[0].Latitude, ProjectList_Marker[0].WaypointData[0].Longitude, ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Latitude, ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Longitude) * 1000.0;
                                    Waypoint.Lat = (ProjectList_Marker[0].WaypointData[0].Latitude + ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Latitude) / 2.0;
                                    Waypoint.Lng = (ProjectList_Marker[0].WaypointData[0].Longitude + ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Longitude) / 2.0;
                                    int _id = ProjectList_Distance[0].WaypointData.Count + 1;
                                    Distance_WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                                    Distance_WaypointMarkerAdd_X(ProjectList_Distance[0].WaypointData[_id - 1], _id);	// WaypointMarker追加
                                }



                            }
                            else
                            {
                                if (ProjectList_X[BaseSelect].WaypointMarker.Count > 0)
                                {
                                    MarkerMove = true;//移動

                                    /////////////清除之前的距离marker
                                    if (ProjectList_Distance.Count > 0)
                                    {
                                        MapToMarkerClear_X(ProjectList_Distance[0].BaseMarker);
                                        for (int j = 0; j < ProjectList_Distance[0].WaypointMarker.Count; j++)
                                        {
                                            MapToMarkerClear_X(ProjectList_Distance[0].WaypointMarker[j]);
                                        }
                                        MapToMarkerClear_X(ProjectList_Distance[0].WaypointPath);
                                    }
                                    DistanceMarkerMessionAdd_X();//这边是距离marker基准点

                                    ProjectList_Marker[0].WaypointData[i].Latitude = ProjectList_Marker[0].WaypointMarker[i].Position.Lat;//首先保存所有的经纬度区域点
                                    ProjectList_Marker[0].WaypointData[i].Longitude = ProjectList_Marker[0].WaypointMarker[i].Position.Lng;
                                    ProjectList_X[BaseSelect].WaypointPath.Points[i] = ProjectList_Marker[BaseSelect].WaypointMarker[i].Position;        //　Waypoint位置和Path位置的反映
                                    ProjectList_X[BaseSelect].WaypointPath.RegenerateShape(MainMap);												//　地图上显示Path反映


                                    PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                                    //////////////////////////////////计算两点之间的距离////////////////////////////////////////////////////////////
                                    Extern_TwoPointDis = Land_Distance(ProjectList_Marker[0].WaypointData[0].Latitude, ProjectList_Marker[0].WaypointData[0].Longitude, ProjectList_Marker[0].WaypointData[1].Latitude, ProjectList_Marker[0].WaypointData[1].Longitude) * 1000.0;
                                    Waypoint.Lat = (ProjectList_Marker[0].WaypointData[0].Latitude + ProjectList_Marker[0].WaypointData[1].Latitude) / 2.0;
                                    Waypoint.Lng = (ProjectList_Marker[0].WaypointData[0].Longitude + ProjectList_Marker[0].WaypointData[1].Longitude) / 2.0;
                                    int _id = ProjectList_Distance[0].WaypointData.Count + 1;
                                    Distance_WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                                    Distance_WaypointMarkerAdd_X(ProjectList_Distance[0].WaypointData[_id - 1], _id);	// WaypointMarker追加
                                }
                            }
                        }
                    }
                    #endregion
                }
                else
                {

                    #region
                    if (ProjectList_X[BaseSelect].WaypointMarker.Count > 0)
                    {
                        PointLatLng _point = MainMap.FromLocalToLatLng((int)_p.X, (int)_p.Y);
                        var _maker = ProjectList_X[BaseSelect].WaypointMarker.Where(p => p.Position == _point);
                        var i = ProjectList_X[BaseSelect].WaypointMarker.Select(p => p.Position == _point);
                    }
                    if (ProjectList_X[BaseSelect].BaseMarker.IsMouseOver == true)
                    {
                        MarkerMove = true;//移動
                        // BaseMarker移動
                        ProjectList_X[BaseSelect].OldBasePoint = BaseMove_X(ProjectList_X[BaseSelect].BaseMarker, ProjectList_X[BaseSelect].OldBasePoint);
                        BaseMarkerMove = true;
                        BasePointValueChanged_X(ProjectList_X[BaseSelect].BaseMarker);

                        // 选择的连接任务
                        if (ProjectList_X.Count > 1)
                        {
                            if (BaseSelect != -1)
                            {
                                int _connectID = ProjectList_X[BaseSelect].MissionData.ConnectID;
                                int _accessID = ProjectList_X[BaseSelect].MissionData.AccessID;

                                if (_connectID != 0)
                                {
                                    _connectID = ProjectList_X[BaseSelect].MissionData.ConnectID - 1;
                                    var _waypoint1 = ProjectList_X[_connectID].WaypointData.Last();
                                    var _waypoint2 = ProjectList_X[BaseSelect].WaypointData.First();
                                    ProjectList_X[_connectID].ProjectPath.Points[0] = new PointLatLng(_waypoint1.Latitude, _waypoint1.Longitude);
                                    ProjectList_X[_connectID].ProjectPath.Points[1] = new PointLatLng(_waypoint2.Latitude, _waypoint2.Longitude);
                                    ProjectList_X[_connectID].ProjectPath.RegenerateShape(MainMap);
                                }
                                if (_accessID != 0)
                                {
                                    var _waypoint1 = ProjectList_X[BaseSelect].WaypointData.Last();
                                    //    var _waypoint2 = ProjectList_X[missionConnect.SelectedIndex].WaypointData.First();
                                    //    ProjectList[missionSelect.SelectedIndex].ProjectPath.Points[0] = new PointLatLng(_waypoint1.Latitude, _waypoint1.Longitude);
                                    //    ProjectList[missionSelect.SelectedIndex].ProjectPath.Points[1] = new PointLatLng(_waypoint2.Latitude, _waypoint2.Longitude);
                                    //    ProjectList[missionSelect.SelectedIndex].ProjectPath.RegenerateShape(MainMap);
                                }
                            }
                        }
                    }
                    #endregion

                    #region
                    // WaypointSelect.Clear();
                    for (int i = 0; i < ProjectList_X[BaseSelect].WaypointMarker.Count; i++)
                    {
                        // 現在是当前鼠标（触摸）操作
                        if (ProjectList_X[BaseSelect].WaypointMarker[i].IsMouseOver == true)
                        {
                            // Waypoint与位置变化相关的路径变化
                            if (ProjectList_X[BaseSelect].WaypointMarker.Count > 0)
                            {
                                MarkerMove = true;//移動
                                ProjectList_X[BaseSelect].WaypointPath.Points[i] = ProjectList_X[BaseSelect].WaypointMarker[i].Position;        //　Waypoint位置和Path位置的反映
                                ProjectList_X[BaseSelect].WaypointPath.RegenerateShape(MainMap);												//　地图上显示Path反映


                                WaypointWindow Child = (WaypointWindow)Container.Children[0].Content;
                                Child.WaypointUpdate = false;           //Waypoint释放
                                Child.isEnable = true;
                                /////////////////////////////第二处航拍需要修改的地方/////////////////////////////////
                                Child.Waypoint.Lat = ProjectList_X[BaseSelect].WaypointMarker[i].Position.Lat;//纬度
                                Child.Waypoint.Lon = ProjectList_X[BaseSelect].WaypointMarker[i].Position.Lng;//经度
                                if (Constants.Angle_Auto_Make_Flag==1)
                                {
                                    if (ProjectList_X.Count > 0)
                                    {
                                        if (ProjectList_X[BaseSelect].WaypointMarker.Count > 1)
                                        {
                                            for (int j = 0; j < (ProjectList_X[BaseSelect].WaypointMarker.Count-1);j++ )
                                            {
                                                First_Moment_lat = ProjectList_X[0].WaypointMarker[(j)].Position.Lat;
                                                First_Moment_lon = ProjectList_X[0].WaypointMarker[(j)].Position.Lng;
                                                Second_Moment_lat = ProjectList_X[0].WaypointMarker[(j + 1)].Position.Lat;
                                                Second_Moment_lon = ProjectList_X[0].WaypointMarker[(j + 1)].Position.Lng;
                                                WayPoint_Yaw[j] = Function_TwoPoint_Angle(First_Moment_lat, First_Moment_lon, Second_Moment_lat, Second_Moment_lon);
                                            }
     
                                        }
                                    }
                                }
                                Child.Waypoint.mmWayPoint_YawEdit = WayPoint_Yaw[i];

                                if (Lock_Marker_Flag == true)
                                {
                                    //     Record_Info_MoveShow(ProjectList_X[BaseSelect].WaypointMarker.Count);
                                }

                            }

                            if (Keyboard.Modifiers == ModifierKeys.Control)
                            {
                                // TODO：在航点更改选择性高度（政策呢？要高度变化的同时按下或Ctrl只有在高度已经改变）
                                ProjectList_X[BaseSelect].WaypointMarker[i].Altitude = 0;// Altitude.WaypointAlt;
                            }
                            if (ProjectList_X.Count > 1)
                            {
                                if (BaseSelect != -1)
                                {
                                    int _connectID = ProjectList_X[BaseSelect].MissionData.ConnectID;
                                    int _accessID = ProjectList_X[BaseSelect].MissionData.AccessID;
                                    if (_connectID != 0)
                                    {
                                        _connectID = ProjectList_X[BaseSelect].MissionData.ConnectID - 1;
                                        if (i == 0)
                                        {
                                            var _waypoint1 = ProjectList_X[_connectID].WaypointData.Last();
                                            var _waypoint2 = ProjectList_X[BaseSelect].WaypointData.First();
                                            ProjectList_X[_connectID].ProjectPath.Points[0] = new PointLatLng(_waypoint1.Latitude, _waypoint1.Longitude);
                                            ProjectList_X[_connectID].ProjectPath.Points[1] = ProjectList_X[BaseSelect].WaypointMarker[i].Position;
                                            ProjectList_X[_connectID].ProjectPath.RegenerateShape(MainMap);
                                        }
                                    }
                                    if (_accessID != 0)
                                    {
                                        if (i == (ProjectList_X[BaseSelect].WaypointMarker.Count - 1))
                                        {
                                            var _waypoint1 = ProjectList_X[BaseSelect].WaypointData.Last();
                                            //          var _waypoint2 = ProjectList_X[missionConnect.SelectedIndex].WaypointData.First();
                                            //          ProjectList_X[BaseSelect].ProjectPath.Points[0] = ProjectList_X[BaseSelect].WaypointMarker[i].Position;
                                            //          ProjectList_X[BaseSelect].ProjectPath.Points[1] = new PointLatLng(_waypoint2.Latitude, _waypoint2.Longitude);
                                            //         ProjectList_X[BaseSelect].ProjectPath.RegenerateShape(MainMap);
                                        }

                                    }
                                }
                            }

                        }
                    }
                    #endregion
                }

            }
        }
        // 参考点的移动（航点/路径特派团整个运动）
        private PointLatLng BaseMove_X(GMapMarker _marker, PointLatLng _old)
        {
            PointLatLng _new = new PointLatLng();
            _new = _marker.Position;
            PointLatLng OriginMeter = FlightPlanXML.LatLngPerMeter(_marker.Position);
            // 水平面的変換
            double _ang = ProjectList_X[BaseSelect].MissionData.Rotation * Math.PI / 180;
            double c = Math.Cos(_ang);
            double s = Math.Sin(_ang);
            double sx = ProjectList_X[BaseSelect].MissionData.ScaleX;
            double sy = ProjectList_X[BaseSelect].MissionData.ScaleY;
            double T11 = c * sx;
            double T12 = -s * sy;
            double T21 = s * sx;
            double T22 = c * sy;
            // Waypoint全移動
            int i = 0;
            foreach (var _waypoint in ProjectList_X[BaseSelect].WaypointData)
            {
                double xx = T11 * (_waypoint.x) + T12 * (_waypoint.y);
                double yy = T21 * (_waypoint.x) + T22 * (_waypoint.y);
                _waypoint.Latitude = ProjectList_X[BaseSelect].MissionData.Latitude + xx / OriginMeter.Lat;
                _waypoint.Longitude = ProjectList_X[BaseSelect].MissionData.Longitude + yy / OriginMeter.Lng;
                ProjectList_X[BaseSelect].WaypointMarker[i].Position = new PointLatLng(_waypoint.Latitude, _waypoint.Longitude);
                ProjectList_X[BaseSelect].WaypointMarker[i].Azimuth = ProjectList_X[BaseSelect].WaypointData[i].Heading + ProjectList_X[BaseSelect].MissionData.Rotation;
                ProjectList_X[BaseSelect].WaypointPath.Points[i] = ProjectList_X[BaseSelect].WaypointMarker[i].Position;
                i++;
            }
            //　地图上Path反映
            ProjectList_X[BaseSelect].WaypointPath.RegenerateShape(MainMap);
            return _new;
        }


        // 基准点的数据更新
        private void BasePointValueChanged_X(GMapMarker _marker)
        {
            var _mission = new Mission()
            {
                Name = ProjectList_X[BaseSelect].MissionData.Name,
                enabled = true,
                Latitude = _marker.Position.Lat,
                Longitude = _marker.Position.Lng,
                Altitude = _marker.Altitude,   //
                Rotation = _marker.Azimuth,   //
                ScaleX = ProjectList_X[BaseSelect].MissionData.ScaleX,   //
                ScaleY = ProjectList_X[BaseSelect].MissionData.ScaleY,   //
                ScaleZ = ProjectList_X[BaseSelect].MissionData.ScaleZ,   //
                AltitudeMode = ProjectList_X[BaseSelect].MissionData.AltitudeMode,
                AccessID = ProjectList_X[BaseSelect].MissionData.AccessID,
                ConnectID = ProjectList_X[BaseSelect].MissionData.ConnectID
            };
            ProjectList_X[BaseSelect].MissionData = _mission;                      //管理类
            if (!MarkerMove) BasePointViewUpdata(BaseSelect);
        }
        private void BasePointViewUpdata(int _index)
        {
            //    if (ProjectList.Count > _index)
            {
                //        missionSelect.SelectedIndex = _index;
                //        missionName.Text = ProjectList[_index].MissionData.Name;
                //        missonEnabled.IsChecked = ProjectList[_index].MissionData.enabled;
                //        LatValue.Value = ProjectList[_index].MissionData.Latitude;
                ///        LonValue.Value = ProjectList[_index].MissionData.Longitude;
                //       AltValue.Value = ProjectList[_index].MissionData.Altitude;
                //      RotValue.Value = ProjectList[_index].MissionData.Rotation;

                //       XValue.Value = ProjectList[_index].MissionData.ScaleX;
                //       YValue.Value = ProjectList[_index].MissionData.ScaleY;
                //       ZValue.Value = ProjectList[_index].MissionData.ScaleZ;

                //       AltitudeMode.SelectedIndex = 0;

                //       missionConnect.SelectedIndex = ProjectList[_index].MissionData.AccessID - 1;
            }
        }
        private void MainMap_MouseDown_X(object sender, MouseButtonEventArgs e)
        {
            try
            {
                Constants.Turn_Lock_flag = 1;//按下之后将属性界面的锁定
                MainMapDown_X();
            }
            catch
            {

            }
        }
        private GPoint MainMapDown_X()
        {
            GPoint _p = new GPoint();
            try
            {
                if (Constants.Style_Change_HangPaiAndZhiBao_Flag==0)
                {
                    if (Keyboard.Modifiers != ModifierKeys.Control)
                    {
                        WaypointSelect_X.Clear();
                        AreaWaypointSelect_X.Clear();
                    }

                    // TODO
                    // 搜索较早选择
                    // 然后调整未被选中的


                    if (ProjectList_Marker.Count > 0)
                    {
                        int k = 0;
                        foreach (var _project in ProjectList_Marker)
                        {
                            // Waypoint
                            foreach (GMapMarker _marker in _project.WaypointMarker)
                            {
                                if (_marker.IsMouseOver)							//Waypoint-MouseOver
                                {
                                    WaypointSelect_X.Add(_marker.ID);					//选择航点
                                    BaseSelect = k;									//切替
                                    ProjectList_X[k].BaseMarker.Mode = 1;
                                    // MissionView
                                    BasePointViewUpdata(BaseSelect);
                                    ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));// ProjectRecord追加
                                    _p = MainMap.FromLatLngToLocal(_project.BaseMarker.Position);
                                    break;
                                }
                            }
                            k++;
                        }
                    }

                    //////////////////////////////////////////选择区域点//////////////////////////////////////AreaWaypointSelect_X
                    if (ProjectList_AreaChoose.Count > 0)
                    {
                        int k = 0;
                        foreach (var _project in ProjectList_AreaChoose)
                        {
                            // Waypoint
                            foreach (GMapMarker _marker in _project.WaypointMarker)
                            {
                                if (_marker.IsMouseOver)							//Waypoint-MouseOver
                                {
                                    AreaWaypointSelect_X.Add(_marker.ID);					//选择航点
                                    break;
                                }
                            }
                            k++;
                        }
                    }





                    if (ProjectList_X.Count > 0)
                    {
                        int k = 0;
                        foreach (var _project in ProjectList_X)
                        {
                            if (_project.BaseMarker.IsMouseOver)					//BaseMarker-MouseOver
                            {
                                BaseSelect = k;										//切替
                                ProjectList_X[k].BaseMarker.Mode = 1;

                                // MissionView
                                BasePointViewUpdata(BaseSelect);

                                WaypointValueChanged_X(BaseSelect);

                                ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));	// ProjectRecord追加
                                _p = MainMap.FromLatLngToLocal(_project.BaseMarker.Position);
                                break;
                            }

                            // Waypoint
                            //foreach (GMapMarker _marker in _project.WaypointMarker)
                            //{
                            //    if (_marker.IsMouseOver)							//Waypoint-MouseOver
                            //    {
                            //        WaypointSelect_X.Add(_marker.ID);					//选择航点
                            //        BaseSelect = k;									//切替
                            //        ProjectList_X[k].BaseMarker.Mode = 1;

                            //        // MissionView
                            //        BasePointViewUpdata(BaseSelect);

                            //        ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));// ProjectRecord追加

                            //        _p = MainMap.FromLatLngToLocal(_project.BaseMarker.Position);
                            //        break;
                            //    }
                            //}
                            //k++;
                        }

                        k = 0;
                        foreach (var _project in ProjectList_Marker)
                        {
                            if (BaseSelect != k)
                            {
                                // Base
                                ProjectList_Marker[k].BaseMarker.Mode = -1;
                            }

                            // Waypoint
                            for (int i = 0; i < _project.WaypointMarker.Count; i++)
                            {
                                if (WaypointSelect_X.Count > 0 && WaypointSelect_X.Count <= 1)
                                {
                                    if (WaypointSelect_X[0] != _project.WaypointMarker[i].ID)
                                    {
                                        ProjectList_Marker[k].WaypointMarker[i].Mode = -1;
                                    }
                                    else
                                    {
                                    }
                                }
                            }
                            k++;
                        }


                        k = 0;
                        foreach (var _project in ProjectList_AreaChoose)
                        {
                            if (BaseSelect != k)
                            {
                                // Base
                                ProjectList_AreaChoose[k].BaseMarker.Mode = -1;
                            }

                            // Waypoint
                            for (int i = 0; i < _project.WaypointMarker.Count; i++)
                            {
                                if (AreaWaypointSelect_X.Count > 0 && AreaWaypointSelect_X.Count <= 1)
                                {
                                    if (AreaWaypointSelect_X[0] != _project.WaypointMarker[i].ID)
                                    {
                                        ProjectList_AreaChoose[k].WaypointMarker[i].Mode = -1;
                                    }
                                    else
                                    {
                                    }
                                }
                            }
                            k++;
                        }

                    }
                    /////////////////////////////////添加显示选中点的相关信息//////////////////////////////////////////////////////////////////////////////////////////
                    if (ProjectList_X.Count > 0)
                    {
                        if ((WaypointSelect_X[0] - 1) >= 0)
                        {

                            for (int i = 0; i < Container.Children.Count; i++)
                            {
                                if (OptionWindowEvent)
                                {
                                    break;
                                }
                                if (Container.Children[i].Content.GetType() == typeof(Plan_FineTuning))
                                {
                                    Constants.Start_ChooseID = (WaypointSelect_X[0] - 1);
                                    Constants.Start_ChooseLat = ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Latitude;
                                    Constants.Start_ChooseLng = ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Longitude;
                                    Plan_FineTuning Child1 = (Plan_FineTuning)Container.Children[i].Content;
                                    Child1.Function_ChooseStartLatAndLng_Show();
                                }
                                if (Container.Children[i].Content.GetType() == typeof(WaypointWindow))
                                {
                                    WaypointWindow Child = (WaypointWindow)Container.Children[0].Content;
                                    Child.WaypointUpdate = false;           //Waypoint释放
                                    Child.isEnable = true;
                                    ///////////////////////////第一处航拍需要修改的地方///////////////////////////////////////////////////
                                    Child.Waypoint.mmWayPoint_SetIndexEdit = WayPoint_SetIndex[(WaypointSelect_X[0] - 1)];//路点设置
                                    Child.Waypoint.mmWayPoint_KeepIndex1Edit = WayPoint_KeepIndex1[(WaypointSelect_X[0] - 1)];//保留位1
                                    Child.Waypoint.Lat = ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Latitude;//纬度
                                    Child.Waypoint.Lon = ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Longitude;//经度
                                    Child.Waypoint.mmWayPoint_HeightEdit = WayPoint_Height[(WaypointSelect_X[0] - 1)];//高度
                                    Child.Waypoint.mmWayPoint_YawEdit = WayPoint_Yaw[(WaypointSelect_X[0] - 1)];//航向
                                    Child.Waypoint.mmWayPoint_HengxiangSuduEdit = WayPoint_HengxiangSudu[(WaypointSelect_X[0] - 1)];//横向速度
                                    Child.Waypoint.mmWayPoint_ZongshangSuduEdit = WayPoint_ZongshangSudu[(WaypointSelect_X[0] - 1)];//向上速度
                                    Child.Waypoint.mmWayPoint_ZongxiaSuduEdit = WayPoint_ZongxiaSudu[(WaypointSelect_X[0] - 1)];//向下速度
                                    Child.Waypoint.mmWayPoint_HoverTimerEdit = WayPoint_HoverTimer[(WaypointSelect_X[0] - 1)];//悬停时间
                                    Child.Waypoint.mmWayPoint_KeepIndex2Edit = WayPoint_KeepIndex2[(WaypointSelect_X[0] - 1)];//保留位2






                                 //   Child.Waypoint.Alt = ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Height;
                                 //   Child.Waypoint.Yaw = ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Heading;
                                 //   Child.Waypoint.Speed = ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Speed;
                                }
                            }
                        }
                    }
                }
                else
                {

                    if (Keyboard.Modifiers != ModifierKeys.Control)
                    {
                        WaypointSelect_X.Clear();
                    }

                    // TODO
                    // 搜索较早选择
                    // 然后调整未被选中的
                    if (ProjectList_X.Count > 0)
                    {
                        int k = 0;
                        foreach (var _project in ProjectList_X)
                        {
                            if (_project.BaseMarker.IsMouseOver)					//BaseMarker-MouseOver
                            {
                                BaseSelect = k;										//切替
                                ProjectList_X[k].BaseMarker.Mode = 1;

                                // MissionView
                                BasePointViewUpdata(BaseSelect);

                                WaypointValueChanged_X(BaseSelect);

                                ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));	// ProjectRecord追加
                                _p = MainMap.FromLatLngToLocal(_project.BaseMarker.Position);
                                break;
                            }

                            // Waypoint
                            foreach (GMapMarker _marker in _project.WaypointMarker)
                            {
                                if (_marker.IsMouseOver)							//Waypoint-MouseOver
                                {
                                    WaypointSelect_X.Add(_marker.ID);					//选择航点
                                    BaseSelect = k;									//切替
                                    ProjectList_X[k].BaseMarker.Mode = 1;

                                    // MissionView
                                    BasePointViewUpdata(BaseSelect);

                                    ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));// ProjectRecord追加

                                    _p = MainMap.FromLatLngToLocal(_project.BaseMarker.Position);
                                    break;
                                }
                            }
                            k++;
                        }

                        k = 0;
                        foreach (var _project in ProjectList_X)
                        {
                            if (BaseSelect != k)
                            {
                                // Base
                                ProjectList_X[k].BaseMarker.Mode = -1;
                            }

                            // Waypoint
                            for (int i = 0; i < _project.WaypointMarker.Count; i++)
                            {
                                if (WaypointSelect_X.Count > 0 && WaypointSelect_X.Count <= 1)
                                {
                                    if (WaypointSelect_X[0] != _project.WaypointMarker[i].ID)
                                    {
                                        ProjectList_X[k].WaypointMarker[i].Mode = -1;
                                    }
                                    else
                                    {
                                        // 高度栏显示切换
                                        //                      if (AltitudePropertyValue.AltitudeList.Count == _project.WaypointMarker.Count)
                                        //                      {
                                        //                          AltitudePropertyValue.AltitudeList[i] = _project.WaypointMarker[i].Altitude;
                                        //                      }
                                    }
                                }
                            }
                            k++;
                        }
                    }
                    /////////////////////////////////添加显示选中点的相关信息//////////////////////////////////////////////////////////////////////////////////////////
                    if (ProjectList_X.Count > 0)
                    {
                        if ((WaypointSelect_X[0] - 1) >= 0)
                        {
                            WaypointWindow Child = (WaypointWindow)Container.Children[0].Content;
                            Child.WaypointUpdate = false;           //Waypoint释放
                            Child.isEnable = true;
                            ///////////////////////////第三处航拍需要修改的地方///////////////////////////////////////////////////
                            //Child.Waypoint.Lat = ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Latitude;
                            //Child.Waypoint.Lon = ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Longitude;
                            //Child.Waypoint.Alt = ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Height;
                            //Child.Waypoint.Yaw = ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Heading;
                            //Child.Waypoint.Speed = ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Speed;
                            if (Constants.If_WaypointReAction_Flag==1)
                            {
                                for (int ii = 0; ii < 100; ii++)
                                {
                                    WayPoint_SetIndex[ii] = (WayPoint_SetIndex[ii] | 0x08);//如果一旦路点是否循环选择了循环，所有点都循环
                                }
                                Child.Function_Reset1();
                            }
                            else
                            {
                                for (int ii = 0; ii < 100; ii++)
                                {
                                    WayPoint_SetIndex[ii] = (WayPoint_SetIndex[ii] & 0xf7);//如果一旦路点是否循环选择了循环，所有点都循环
                                }
                                Child.Function_Reset();
                            }


                            if (Constants.If_Reback_Flag == 1)
                            {
                                for (int ii = 0; ii < 100; ii++)
                                {
                                    WayPoint_SetIndex[ii] = (WayPoint_SetIndex[ii] | 0x10);//如果一旦路点执行完返航就让所有点置1
                                }
                                Child.Function_Back1();
                            }
                            else
                            {
                                for (int ii = 0; ii < 100; ii++)
                                {
                                    WayPoint_SetIndex[ii] = (WayPoint_SetIndex[ii] & 0xEF);//如果一旦路点执行完不返航，所有点置0
                                }
                                Child.Function_Back();
                            }




                            Child.Waypoint.mmWayPoint_SetIndexEdit = WayPoint_SetIndex[(WaypointSelect_X[0] - 1)];//路点设置
                            Child.Waypoint.mmWayPoint_KeepIndex1Edit = WayPoint_KeepIndex1[(WaypointSelect_X[0] - 1)];//保留位1
                            Child.Waypoint.Lat = ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Latitude;//纬度
                            Child.Waypoint.Lon = ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Longitude;//经度
                            Child.Waypoint.mmWayPoint_HeightEdit = WayPoint_Height[(WaypointSelect_X[0] - 1)];//高度
                            Child.Waypoint.mmWayPoint_YawEdit = WayPoint_Yaw[(WaypointSelect_X[0] - 1)];//航向
                            Child.Waypoint.mmWayPoint_HengxiangSuduEdit = WayPoint_HengxiangSudu[(WaypointSelect_X[0] - 1)];//横向速度
                            Child.Waypoint.mmWayPoint_ZongshangSuduEdit = WayPoint_ZongshangSudu[(WaypointSelect_X[0] - 1)];//向上速度
                            Child.Waypoint.mmWayPoint_ZongxiaSuduEdit = WayPoint_ZongxiaSudu[(WaypointSelect_X[0] - 1)];//向下速度
                            Child.Waypoint.mmWayPoint_HoverTimerEdit = WayPoint_HoverTimer[(WaypointSelect_X[0] - 1)];//悬停时间
                            Child.Waypoint.mmWayPoint_KeepIndex2Edit = WayPoint_KeepIndex2[(WaypointSelect_X[0] - 1)];//保留位2
                        }
                    }
                }
 
            }
            catch
            {

            }
            return _p;
        }
        private void MainMap_MouseUp_X(object sender, MouseButtonEventArgs e)
        {
            try
            {
                Constants.Turn_Lock_flag = 0;//抬起之后将属性界面释放
                MainMapUp_X();
            }
            catch
            {

            }
        }
        private void MainMapUp_X()
        {
            // 功能区 - 地图集 - 经纬度显示更新
            //     LatText.Text = MainMap.Position.Lat.ToString();
            //     LngText.Text = MainMap.Position.Lng.ToString();
            if (ProjectList_X.Count < 1)
            {
                return;
            }
            // 更新
            if (ProjectList_X.Count > 0)
            {
                BasePointViewUpdata(BaseSelect);
                if (ProjectList_X[BaseSelect].WaypointMarker.Count > 0)
                {
                    // 水平面的变换
                    PointLatLng OriginMeter = FlightPlanXML.LatLngPerMeter(ProjectList_X[BaseSelect].BaseMarker.Position);
                    double _ang = ProjectList_X[BaseSelect].MissionData.Rotation * Math.PI / 180;
                    double c = Math.Cos(_ang);
                    double s = Math.Sin(_ang);
                    double sx = ProjectList_X[BaseSelect].MissionData.ScaleX;
                    double sy = ProjectList_X[BaseSelect].MissionData.ScaleY;
                    double T11 = c * sx;
                    double T12 = -s * sy;
                    double T21 = s * sx;
                    double T22 = c * sy;
                    double det = 1 / (T11 * T22 - T12 * T21);
                    T11 *= det;
                    T12 *= det;
                    T21 *= det;
                    T22 *= det;
                    // 选择多个Marka
                    for (int i = 0; i < ProjectList_X[BaseSelect].WaypointMarker.Count; i++)
                    {
                        if (Keyboard.Modifiers != ModifierKeys.Control)
                        {
                            if (WaypointSelect_X.Count > 0)
                            {
                                if (WaypointSelect_X[0] != ProjectList_X[BaseSelect].WaypointMarker[i].ID)
                                {
                                    ProjectList_X[BaseSelect].WaypointMarker[i].Mode = -1;
                                }
                            }
                            else
                            {
                                ProjectList_X[BaseSelect].WaypointMarker[i].Mode = -1;
                            }

                        }
                        // 属性更新
                        WaypointValueUpdata(ProjectList_X[BaseSelect].WaypointMarker[i], OriginMeter, T11, T12, T21, T22);
                    }
                    // Waypoint属性更新
                    if (WaypointSelect_X.Count > 0)
                    {
                        //       WaypointProperty.SelectedObject = null;
                        if (WaypointSelect_X.Count > 0)
                        {
                            //           WaypointProperty.SelectedObject = ProjectList[BaseSelect].WaypointData[WaypointSelect[0] - 1];    //プロパティ表示
                        }
                        else
                        {
                            //           WaypointProperty.SelectedObject = ProjectList_X[BaseSelect].WaypointData[0];    //プロパティ表示
                        }
                        // 
                        WaypointValueChanged_X(BaseSelect);
                    }

                    // 選択中Waypoint
                    if (WaypointSelect_X.Count > 0)
                    {
                        //           WaypointListView.SelectedIndex = WaypointSelect_X[0] - 1;
                    }
                }

            }
            MarkerMove = false;//移動
            BaseMarkerMove = false;
        }
        private void WaypointValueUpdata(GMapMarker _marker, PointLatLng _originMeter, double T11, double T12, double T21, double T22)
        {
            var _waypointList = new FlightPlanning.Waypoint();
            //_waypointList = (FlightPlanning.Waypoint)this.WaypointListView.Items[_marker.ID - 1];
            _waypointList = ProjectList_X[BaseSelect].WaypointData[_marker.ID - 1];

            if (_waypointList.ID == _marker.ID)
            {
                //System.Windows.Point _p = FlightPlanXML.MeterPerLatLng(ProjectList[BaseSelect].BaseMarker.Position, _marker.Position);
                _waypointList.Latitude = _marker.Position.Lat;
                _waypointList.Longitude = _marker.Position.Lng;
                if (!BaseMarkerMove)
                {
                    double xx = (_marker.Position.Lat - ProjectList_X[BaseSelect].BaseMarker.Position.Lat) * _originMeter.Lat;
                    double yy = (_marker.Position.Lng - ProjectList_X[BaseSelect].BaseMarker.Position.Lng) * _originMeter.Lng;

                    double _x = T22 * xx - T12 * yy;
                    double _y = -T21 * xx + T11 * yy;

                    _waypointList.x = Math.Round(_x, 3, MidpointRounding.AwayFromZero);
                    _waypointList.y = Math.Round(_y, 3, MidpointRounding.AwayFromZero);

                    _waypointList.Height = Math.Round(_marker.Altitude, 3, MidpointRounding.AwayFromZero);

                    double _diff = (_waypointList.Heading + ProjectList_X[BaseSelect].MissionData.Rotation) - _marker.Azimuth;

                    if ((_diff > 1) || (_diff < -1))
                    {
                        double _ang = _marker.Azimuth - ProjectList_X[BaseSelect].MissionData.Rotation;
                        _waypointList.Heading = Math.Round(_ang, 0, MidpointRounding.AwayFromZero);
                    }
                }
                // WaypointListView.Items[_marker.ID - 1] = _waypointList;    // リストビュー表示
                ProjectList_X[BaseSelect].WaypointData[_marker.ID - 1] = _waypointList;
            }
        }

        private void Button_Click_2(object sender, RoutedEventArgs e)
        {
            try
            {
                if (ProjectList_X.Count > 0)
                {
                    if (Constants.Style_Change_HangPaiAndZhiBao_Flag==0)
                    {
                        if (ProjectList_Marker[BaseSelect].WaypointData.Count > 0 && ProjectList_Marker[BaseSelect].WaypointData.Count < 4)//删除marker点和线
                        {
                            for (int i = 0; i < WaypointSelect_X.Count; i++)
                            {
                                // 指定航点的删除和对准调整
                                MarkerAllClear_X();
                                AutoWing_MarkerAllClear_X();
                                ProjectList_Marker[BaseSelect].WaypointData.RemoveAt(WaypointSelect_X[i] - 1);
                                ProjectList_Marker[BaseSelect].WaypointMarker.RemoveAt(WaypointSelect_X[i] - 1);
                                var _project = ProjectDeepCopy_X(ProjectList_Marker);
                                var _project2 = ProjectDeepCopy_X(ProjectList_Marker);
                                ProjectList_X.Clear();
                                ProjectList_Marker.Clear();
                                PointCount = 0;
                                ProjectList_X = ProjectDeepCopy_X(_project);
                                ProjectList_Marker = ProjectDeepCopy_X(_project2);
                                MarkerAllSet_X();											//　Project再設定
                                AutoWing_MarkerAllSet_X();											//　Project再設定
                            }
                            ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));			// ProjectRecord追加
                        }
                        if (ProjectList_Marker[BaseSelect].WaypointData.Count > 3)//删除marker点和线
                        {
                            for (int i = 0; i < WaypointSelect_X.Count; i++)
                            {
                                // 指定航点的删除和对准调整
                                AutoWing_MarkerAllClear_X();
                                ProjectList_Marker[BaseSelect].WaypointData.RemoveAt(WaypointSelect_X[i] - 1);
                                ProjectList_Marker[BaseSelect].WaypointMarker.RemoveAt(WaypointSelect_X[i] - 1);
                                var _project2 = ProjectDeepCopy_X(ProjectList_Marker);
                                ProjectList_Marker.Clear();
                                PointCount = 0;
                                ProjectList_Marker = ProjectDeepCopy_X(_project2);
                                AutoWing_MarkerAllSet_X();											//　Project再設定
                                if (ProjectList_Marker[0].WaypointData.Count > 2)
                                {
                                    Make_MultiPenSa_Plan();
                                }
                            }
                            ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));			// ProjectRecord追加
                        }
                        if (ProjectList_Marker[BaseSelect].WaypointData.Count > 1)
                        {
                            /////////////清除之前的距离marker
                            if (ProjectList_Distance.Count > 0)
                            {
                                MapToMarkerClear_X(ProjectList_Distance[0].BaseMarker);
                                for (int j = 0; j < ProjectList_Distance[0].WaypointMarker.Count; j++)
                                {
                                    MapToMarkerClear_X(ProjectList_Distance[0].WaypointMarker[j]);
                                }
                                MapToMarkerClear_X(ProjectList_Distance[0].WaypointPath);
                            }
                            DistanceMarkerMessionAdd_X();//这边是距离marker基准点

                            for (int ii = 1; ii < ProjectList_Marker[0].WaypointData.Count; ii++)
                            {

                                PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                                //////////////////////////////////计算两点之间的距离////////////////////////////////////////////////////////////
                                Extern_TwoPointDis = Land_Distance(ProjectList_Marker[0].WaypointData[ii - 1].Latitude, ProjectList_Marker[0].WaypointData[ii - 1].Longitude, ProjectList_Marker[0].WaypointData[ii].Latitude, ProjectList_Marker[0].WaypointData[ii].Longitude) * 1000.0;
                                Waypoint.Lat = (ProjectList_Marker[0].WaypointData[ii - 1].Latitude + ProjectList_Marker[0].WaypointData[ii].Latitude) / 2.0;
                                Waypoint.Lng = (ProjectList_Marker[0].WaypointData[ii - 1].Longitude + ProjectList_Marker[0].WaypointData[ii].Longitude) / 2.0;
                                int _id = ProjectList_Distance[0].WaypointData.Count + 1;
                                Distance_WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                                Distance_WaypointMarkerAdd_X(ProjectList_Distance[0].WaypointData[_id - 1], _id);	// WaypointMarker追加
                            }
                            ///////////////针对超过两个点的时候要把第一个点和最后一个点连接
                            if (ProjectList_Marker[0].WaypointData.Count > 2)
                            {
                                PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                                Extern_TwoPointDis = Land_Distance(ProjectList_Marker[0].WaypointData[0].Latitude, ProjectList_Marker[0].WaypointData[0].Longitude, ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Latitude, ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Longitude) * 1000.0;
                                Waypoint.Lat = (ProjectList_Marker[0].WaypointData[0].Latitude + ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Latitude) / 2.0;
                                Waypoint.Lng = (ProjectList_Marker[0].WaypointData[0].Longitude + ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Longitude) / 2.0;
                                int _id = ProjectList_Distance[0].WaypointData.Count + 1;
                                Distance_WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                                Distance_WaypointMarkerAdd_X(ProjectList_Distance[0].WaypointData[_id - 1], _id);	// WaypointMarker追加
                            }
                            if (ProjectList_Marker[BaseSelect].WaypointData.Count < 3)
                            {
                                Work_Record.Content = "";
                                AreaChoose_MissionDel_X(0);//这边是ABC区域marker基准点
                            }
                        }
                        else
                        {
                            /////////////清除之前的距离marker
                            if (ProjectList_Distance.Count > 0)
                            {
                                MapToMarkerClear_X(ProjectList_Distance[0].BaseMarker);
                                for (int j = 0; j < ProjectList_Distance[0].WaypointMarker.Count; j++)
                                {
                                    MapToMarkerClear_X(ProjectList_Distance[0].WaypointMarker[j]);
                                }
                                MapToMarkerClear_X(ProjectList_Distance[0].WaypointPath);
                            }
                            DistanceMarkerMessionAdd_X();//这边是距离marker基准点
                        }
                    }
                    else
                    {
                        if (ProjectList_X[BaseSelect].WaypointData.Count > 0)
                        {
                            for (int i = 0; i < WaypointSelect_X.Count; i++)
                            {
                                // 指定航点的删除和对准调整

                                ///////////////////////////////第五处航拍需要修改的地方///////////////////////////////
                                for (int j = 0; j < (ProjectList_X[BaseSelect].WaypointData.Count-WaypointSelect_X[0]); j++)
                                {
                                    WayPoint_SetIndex[(WaypointSelect_X[0] - 1+j)] = WayPoint_SetIndex[(WaypointSelect_X[0]+j)];//路点设置
                                    WayPoint_KeepIndex1[(WaypointSelect_X[0] - 1 + j)] = WayPoint_KeepIndex1[(WaypointSelect_X[0] + j)];//保留位1
                                    WayPoint_Height[(WaypointSelect_X[0] - 1 + j)] = WayPoint_Height[(WaypointSelect_X[0] + j)];//高度
                                    WayPoint_Yaw[(WaypointSelect_X[0] - 1 + j)] = WayPoint_Yaw[(WaypointSelect_X[0] + j)];//航向
                                    WayPoint_HengxiangSudu[(WaypointSelect_X[0] - 1 + j)] = WayPoint_HengxiangSudu[(WaypointSelect_X[0] + j)];//横向速度
                                    WayPoint_ZongshangSudu[(WaypointSelect_X[0] - 1 + j)] = WayPoint_ZongshangSudu[(WaypointSelect_X[0] + j)];//向上速度
                                    WayPoint_ZongxiaSudu[(WaypointSelect_X[0] - 1 + j)] = WayPoint_ZongxiaSudu[(WaypointSelect_X[0] + j)];//向下速度
                                    WayPoint_HoverTimer[(WaypointSelect_X[0] - 1 + j)] = WayPoint_HoverTimer[(WaypointSelect_X[0] + j)];//悬停时间
                                    WayPoint_KeepIndex2[(WaypointSelect_X[0] - 1 + j)] = WayPoint_KeepIndex2[(WaypointSelect_X[0] + j)];//保留位2
                                }
                                MarkerAllClear_X();
                                ProjectList_X[BaseSelect].WaypointData.RemoveAt(WaypointSelect_X[i] - 1);
                                ProjectList_X[BaseSelect].WaypointMarker.RemoveAt(WaypointSelect_X[i] - 1);
                                var _project = ProjectDeepCopy_X(ProjectList_X);
                                //        MarkerAllClear_X();
                                ProjectList_X.Clear();
                                PointCount = 0;
                                ProjectList_X = ProjectDeepCopy_X(_project);
                                MarkerAllSet_X();											//　Project再設定

                                //////////
                                if (Constants.Angle_Auto_Make_Flag==1)
                                {
                                    if (ProjectList_X[BaseSelect].WaypointMarker.Count > 1)
                                    {
                                        for (int j = 0; j < (ProjectList_X[BaseSelect].WaypointMarker.Count - 1); j++)
                                        {
                                            First_Moment_lat = ProjectList_X[0].WaypointMarker[(j)].Position.Lat;
                                            First_Moment_lon = ProjectList_X[0].WaypointMarker[(j)].Position.Lng;
                                            Second_Moment_lat = ProjectList_X[0].WaypointMarker[(j + 1)].Position.Lat;
                                            Second_Moment_lon = ProjectList_X[0].WaypointMarker[(j + 1)].Position.Lng;
                                            WayPoint_Yaw[j] = Function_TwoPoint_Angle(First_Moment_lat, First_Moment_lon, Second_Moment_lat, Second_Moment_lon);
                                        }

                                    }
                                }

                            }
                            ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));			// ProjectRecord追加
                        }
                    }
                    WaypointSelect_X.Clear();
                }
                if (WayPoint_NumS > 0)
                {
                    WayPoint_NumS--;
                }
            }
            catch
            {

            }
        }


        private void AutoWing_MarkerAllSet_X()
        {
            try
            {
                int k = 0;
                foreach (var _project in ProjectList_Marker)
                {
                    BaseSelect = k;
                    if (_project.MissionData.enabled)
                    {
                        AutoWing_BaseMarkerAdd2_X(_project.MissionData, BaseSelect);

                        //BasePointValueChanged(_project.BaseMarker);
                        int j = 1;
                        foreach (var _waypoint in _project.WaypointData)
                        {
                            _project.WaypointData[j - 1].ID = j;
                            AutoWing_WaypointMarkerAdd_X(_waypoint, j);
                            j++;
                        }
                    }
                    //     AltitudePropertyValue.AltitudeUpdate();
                    BasePointValueChanged_X(ProjectList_Marker[BaseSelect].BaseMarker);
                    BasePointViewUpdata(BaseSelect);
                    k++;
                }

                //     if (ProjectList.Count > 0)
                //     {
                // 使得切换到撤消（撤消）按钮可用
                //         UndoButton.IsEnabled = true;
                //     }
            }
            catch
            {

            }
        }

        private void MarkerAllSet_X()
        {
            try
            {
                int k = 0;
                foreach (var _project in ProjectList_X)
                {
                    BaseSelect = k;
                    if (_project.MissionData.enabled)
                    {
                        BaseMarkerAdd_X(_project.MissionData, BaseSelect);
                        MainMap.Markers.Add(ProjectList_X[BaseSelect].WaypointPath);

                        //BasePointValueChanged(_project.BaseMarker);
                        int j = 1;
                        foreach (var _waypoint in _project.WaypointData)
                        {
                            _project.WaypointData[j - 1].ID = j;
                            WaypointMarkerAdd_X(_waypoint, j);
                            WaypointPathAdd_X(ProjectList_X[BaseSelect].WaypointMarker[j - 1]);	// Path追加
                            j++;
                        }
                    }
                    //     AltitudePropertyValue.AltitudeUpdate();
                    BasePointValueChanged_X(ProjectList_X[BaseSelect].BaseMarker);
                    BasePointViewUpdata(BaseSelect);

                    k++;
                }

                //     if (ProjectList.Count > 0)
                //     {
                // 使得切换到撤消（撤消）按钮可用
                //         UndoButton.IsEnabled = true;
                //     }
            }
            catch
            {

            }
        }
        private void Button_PlanMake_Click(object sender, RoutedEventArgs e)
        {
            if (ProjectList_Marker.Count > 0)//首先基准点要有如果前面基准点删除或者路点删除的话 直接恢复到要生成的点击事件
            {
                if (m_make_click == 0)//假如第一次点击的话直接进生成方案的事件
                {
                    if (ProjectList_Marker[0].WaypointData.Count >= 3)
                    {
                        Reset_Count = ProjectList_Marker[0].WaypointData.Count;
                      //bool Plan_Success = Make_PenSa_Plan();
                      bool Plan_Success = Make_MultiPenSa_Plan();
                        if (Plan_Success == true)
                        {
                            Lock_Marker_Flag = true;
                            m_make_click = 1;
                            fanganshengcheng.Content = "方案撤销";
                        }
                    }
                    else
                    {
                        System.Windows.MessageBox.Show("请至少选择三个点确定区域");
                    }
                }
                else if (m_make_click == 1)//假如已经生成了就进入方案撤销事件
                {
                    ////////////////////////////重新追加base点/////////////////////////////////////////////////////
                    WayPoint_NumS = 0;
                    MissionDel_X(0);
                    MissionAndBaseMarkerAdd_X();					// Base追加
                    ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));				// ProjectRecord追加
                    ////////////////////////////重新追加base点/////////////////////////////////////////////////////
                    //////////////////////////绘制生成的路点及轨迹/////////////////////////////////////////////
                    for (int j = 0; j < Reset_Count; j++)
                    {
                        PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                        Waypoint.Lat = Plan_Save_Lat[j];
                        Waypoint.Lng = Plan_Save_Lon[j];
                        WaypointAndPathMakeAdd_X(Waypoint, 0);
                    }
                    Lock_Marker_Flag = false;
                    m_make_click = 0;
                    fanganshengcheng.Content = "方案生成";
                    Work_Record.Content = "";
                }
            }
            else
            {
                System.Windows.MessageBox.Show("请先点击基准点");
                return;
            }
        }
        /// <summary>
        /// /四个点自动生成喷洒方案
        /// </summary>
        private bool Make_PenSa_Plan()
        {
            ////////////////////////////////////////////////////******////////////////////////////////
            /////////////////////////B--------C
            //   |        |
            //   |        |
            /////////////////////////A--------D
            //////////////////////////////////////////////////////******///////////////////////////////////
            int BIG_NUM = 0;
            int jiaocha_flag = 0;
            double User_Distance = 0.0;
            int ii = 1;
            int jj = 1;
            double OnetoTwo_Lat_Part = 0.0;
            double OnetoTwo_Lon_Part = 0.0;
            double ZerotoThree_Lat_Part = 0.0;
            double ZerotoThree_Lon_Part = 0.0;
            double TwotoThree_Lat_Part = 0.0;
            double TwotoThree_Lon_Part = 0.0;
            int ZEROTOTHREE_NUM = 0;
            int ONETOTWO_NUM = 0;
            int TWOTOTHREE_NUM = 0;
            int All_Field_Point = 0;
            if (Show_Index.Text == "")
            {
                System.Windows.MessageBox.Show("Radius Can Not Be Null");
                return false;
            }
            else
            {
                User_Distance = Convert.ToDouble(Show_Index.Text);
            }
            if (User_Distance <= 0)
            {
                System.Windows.MessageBox.Show("Radius Can Not Below Zero");
                return false;
            }
            for (int m_i = 0; m_i < 4; m_i++)
            {
                zhf_lat[m_i] = ProjectList_X[0].WaypointData[m_i].Latitude;
                zhf_lon[m_i] = ProjectList_X[0].WaypointData[m_i].Longitude;
                Plan_Save_Lat[m_i] = ProjectList_X[0].WaypointData[m_i].Latitude;
                Plan_Save_Lon[m_i] = ProjectList_X[0].WaypointData[m_i].Longitude;
            }
            Fly_PenSa_Radius = User_Distance;
            /////////////////先全部清除/////////////////////////////////////////////////////
            MissionDel_X(BaseSelect);
            PointCount = 0;
            MainMonitorClear();
            DrawTrack_Count = 0;
            ///////////////////先全部清除///////////////////////////////////////////////////
            double zhongjian_t = 0;
            double zhongjian_u = 0;
            double zhf_zhongjian1_lon = (zhf_lon[0] - zhf_lon[1]);
            double zhf_zhongjian1_lat = (zhf_lat[0] - zhf_lat[1]);
            double zhf_zhongjian2_lon = (zhf_lon[3] - zhf_lon[2]);
            double zhf_zhongjian2_lat = (zhf_lat[3] - zhf_lat[2]);
            double zhf_flag = (zhf_zhongjian1_lon) * (zhf_zhongjian2_lon) + (zhf_zhongjian1_lat) * (zhf_zhongjian2_lat);//是否按照顺时针方向
            if (zhf_flag < 0)//如果没有按照顺时针方向将2和3对调位置
            {
                zhongjian_t = zhf_lon[2];
                zhongjian_u = zhf_lat[2];
                zhf_lon[2] = zhf_lon[3];
                zhf_lat[2] = zhf_lat[3];
                zhf_lon[3] = zhongjian_t;
                zhf_lat[3] = zhongjian_u;
            }
            Field_Distance_onetotwo = Land_Distance(zhf_lat[1], zhf_lon[1], zhf_lat[2], zhf_lon[2]);////计算1-2的长度
            Field_Distance_zerotothree = Land_Distance(zhf_lat[0], zhf_lon[0], zhf_lat[3], zhf_lon[3]);////计算0-3的长度
            Field_Distance_twotothree = Land_Distance(zhf_lat[2], zhf_lon[2], zhf_lat[3], zhf_lon[3]);///计算2-3的长度
            ONETOTWO_NUM = (int)(Field_Distance_onetotwo * 1000 / User_Distance);
            ZEROTOTHREE_NUM = (int)(Field_Distance_zerotothree * 1000 / User_Distance);
            TWOTOTHREE_NUM = Math.Abs(ONETOTWO_NUM - ZEROTOTHREE_NUM);
            OnetoTwo_Lat_Part = (zhf_lat[2] - zhf_lat[1]) / (float)ONETOTWO_NUM;
            OnetoTwo_Lon_Part = (zhf_lon[2] - zhf_lon[1]) / (float)ONETOTWO_NUM;
            ZerotoThree_Lat_Part = (zhf_lat[3] - zhf_lat[0]) / (float)ZEROTOTHREE_NUM;
            ZerotoThree_Lon_Part = (zhf_lon[3] - zhf_lon[0]) / (float)ZEROTOTHREE_NUM;
            if (TWOTOTHREE_NUM == 0)
            {
                TwotoThree_Lat_Part = 0;
                TwotoThree_Lon_Part = 0;
            }
            else
            {
                TwotoThree_Lat_Part = (zhf_lat[3] - zhf_lat[2]) / (float)TWOTOTHREE_NUM;
                TwotoThree_Lon_Part = (zhf_lon[3] - zhf_lon[2]) / (float)TWOTOTHREE_NUM;
            }
            //	All_Field_Point=(WtoE_Num-1)*2;
            //////////////////////////////////////////下行线过渡///////////////////////////////////////////////////////////
            make_guoduroad1_lat[0] = zhf_lat[0];
            make_guoduroad1_lon[0] = zhf_lon[0];
            for (int i = 0; i < (ZEROTOTHREE_NUM - 1); i++)
            {
                make_guoduroad1_lat[i + 1] = make_guoduroad1_lat[i] + ZerotoThree_Lat_Part;
                make_guoduroad1_lon[i + 1] = make_guoduroad1_lon[i] + ZerotoThree_Lon_Part;
            }
            make_guoduroad1_lat[ZEROTOTHREE_NUM] = zhf_lat[3];
            make_guoduroad1_lon[ZEROTOTHREE_NUM] = zhf_lon[3];
            /////////////////////////////////////////上行线过渡/////////////////////////////////////////////////////////////
            make_guoduroad2_lat[0] = zhf_lat[1];
            make_guoduroad2_lon[0] = zhf_lon[1];
            for (int i = 0; i < (ONETOTWO_NUM - 1); i++)
            {
                make_guoduroad2_lat[i + 1] = make_guoduroad2_lat[i] + OnetoTwo_Lat_Part;
                make_guoduroad2_lon[i + 1] = make_guoduroad2_lon[i] + OnetoTwo_Lon_Part;
            }
            make_guoduroad2_lat[ONETOTWO_NUM] = zhf_lat[2];
            make_guoduroad2_lon[ONETOTWO_NUM] = zhf_lon[2];
            ///////////////////////////////////斜边线过渡///////////////////////////////////////////////////////////////////
            if (ONETOTWO_NUM >= ZEROTOTHREE_NUM)
            {
                make_guoduroad3_lat[0] = zhf_lat[2];
                make_guoduroad3_lon[0] = zhf_lon[2];
                for (int i = 0; i < TWOTOTHREE_NUM - 2; i++)
                {
                    make_guoduroad3_lat[i + 1] = make_guoduroad3_lat[i] + TwotoThree_Lat_Part;
                    make_guoduroad3_lon[i + 1] = make_guoduroad3_lon[i] + TwotoThree_Lon_Part;
                }
                if (TWOTOTHREE_NUM >= 1)
                {
                    make_guoduroad3_lat[TWOTOTHREE_NUM - 1] = zhf_lat[3] - TwotoThree_Lat_Part;
                    make_guoduroad3_lon[TWOTOTHREE_NUM - 1] = zhf_lon[3] - TwotoThree_Lon_Part;
                }
            }
            else
            {
                make_guoduroad3_lat[0] = zhf_lat[2] + TwotoThree_Lat_Part;
                make_guoduroad3_lon[0] = zhf_lon[2] + TwotoThree_Lon_Part;
                for (int i = 0; i < TWOTOTHREE_NUM - 2; i++)
                {
                    make_guoduroad3_lat[i + 1] = make_guoduroad3_lat[i] + TwotoThree_Lat_Part;
                    make_guoduroad3_lon[i + 1] = make_guoduroad3_lon[i] + TwotoThree_Lon_Part;
                }
                if (TWOTOTHREE_NUM >= 1)
                {
                    make_guoduroad3_lat[TWOTOTHREE_NUM - 1] = zhf_lat[3];
                    make_guoduroad3_lon[TWOTOTHREE_NUM - 1] = zhf_lon[3];
                }
            }

            if (ONETOTWO_NUM >= ZEROTOTHREE_NUM)
            {
                for (int j = 0; j < TWOTOTHREE_NUM; j++)
                {
                    make_guoduroad1_lat[ZEROTOTHREE_NUM + j + 1] = make_guoduroad3_lat[TWOTOTHREE_NUM - 1 - j];
                    make_guoduroad1_lon[ZEROTOTHREE_NUM + j + 1] = make_guoduroad3_lon[TWOTOTHREE_NUM - 1 - j];
                }
                BIG_NUM = ONETOTWO_NUM;
            }
            else
            {
                BIG_NUM = ZEROTOTHREE_NUM;
                for (int j = 0; j < TWOTOTHREE_NUM; j++)
                {
                    make_guoduroad2_lat[ONETOTWO_NUM + j + 1] = make_guoduroad3_lat[j];
                    make_guoduroad2_lon[ONETOTWO_NUM + j + 1] = make_guoduroad3_lon[j];
                }
            }
            for (int j = 0; j <= BIG_NUM; j++)
            {
                if (jiaocha_flag == 0)
                {
                    make_road_lat[All_Field_Point] = make_guoduroad1_lat[j];
                    make_road_lon[All_Field_Point] = make_guoduroad1_lon[j];
                    All_Field_Point = All_Field_Point + 1;
                    make_road_lat[All_Field_Point] = make_guoduroad2_lat[j];
                    make_road_lon[All_Field_Point] = make_guoduroad2_lon[j];
                    All_Field_Point = All_Field_Point + 1;
                    jiaocha_flag = 1;
                }
                else if (jiaocha_flag == 1)
                {
                    make_road_lat[All_Field_Point] = make_guoduroad2_lat[j];
                    make_road_lon[All_Field_Point] = make_guoduroad2_lon[j];
                    All_Field_Point = All_Field_Point + 1;
                    make_road_lat[All_Field_Point] = make_guoduroad1_lat[j];
                    make_road_lon[All_Field_Point] = make_guoduroad1_lon[j];
                    All_Field_Point = All_Field_Point + 1;
                    jiaocha_flag = 0;
                }
            }
            ////////////////////////////重新追加base点/////////////////////////////////////////////////////
            MissionAndBaseMarkerAdd_X();					// Base追加
            ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));				// ProjectRecord追加
            ////////////////////////////重新追加base点/////////////////////////////////////////////////////
            //////////////////////////绘制生成的路点及轨迹/////////////////////////////////////////////
            for (int j = 0; j < All_Field_Point; j++)
            {
                PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                Waypoint.Lat = make_road_lat[j];
                Waypoint.Lng = make_road_lon[j];
                WaypointAndPathMakeAdd_X(Waypoint, 0);
            }
            Record_Info_Show(All_Field_Point);
            return true;
        }
        private bool Record_Info_Show(int All_Used_PointNum)
        {
            double Fly_Estimated_Time = 0.0; //飞行预计时间
            double Fly_Route_Length = 0.0;//飞行路线长度
            double Fly_Regional_Area = 0.0; //飞行区域面积
            double Calc_Route_Length = 0.0;//临时存储每条线长度
            double Acc_Route_Length = 0.0;//加速度的距离
            double Decele_Route_Length = 0.0;//减加速度距离
            double Uni_Route_Length = 0.0;//匀速距离
            double Used_Pensa_Sudu = 0.0;
            int Area_Flag = 0;
            int odevity_Flag = -1;//奇偶标志
            double echelon_Distance = 0.0;//梯形上下底的总距离
            if (AllAerocraftData.Set_Pensa_Sudu==0)
            {
                Used_Pensa_Sudu = 8.0;
            }
            else
            {
                Used_Pensa_Sudu = AllAerocraftData.Set_Pensa_Sudu;
            }
//////////首先判断下生成的经纬度的个数是偶数还是奇数////////////////////////////////////
            if (All_Used_PointNum%2==0)
            {
                odevity_Flag = 0;
            }
            else
            {
                odevity_Flag = 1;
            }

            for (int i = 0; i < (All_Used_PointNum-1);i++ )
            {
                //计算距离
                Fly_Route_Length = Fly_Route_Length + Land_Distance(make_road_lat[i], make_road_lon[i], make_road_lat[i+1], make_road_lon[i+1]);//计算出的是km
                if(i%2==0)
                {
                    Area_Flag = 0;
                }
                if(Area_Flag==0)
                {
                    Area_Flag = 1;
                    //计算面积
                    echelon_Distance = echelon_Distance+(Land_Distance(make_road_lat[i], make_road_lon[i], make_road_lat[i + 1], make_road_lon[i + 1])) * 1000.0;//总的上下底的距离和
                    //计算预计使用时间
                    Calc_Route_Length = (Land_Distance(make_road_lat[i], make_road_lon[i], make_road_lat[i + 1], make_road_lon[i + 1])) * 1000.0;
                    Acc_Route_Length = (1 / 2.0) * (Used_Pensa_Sudu) * (Used_Pensa_Sudu) / 0.4;//加速度的行程
                    Decele_Route_Length = (1 / 2.0) * (Used_Pensa_Sudu) * (Used_Pensa_Sudu) / 0.3;//减加速度的行程
                    if((Calc_Route_Length-Acc_Route_Length-Decele_Route_Length)>=0)
                    {
                        Uni_Route_Length = (Calc_Route_Length - Acc_Route_Length - Decele_Route_Length);
                    }
                    else
                    {
                        Uni_Route_Length = 0;
                    }
                    if ((Calc_Route_Length - Acc_Route_Length - Decele_Route_Length) >= 0)
                    {
                        Fly_Estimated_Time = Fly_Estimated_Time + ((Used_Pensa_Sudu / 0.4) + (Used_Pensa_Sudu / 0.4) + (Uni_Route_Length / Used_Pensa_Sudu))/60.0;
                    }
                    else if (Calc_Route_Length <= (1 / 2.0 * (Used_Pensa_Sudu) * (Used_Pensa_Sudu) / 0.4))
                    {
                        Fly_Estimated_Time = Fly_Estimated_Time + Math.Sqrt(Calc_Route_Length * 2 / 0.4)/60.0;
                    }
                    else if (Calc_Route_Length > (1 / 2.0 * (Used_Pensa_Sudu) * (Used_Pensa_Sudu) / 0.4) && Calc_Route_Length < ((1 / 2.0 * (Used_Pensa_Sudu) * (Used_Pensa_Sudu) / 0.4) + (1 / 2.0 * (Used_Pensa_Sudu) * (Used_Pensa_Sudu) / 0.3)))
                    {
                        Fly_Estimated_Time = Fly_Estimated_Time + ((Used_Pensa_Sudu / 0.4) + Math.Sqrt(((Calc_Route_Length - 1 / 2.0 * (Used_Pensa_Sudu) * (Used_Pensa_Sudu) / 0.4) * 2.0 / 0.3)))/60.0;
                    }
                }
            }
            if(odevity_Flag==0)//如果点数是偶数距离需要减去头尾一次
            {
                Fly_Regional_Area = (((echelon_Distance * 2.0 - Land_Distance(make_road_lat[0], make_road_lon[0], make_road_lat[1], make_road_lon[1]) * 1000.0 - Land_Distance(make_road_lat[All_Used_PointNum - 2], make_road_lon[All_Used_PointNum - 2], make_road_lat[All_Used_PointNum - 1], make_road_lon[All_Used_PointNum - 1]) * 1000.0) * Fly_PenSa_Radius )/2.0)/666.666;
            }
            else if(odevity_Flag==1)//如果点数是奇数减去一次刚开始的
            {
                Fly_Regional_Area = (((echelon_Distance * 2.0 - Land_Distance(make_road_lat[0], make_road_lon[0], make_road_lat[1], make_road_lon[1]) * 1000.0) * Fly_PenSa_Radius) / 2.0)/666.666;
            }
            Fly_Regional_Area_Extern = Fly_Regional_Area;
            Fly_Route_Length_Extern = Fly_Route_Length;
            Fly_Estimated_Time_Extern = Fly_Estimated_Time;
            //Work_Record.Content = "MuShu：" + Fly_Regional_Area.ToString("#0.00") + "Mu" + " Distance：" + Fly_Route_Length.ToString("#0.00") + "Km" + " Timer：" + Fly_Estimated_Time.ToString("#0") + "Minute";
            return true;
        }
        private bool Record_Info_MoveShow(int All_Used_PointNum)
        {
            double Fly_Estimated_Time = 0.0; //飞行预计时间
            double Fly_Route_Length = 0.0;//飞行路线长度
            double Fly_Regional_Area = 0.0; //飞行区域面积
            double Calc_Route_Length = 0.0;//临时存储每条线长度
            double Acc_Route_Length = 0.0;//加速度的距离
            double Decele_Route_Length = 0.0;//减加速度距离
            double Uni_Route_Length = 0.0;//匀速距离
            double Used_Pensa_Sudu = 0.0;
            int Area_Flag = 0;
            int odevity_Flag = -1;//奇偶标志
            double echelon_Distance = 0.0;//梯形上下底的总距离
            if (AllAerocraftData.Set_Pensa_Sudu == 0)
            {
                Used_Pensa_Sudu = 8.0;
            }
            else
            {
                Used_Pensa_Sudu = AllAerocraftData.Set_Pensa_Sudu;
            }
            //////////首先判断下生成的经纬度的个数是偶数还是奇数////////////////////////////////////
            if (All_Used_PointNum % 2 == 0)
            {
                odevity_Flag = 0;
            }
            else
            {
                odevity_Flag = 1;
            }

            for (int i = 0; i < (All_Used_PointNum - 1); i++)
            {
                //计算距离
                Fly_Route_Length = Fly_Route_Length + Land_Distance(ProjectList_X[0].WaypointData[i].Latitude, ProjectList_X[0].WaypointData[i].Longitude, ProjectList_X[0].WaypointData[i+1].Latitude, ProjectList_X[0].WaypointData[i+1].Longitude);//计算出的是km
                if (i % 2 == 0)
                {
                    Area_Flag = 0;
                }
                if (Area_Flag == 0)
                {
                    Area_Flag = 1;
                    //计算面积
                    echelon_Distance = echelon_Distance + (Land_Distance(ProjectList_X[0].WaypointData[i].Latitude, ProjectList_X[0].WaypointData[i].Longitude, ProjectList_X[0].WaypointData[i + 1].Latitude, ProjectList_X[0].WaypointData[i + 1].Longitude)) * 1000.0;//总的上下底的距离和
                    //计算预计使用时间
                    Calc_Route_Length = (Land_Distance(ProjectList_X[0].WaypointData[i].Latitude, ProjectList_X[0].WaypointData[i].Longitude, ProjectList_X[0].WaypointData[i + 1].Latitude, ProjectList_X[0].WaypointData[i + 1].Longitude)) * 1000.0;
                    Acc_Route_Length = (1 / 2.0) * (Used_Pensa_Sudu) * (Used_Pensa_Sudu) / 0.4;//加速度的行程
                    Decele_Route_Length = (1 / 2.0) * (Used_Pensa_Sudu) * (Used_Pensa_Sudu) / 0.3;//减加速度的行程
                    if ((Calc_Route_Length - Acc_Route_Length - Decele_Route_Length) >= 0)
                    {
                        Uni_Route_Length = (Calc_Route_Length - Acc_Route_Length - Decele_Route_Length);
                    }
                    else
                    {
                        Uni_Route_Length = 0;
                    }
                    if ((Calc_Route_Length - Acc_Route_Length - Decele_Route_Length) >= 0)
                    {
                        Fly_Estimated_Time = Fly_Estimated_Time + ((Used_Pensa_Sudu / 0.4) + (Used_Pensa_Sudu / 0.4) + (Uni_Route_Length / Used_Pensa_Sudu)) / 60.0;
                    }
                    else if (Calc_Route_Length <= (1 / 2.0 * (Used_Pensa_Sudu) * (Used_Pensa_Sudu) / 0.4))
                    {
                        Fly_Estimated_Time = Fly_Estimated_Time + Math.Sqrt(Calc_Route_Length * 2 / 0.4) / 60.0;
                    }
                    else if (Calc_Route_Length > (1 / 2.0 * (Used_Pensa_Sudu) * (Used_Pensa_Sudu) / 0.4) && Calc_Route_Length < ((1 / 2.0 * (Used_Pensa_Sudu) * (Used_Pensa_Sudu) / 0.4) + (1 / 2.0 * (Used_Pensa_Sudu) * (Used_Pensa_Sudu) / 0.3)))
                    {
                        Fly_Estimated_Time = Fly_Estimated_Time + ((Used_Pensa_Sudu / 0.4) + Math.Sqrt(((Calc_Route_Length - 1 / 2.0 * (Used_Pensa_Sudu) * (Used_Pensa_Sudu) / 0.4) * 2.0 / 0.3))) / 60.0;
                    }
                }
            }
            if (odevity_Flag == 0)//如果点数是偶数距离需要减去头尾一次
            {
                Fly_Regional_Area = (((echelon_Distance * 2.0 - Land_Distance(ProjectList_X[0].WaypointData[0].Latitude, ProjectList_X[0].WaypointData[0].Longitude, ProjectList_X[0].WaypointData[1].Latitude, ProjectList_X[0].WaypointData[1].Longitude) * 1000.0 -Land_Distance(ProjectList_X[0].WaypointData[All_Used_PointNum - 2].Latitude, ProjectList_X[0].WaypointData[All_Used_PointNum - 2].Longitude, ProjectList_X[0].WaypointData[All_Used_PointNum - 1].Latitude, ProjectList_X[0].WaypointData[All_Used_PointNum-1].Longitude) * 1000.0) * Fly_PenSa_Radius) / 2.0) / 666.666;
            }
            else if (odevity_Flag == 1)//如果点数是奇数减去一次刚开始的
            {
                Fly_Regional_Area = (((echelon_Distance * 2.0 - Land_Distance(ProjectList_X[0].WaypointData[0].Latitude, ProjectList_X[0].WaypointData[0].Longitude, ProjectList_X[0].WaypointData[1].Latitude, ProjectList_X[0].WaypointData[1].Longitude) * 1000.0) * Fly_PenSa_Radius) / 2.0) / 666.666;
            }
            Fly_Regional_Area_Extern = Fly_Regional_Area;
            Fly_Route_Length_Extern = Fly_Route_Length;
            Fly_Estimated_Time_Extern = Fly_Estimated_Time;
            Work_Record.Content = "MuShu：" + Fly_Regional_Area.ToString("#0.00") + "Mu" + " Distance：" + Fly_Route_Length.ToString("#0.00") + "Km" + " Timer：" + Fly_Estimated_Time.ToString("#0") + "Minute";
            return true;
        }
/// <summary>
/// 多点自动生成方案
/// </summary>
/// <param name="Waypoint"></param>
/// <param name="_baseSelect"></param>
        public bool Make_MultiPenSa_Plan()
        {
            int Add_del_Flag = 0;
            int furthestpoint = 0;
            int BIG_NUM = 0;
            int jiaocha_flag = 0;
            int middle_count = 0;
            int base_count = 0;
            double part_lat = 0.0;
            double part_lon = 0.0;
            double[] A = new double[50];
            double[] B = new double[50];
            double[] C = new double[50];
            double[] distance = new double[50];
            int[] count_in = new int[50];
            int[] count_diff = new int[50];
            double temp = 0.0, MAX = 0.0;
            int num;
            double User_Distance = 0.0;
            int Used_Point_Num = 0;
            int All_Field_Point = 0;
            int All_FieldAndObstacle_Point = 0;

            Array.Clear(yesornot_pensa_flag, 0, 500);
            if (Show_Index.Text == "")
            {
                System.Windows.MessageBox.Show("喷洒半径不能为空");
                return false;
            }
            else
            {
                if (Show_Index.SelectedIndex==0)
                {
                    User_Distance = 3.0;
                }
                if(Show_Index.SelectedIndex==1)
                {
                    User_Distance = 4.0;
                }
                if (Show_Index.SelectedIndex == 2)
                {
                    User_Distance = 5.0;
                }
                if (Show_Index.SelectedIndex == 3)
                {
                    User_Distance = 6.0;
                }
                if (Show_Index.SelectedIndex == 4)
                {
                    User_Distance = 7.0;
                }
                if (Show_Index.SelectedIndex == 5)
                {
                    User_Distance = 8.0;
                }
                if (Show_Index.SelectedIndex == 6)
                {
                    User_Distance = 9.0;
                }
   //             User_Distance = Convert.ToDouble(Show_Index.Text);
            }
            if (User_Distance <= 0)
            {
                System.Windows.MessageBox.Show("喷洒半径不能为负");
                return false;
            }
            for (int m_i = 0; m_i < ProjectList_Marker[0].WaypointData.Count; m_i++)
            {
                zhf_lat[m_i] = ProjectList_Marker[0].WaypointData[m_i].Latitude;//首先保存所有的经纬度区域点
                zhf_lon[m_i] = ProjectList_Marker[0].WaypointData[m_i].Longitude;
                Plan_Save_Lat[m_i] = ProjectList_Marker[0].WaypointData[m_i].Latitude;
                Plan_Save_Lon[m_i] = ProjectList_Marker[0].WaypointData[m_i].Longitude;
            }
/////////////////////////////////////////////////////////专门针对内缩的部分///////////////////////////////////////////////////////
                PointLatLng[] pList = new PointLatLng[50];
                PointLatLng[] dpList = new PointLatLng[50];
                PointLatLng[] ndpList = new PointLatLng[50];
                PointLatLng[] newList = new PointLatLng[50];
                for (int i = 0; i < ProjectList_Marker[0].WaypointData.Count; i++)
                {
                    pList[i].Lat = ProjectList_Marker[0].WaypointData[i].Latitude;
                    pList[i].Lng = ProjectList_Marker[0].WaypointData[i].Longitude;
                }
                for (int i = 0; i < ProjectList_Marker[0].WaypointData.Count; i++)
                {
                    if (i == (ProjectList_Marker[0].WaypointData.Count-1))
                    {
                        dpList[ProjectList_Marker[0].WaypointData.Count - 1].Lat = (pList[0].Lat - pList[ProjectList_Marker[0].WaypointData.Count - 1].Lat);
                        dpList[ProjectList_Marker[0].WaypointData.Count - 1].Lng = (pList[0].Lng - pList[ProjectList_Marker[0].WaypointData.Count - 1].Lng);
                    }
                    else
                    {
                        dpList[i].Lat = (pList[i + 1].Lat - pList[i].Lat);
                        dpList[i].Lng = (pList[i + 1].Lng - pList[i].Lng);
                    }
                }
                for (int i = 0; i < ProjectList_Marker[0].WaypointData.Count; i++)
                {
                    ndpList[i].Lat = (dpList[i].Lat * (1.0 / Math.Sqrt((double)(dpList[i].Lat * dpList[i].Lat + dpList[i].Lng * dpList[i].Lng))));
                    ndpList[i].Lng = (dpList[i].Lng * (1.0 / Math.Sqrt((double)(dpList[i].Lat * dpList[i].Lat + dpList[i].Lng * dpList[i].Lng))));
                }
                for (int i = 0; i < ProjectList_Marker[0].WaypointData.Count; i++)
                {
                    PointLatLng point = new PointLatLng();
                    PointLatLng vector = new PointLatLng();
                    int startIndex;
                    int endIndex;
                    double sina = 0.0;
                    double length = 0.0;
                    startIndex = i;
                    if (startIndex == 0)
                    {
                        startIndex = (ProjectList_Marker[0].WaypointData.Count-1);
                    }
                    else
                    {
                        startIndex = i - 1;
                    }
                    endIndex = i;
                    sina = (ndpList[startIndex].Lat * ndpList[endIndex].Lng - ndpList[startIndex].Lng * ndpList[endIndex].Lat);
                    UpdateMeterPerDeg(ndpList[startIndex].Lat, ndpList[endIndex].Lng);
                    double m_dMeterPerDeg_LatLng = 0.0;
                    m_dMeterPerDeg_LatLng = Math.Sqrt((m_dMeterPerDeg_Latitude * m_dMeterPerDeg_Latitude + m_dMeterPerDeg_Longitude * m_dMeterPerDeg_Longitude));
//////////////////////////////////////////////////计算区域点的顺时针还是逆时针//////////////////////////////////////////////////////////////////////////////////
                    double Vector_ZeroAndOneLon = (zhf_lon[0] - zhf_lon[1]);
                    double Vector_ZeroAndOneLat = (zhf_lat[0] - zhf_lat[1]);
                    double Vector_OneAndTwoLon = (zhf_lon[1] - zhf_lon[2]);
                    double Vector_OneAndTwoLat = (zhf_lat[1] - zhf_lat[2]);
                    double zhf_flag = (Vector_ZeroAndOneLat) * (Vector_OneAndTwoLon) - (Vector_OneAndTwoLat) * (Vector_ZeroAndOneLon);//是否按照顺时针方向
                    if(zhf_flag<0)
                    {
                        Retracted_Dis = -Constants.Retracted_Dis;
                    }
                    else
                    {
                        Retracted_Dis = Constants.Retracted_Dis;
                    }

                    double dist = (Retracted_Dis) * (1.0 / m_dMeterPerDeg_LatLng);
                    length = dist / sina;
                    vector.Lat = (ndpList[endIndex].Lat - ndpList[startIndex].Lat);
                    vector.Lng = (ndpList[endIndex].Lng - ndpList[startIndex].Lng);
                    point.Lat = (pList[i].Lat + vector.Lat * length);
                    point.Lng = (pList[i].Lng + vector.Lng * length);
                    newList[i].Lat = point.Lat;
                    newList[i].Lng = point.Lng;
                }
            Used_Point_Num = ProjectList_Marker[0].WaypointData.Count;//总共有多少个路点
            Fly_PenSa_Radius = User_Distance;
/////////////////////////////////////////////////////////内缩结束//////////////////////////////////////////////
            ///////////////////先全部清除///////////////////////////////////////////////////
            //计算区域点的所有点形成的所有直线的系数存储在ABC之中
            for (int i = 0; i < Used_Point_Num - 1; i++)
            {
                A[i] = newList[i + 1].Lng - newList[i].Lng;
                B[i] = newList[i].Lat - newList[i+1].Lat;
                C[i] = newList[i + 1].Lat * newList[i].Lng - newList[i].Lat * newList[i + 1].Lng;
            }
            A[Used_Point_Num - 1] = newList[0].Lng - newList[Used_Point_Num - 1].Lng;
            B[Used_Point_Num - 1] = newList[Used_Point_Num - 1].Lat - newList[0].Lat;
            C[Used_Point_Num - 1] = newList[0].Lat * newList[Used_Point_Num - 1].Lng - newList[Used_Point_Num - 1].Lat * newList[0].Lng;
            //计算区域点到一二点形成的直线的距离（点到直线距离）
            for (int i = 0; i < Used_Point_Num; i++)
            {
                //求取垂线与第一条线的交点Land_Distance(zhf_lat[0], zhf_lon[0], zhf_lat[3], zhf_lon[3]);
                if (A[0] == 0)
                {
                    //求取垂线与第一条直线的交点
                    if (B[0] == 0)
                    {
                        return false;
                    }
                    Add_del_Flag = 1;
                    temp = Land_Distance(newList[i].Lat, -C[0] / B[0], newList[i].Lat, newList[i].Lng) * 1000.0;

                }
                else if (B[0] == 0)
                {
                    if (A[0] == 0)
                    {
                        return false;
                    }
                    Add_del_Flag = 1;
                    temp = Land_Distance(-C[0] / A[0], newList[i].Lng, newList[i].Lat, newList[i].Lng) * 1000.0;

                }
                else
                {
                    //算出垂线的M值
                    if (A[0] * A[0] + B[0] * B[0] == 0 || A[0] * A[0] + B[0] * B[0] == 0)
                    {
                        return false;
                    }
                    double M = (-A[0] * newList[i].Lng + B[0] * newList[i].Lat);
                    double Lat_X = (B[0] * M - A[0] * C[0]) / (A[0] * A[0] + B[0] * B[0]);         //计算交点的纬度
                    double Lon_Y = (-A[0] * M - B[0] * C[0]) / (A[0] * A[0] + B[0] * B[0]);
                    temp = Land_Distance(Lat_X, Lon_Y, newList[i].Lat, newList[i].Lng) * 1000.0;
                }
                if (temp < 0) temp = -temp;
                distance[i] = temp;
                if (temp > MAX)
                {
                    MAX = temp;//保存最远的距离
                    furthestpoint = i + 1;//保存最远的距离点
                }
            }
            //计算区域点中根据喷洒半径形成的平行线个数
            num = (int)(MAX / User_Distance) + 1;
            ///*求与第一条直线平行且间距为喷洒半径的所有直线方程，A,B不变，*/
            for (int j = 0; j < Used_Point_Num; j++)
            {
                if (j > 1 && j < furthestpoint)
                {
                    count_diff[j - 2] = ((int)(distance[j] / User_Distance) - (int)(distance[j - 1] / User_Distance));//计算所有间隔点按照喷洒半径的个数
                }
                else if (j >= furthestpoint)
                {
                    if((j-2)<0)
                    {
                        return false;
                    }
                    count_diff[j - 2] = ((int)(distance[j - 1] / User_Distance) - (int)(distance[j] / User_Distance));//计算所有间隔点按照喷洒半径的个数
                }
            }
            count_diff[Used_Point_Num - 2] = (int)(distance[Used_Point_Num - 1] / User_Distance);//最后一个点的喷洒点个数

            ////////////////////计算底部的所有经纬度点的坐标//////////////////////////////////
            make_guoduroad1_lat[0] = newList[0].Lat;
            make_guoduroad1_lon[0] = newList[0].Lng;
            for (int i = 0; i < ((Used_Point_Num - furthestpoint) + 1); i++)
            {
                if (i == 0)
                {
                    if (count_diff[Used_Point_Num - 2]!=0)
                    {
                        part_lat = (newList[Used_Point_Num - 1].Lat - newList[0].Lat) / (float)count_diff[Used_Point_Num - 2];
                        part_lon = (newList[Used_Point_Num - 1].Lng - newList[0].Lng) / (float)count_diff[Used_Point_Num - 2];
                       // return false;
                    }
                    else
                    {
                        part_lat = 0.0;
                        part_lon = 0.0;
                    }

                }
                else
                {
                    if (count_diff[Used_Point_Num - 2 - i] != 0)
                    {
                        part_lat = (newList[Used_Point_Num - (1 + i)].Lat - newList[Used_Point_Num - (i)].Lat) / (float)count_diff[Used_Point_Num - 2 - i];
                        part_lon = (newList[Used_Point_Num - (1 + i)].Lng - newList[Used_Point_Num - (i)].Lng) / (float)count_diff[Used_Point_Num - 2 - i];
                    //    return false;
                    }
                    else
                    {
                        part_lat = 0.0;
                        part_lon = 0.0;
                    }

                }
                for (int j = 0; j < count_diff[Used_Point_Num - 2 - i]; j++)
                {
                    make_guoduroad1_lat[base_count + 1] = make_guoduroad1_lat[base_count] + part_lat;
                    make_guoduroad1_lon[base_count + 1] = make_guoduroad1_lon[base_count] + part_lon;
                    base_count++;
                }
            }
            ////////////////////计算中间所有经纬度点的坐标/////////////////////////////////////////////
            make_guoduroad2_lat[0] = newList[1].Lat;
            make_guoduroad2_lon[0] = newList[1].Lng;
            for (int i = 0; i < (Used_Point_Num - (Used_Point_Num - furthestpoint) - 2); i++)
            {
                if (count_diff[i]!=0)
                {
               //     return false;
                    part_lat = (newList[(2 + i)].Lat - newList[i + 1].Lat) / (float)count_diff[i];
                    part_lon = (newList[(2 + i)].Lng - newList[i + 1].Lng) / (float)count_diff[i];
                }
                else
                {
                    part_lat =0.0;
                    part_lon = 0.0;
                }

                for (int j = 0; j < count_diff[i]; j++)
                {
                    make_guoduroad2_lat[middle_count + 1] = make_guoduroad2_lat[middle_count] + part_lat;
                    make_guoduroad2_lon[middle_count + 1] = make_guoduroad2_lon[middle_count] + part_lon;
                    middle_count++;
                }
            }
            if (base_count > middle_count)
            {
                BIG_NUM = middle_count;
            }
            else
            {
                BIG_NUM = base_count;
            }

            for (int j = 0; j <= BIG_NUM; j++)
            {
                if (All_Field_Point < 498)
                {
                    if (jiaocha_flag == 0)
                    {
                        make_road_lat[All_Field_Point] = make_guoduroad1_lat[j];
                        make_road_lon[All_Field_Point] = make_guoduroad1_lon[j];
                        All_Field_Point = All_Field_Point + 1;
                        make_road_lat[All_Field_Point] = make_guoduroad2_lat[j];
                        make_road_lon[All_Field_Point] = make_guoduroad2_lon[j];
                        All_Field_Point = All_Field_Point + 1;
                        jiaocha_flag = 1;
                    }
                    else if (jiaocha_flag == 1)
                    {
                        make_road_lat[All_Field_Point] = make_guoduroad2_lat[j];
                        make_road_lon[All_Field_Point] = make_guoduroad2_lon[j];
                        All_Field_Point = All_Field_Point + 1;
                        make_road_lat[All_Field_Point] = make_guoduroad1_lat[j];
                        make_road_lon[All_Field_Point] = make_guoduroad1_lon[j];
                        All_Field_Point = All_Field_Point + 1;
                        jiaocha_flag = 0;
                    }
                }
                else
                {
                    All_Field_Point = 498;
                 //   System.Windows.MessageBox.Show("区域规划过大请缩小规划区域");
                }
            }
            /////////////////先全部清除/////////////////////////////////////////////////////
            MissionDel_X(BaseSelect);
            PointCount = 0;
            //        MainMonitorClear();
            DrawTrack_Count = 0;
            ////////////////////////////重新追加base点/////////////////////////////////////////////////////
            MissionAndBaseMarkerAdd_X();					// Base追加
    //        ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));				// ProjectRecord追加
            ////////////////////////////重新追加base点/////////////////////////////////////////////////////
            //////////////////////////绘制生成的路点及轨迹/////////////////////////////////////////////
            if (Add_del_Flag==0)
            {
                All_Field_Point = All_Field_Point - 1;
            }
///////////////////////////////////添加障碍点///////////////////////////////////////////////////////////
      //    if (Constants.Obstacle_IfInclude_Flag ==true)
              //障碍物判断必进
            if(true)
            {
                test_Angle_ = -Rotationtwo_Angle(zhf_lat[0], zhf_lon[0], zhf_lat[1], zhf_lon[1]);//先算障碍点跟随路径的角度
                if(test_Angle_==0||test_Angle_==180||test_Angle_==-180)
                {
                    test_Angle_ = 0.1;
                }
                if(test_Angle_==90)
                {
                    test_Angle_ = 91;
                }
                if(test_Angle_==-90)
                {
                    test_Angle_ = -91;
                }
                double Angle_Deg = (test_Angle_ * Math.PI / 180.0);
                Function_Obstacle_Area(Constants.Used_Obstacle_Lat , Constants.Used_Obstacle_Lng, Constants.Used_Obstacle_Radius, Angle_Deg);//算出障碍点的根据半径的四个顶点增加ID便于以后多障碍点添加
                ///////计算障碍点1-2 3-4形成的矩形系数//////////
                double A1=0.0,B1=0.0,C1=0.0;//矩形1-2直线系数
                double A2=0.0,B2=0.0,C2=0.0;//矩形3-4直线系数
                double A0=0.0,B0=0.0,C0=0.0;//不断变动的直线系数 
                double IntersectionFirst_Point_Lat=0.0,IntersectionFirst_Point_Lon=0.0,IntersectionSecond_Point_Lat=0.0,IntersectionSecond_Point_Lon=0.0;//不断变动的交点经纬度
                A1 = Square_FirstToFourth_Point[1].Lng - Square_FirstToFourth_Point[0].Lng;
                B1 = Square_FirstToFourth_Point[0].Lat - Square_FirstToFourth_Point[1].Lat;
                C1 = Square_FirstToFourth_Point[1].Lat * Square_FirstToFourth_Point[0].Lng - Square_FirstToFourth_Point[0].Lat * Square_FirstToFourth_Point[1].Lng;
                A2 = Square_FirstToFourth_Point[3].Lng - Square_FirstToFourth_Point[2].Lng;
                B2 = Square_FirstToFourth_Point[2].Lat - Square_FirstToFourth_Point[3].Lat;
                C2 = Square_FirstToFourth_Point[3].Lat * Square_FirstToFourth_Point[2].Lng - Square_FirstToFourth_Point[2].Lat * Square_FirstToFourth_Point[3].Lng;
                for(int i=0;i<(All_Field_Point);i=i+2)
                {
                    ////////////////变动直线的系数/////////
                    A0 = make_road_lon[i+1] - make_road_lon[i];
                    B0 = make_road_lat[i] - make_road_lat[i+1];
                    C0 = make_road_lat[i+1] * make_road_lon[i] - make_road_lat[i] * make_road_lon[i+1];
                    //////////////与1-2直线////////
                    IntersectionFirst_Point_Lat = ((((A1*C0-A0*C1)/((A1*B0-A0*B1)*A0))*B0)-C0/A0);
                    IntersectionFirst_Point_Lon = ((A0*C1-A1*C0)/(A1*B0-A0*B1));
                    /////////////与3-4直线////////
                    IntersectionSecond_Point_Lat = ((((A2*C0-A0*C2)/((A2*B0-A0*B2)*A0))*B0)-C0/A0);
                    IntersectionSecond_Point_Lon = ((A0 * C2 - A2 * C0) / (A2 * B0 - A0 * B2));
                    bool Condition_TrueOrFalse = Function_Clc_IfSatisfy(IntersectionFirst_Point_Lat, IntersectionFirst_Point_Lon, IntersectionSecond_Point_Lat, IntersectionSecond_Point_Lon);
                    if(Condition_TrueOrFalse==true)//有障碍点
                    {
                        double first_disc = Land_Distance(IntersectionFirst_Point_Lat, IntersectionFirst_Point_Lon, make_road_lat[i], make_road_lon[i]) * 1000.0;
                        double second_disc = Land_Distance(IntersectionSecond_Point_Lat, IntersectionSecond_Point_Lon, make_road_lat[i], make_road_lon[i]) * 1000.0;
                        if (first_disc < second_disc)//分别与引过去的点算距离哪个近用哪个
                        {
                            yesornot_pensa_flag[All_FieldAndObstacle_Point] = 0;//有障碍点启始的给0
                            make_roadandobstacle_lat[All_FieldAndObstacle_Point] = make_road_lat[i];
                            make_roadandobstacle_lon[All_FieldAndObstacle_Point] = make_road_lon[i];
                            All_FieldAndObstacle_Point++;
                            yesornot_pensa_flag[All_FieldAndObstacle_Point] = 1;//有障碍点首次遇到障碍置1
                            make_roadandobstacle_lat[All_FieldAndObstacle_Point] = IntersectionFirst_Point_Lat;
                            make_roadandobstacle_lon[All_FieldAndObstacle_Point] = IntersectionFirst_Point_Lon;
                            All_FieldAndObstacle_Point++;
                            //分别判断交叉点距离0和1之间的距离
                            double m_from_first_Disc = Land_Distance(IntersectionFirst_Point_Lat, IntersectionFirst_Point_Lon, Square_FirstToFourth_Point[0].Lat, Square_FirstToFourth_Point[0].Lng) * 1000.0;
                            double m_from_second_Disc = Land_Distance(IntersectionFirst_Point_Lat, IntersectionFirst_Point_Lon, Square_FirstToFourth_Point[1].Lat, Square_FirstToFourth_Point[1].Lng) * 1000.0;
                            if (m_from_first_Disc < m_from_second_Disc)//与1-2交叉往1方向转
                            {
                                yesornot_pensa_flag[All_FieldAndObstacle_Point] = 1;//有障碍点第二次遇到障碍置1
                                make_roadandobstacle_lat[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[0].Lat;
                                make_roadandobstacle_lon[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[0].Lng;
                                All_FieldAndObstacle_Point++;
                                yesornot_pensa_flag[All_FieldAndObstacle_Point] = 1;//有障碍点第三次遇到障碍置1
                                make_roadandobstacle_lat[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[3].Lat;
                                make_roadandobstacle_lon[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[3].Lng;
                            }
                            else//与1-2交叉往2方向转
                            {
                                yesornot_pensa_flag[All_FieldAndObstacle_Point] = 1;//有障碍点第二次遇到障碍置1
                                make_roadandobstacle_lat[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[1].Lat;
                                make_roadandobstacle_lon[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[1].Lng;
                                All_FieldAndObstacle_Point++;
                                yesornot_pensa_flag[All_FieldAndObstacle_Point] = 1;//有障碍点第三次遇到障碍置1
                                make_roadandobstacle_lat[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[2].Lat;
                                make_roadandobstacle_lon[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[2].Lng;
                            }
                            All_FieldAndObstacle_Point++;
                            yesornot_pensa_flag[All_FieldAndObstacle_Point] = 0;//有障碍点第四次遇到障碍置0
                            make_roadandobstacle_lat[All_FieldAndObstacle_Point] = IntersectionSecond_Point_Lat;
                            make_roadandobstacle_lon[All_FieldAndObstacle_Point] = IntersectionSecond_Point_Lon;
                            All_FieldAndObstacle_Point++;
                            yesornot_pensa_flag[All_FieldAndObstacle_Point] = 0;//有障碍点第五次遇到障碍置0
                            make_roadandobstacle_lat[All_FieldAndObstacle_Point] = make_road_lat[i + 1];
                            make_roadandobstacle_lon[All_FieldAndObstacle_Point] = make_road_lon[i + 1];
                            All_FieldAndObstacle_Point++;
                        }
                        else
                        {
                            yesornot_pensa_flag[All_FieldAndObstacle_Point] = 0;//有障碍点启始的给0
                            make_roadandobstacle_lat[All_FieldAndObstacle_Point] = make_road_lat[i];
                            make_roadandobstacle_lon[All_FieldAndObstacle_Point] = make_road_lon[i];
                            All_FieldAndObstacle_Point++;
                            yesornot_pensa_flag[All_FieldAndObstacle_Point] = 1;//有障碍点首次遇到障碍置1
                            make_roadandobstacle_lat[All_FieldAndObstacle_Point] = IntersectionSecond_Point_Lat;
                            make_roadandobstacle_lon[All_FieldAndObstacle_Point] = IntersectionSecond_Point_Lon;
                            All_FieldAndObstacle_Point++;
                            //分别判断交叉点距离3和4之间的距离
                            double m_from_third_Disc = Land_Distance(IntersectionSecond_Point_Lat, IntersectionSecond_Point_Lon, Square_FirstToFourth_Point[2].Lat, Square_FirstToFourth_Point[2].Lng) * 1000.0;
                            double m_from_fourth_Disc = Land_Distance(IntersectionSecond_Point_Lat, IntersectionSecond_Point_Lon, Square_FirstToFourth_Point[3].Lat, Square_FirstToFourth_Point[3].Lng) * 1000.0;
                            if (m_from_third_Disc > m_from_fourth_Disc)//与3-4交叉往4方向转
                            {
                                yesornot_pensa_flag[All_FieldAndObstacle_Point] = 1;//有障碍点第二次遇到障碍置1
                                make_roadandobstacle_lat[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[3].Lat;
                                make_roadandobstacle_lon[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[3].Lng;
                                All_FieldAndObstacle_Point++;
                                yesornot_pensa_flag[All_FieldAndObstacle_Point] = 1;//有障碍点第三次遇到障碍置1
                                make_roadandobstacle_lat[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[0].Lat;
                                make_roadandobstacle_lon[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[0].Lng;
                            }
                            else//与3-4交叉往3方向转
                            {
                                yesornot_pensa_flag[All_FieldAndObstacle_Point] = 1;//有障碍点第二次遇到障碍置1
                                make_roadandobstacle_lat[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[2].Lat;
                                make_roadandobstacle_lon[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[2].Lng;
                                All_FieldAndObstacle_Point++;
                                yesornot_pensa_flag[All_FieldAndObstacle_Point] = 1;//有障碍点第三次遇到障碍置1
                                make_roadandobstacle_lat[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[1].Lat;
                                make_roadandobstacle_lon[All_FieldAndObstacle_Point] = Square_FirstToFourth_Point[1].Lng;
                            }
                            All_FieldAndObstacle_Point++;
                            yesornot_pensa_flag[All_FieldAndObstacle_Point] = 0;//有障碍点第四次遇到障碍置0
                            make_roadandobstacle_lat[All_FieldAndObstacle_Point] = IntersectionFirst_Point_Lat;
                            make_roadandobstacle_lon[All_FieldAndObstacle_Point] = IntersectionFirst_Point_Lon;
                            All_FieldAndObstacle_Point++;
                            yesornot_pensa_flag[All_FieldAndObstacle_Point] = 0;//有障碍点第五次遇到障碍置0
                            make_roadandobstacle_lat[All_FieldAndObstacle_Point] = make_road_lat[i + 1];
                            make_roadandobstacle_lon[All_FieldAndObstacle_Point] = make_road_lon[i + 1];
                            All_FieldAndObstacle_Point++;
                        }

                    }
                    else
                    {
                        yesornot_pensa_flag[All_FieldAndObstacle_Point] = 0;//无障碍点直接给0喷洒
                        make_roadandobstacle_lat[All_FieldAndObstacle_Point]=make_road_lat[i];
                        make_roadandobstacle_lon[All_FieldAndObstacle_Point]=make_road_lon[i];
                        All_FieldAndObstacle_Point++;
                        yesornot_pensa_flag[All_FieldAndObstacle_Point] = 0;//无障碍点直接给0喷洒
                        make_roadandobstacle_lat[All_FieldAndObstacle_Point]=make_road_lat[i+1];
                        make_roadandobstacle_lon[All_FieldAndObstacle_Point]=make_road_lon[i+1];
                        All_FieldAndObstacle_Point++;
                    }
                }
                for (int j = 0; j < All_FieldAndObstacle_Point - 1; j++)
                {
                    PointLatLng Waypoint = new PointLatLng();	//Waypoint位置
                    Waypoint.Lat = make_roadandobstacle_lat[j];
                    Waypoint.Lng = make_roadandobstacle_lon[j];
                    make_road_lat[j] = make_roadandobstacle_lat[j];//恢复到用原来的空间存储
                    make_road_lon[j] = make_roadandobstacle_lon[j];
                    WaypointAndPathMakeAdd_X(Waypoint, 0);
                }
                AreaChoose_MissionDel_X(0);//这边是ABC区域marker基准点
                if (All_FieldAndObstacle_Point > 100)
                {
                    AreaChooseMarkerMessionAdd_X();//这边是ABC区域marker基准点
                    Function_Area_BeyondFifty(All_FieldAndObstacle_Point-1);//如果路点数目超过100个点需要划分区域
                }
                Record_Info_Show(All_FieldAndObstacle_Point-1);
            }
          //else
          //{
          //    for (int j = 0; j < All_Field_Point; j++)
          //    {
          //        PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
          //        Waypoint.Lat = make_road_lat[j];
          //        Waypoint.Lng = make_road_lon[j];
          //        WaypointAndPathMakeAdd_X(Waypoint, 0);
          //    }
          //    AreaChoose_MissionDel_X(0);//这边是ABC区域marker基准点
          //    if (All_Field_Point > 50)
          //    {
          //        AreaChooseMarkerMessionAdd_X();//这边是ABC区域marker基准点
          //        Function_Area_BeyondFifty(All_Field_Point);//如果路点数目超过50个点需要划分区域
          //    }
          //}
////////////////////////////////////添加障碍点//////////////////////////////////////////////////////////

            return true;
        }
        private bool Function_Clc_IfSatisfy(double IntersectionFirst_Point_Lat, double IntersectionFirst_Point_Lon, double IntersectionSecond_Point_Lat, double IntersectionSecond_Point_Lon)
        {
            if( Math.Max(Square_FirstToFourth_Point[0].Lat,Square_FirstToFourth_Point[1].Lat)>=IntersectionFirst_Point_Lat &&
                Math.Min(Square_FirstToFourth_Point[0].Lat,Square_FirstToFourth_Point[1].Lat)<=IntersectionFirst_Point_Lat &&
                Math.Max(Square_FirstToFourth_Point[0].Lng, Square_FirstToFourth_Point[1].Lng) >= IntersectionFirst_Point_Lon &&
                Math.Min(Square_FirstToFourth_Point[0].Lng, Square_FirstToFourth_Point[1].Lng) <= IntersectionFirst_Point_Lon &&
                Math.Max(Square_FirstToFourth_Point[2].Lat, Square_FirstToFourth_Point[3].Lat) >= IntersectionSecond_Point_Lat &&
                Math.Min(Square_FirstToFourth_Point[2].Lat, Square_FirstToFourth_Point[3].Lat) <= IntersectionSecond_Point_Lat &&
                Math.Max(Square_FirstToFourth_Point[2].Lng, Square_FirstToFourth_Point[3].Lng) >= IntersectionSecond_Point_Lon &&
                Math.Min(Square_FirstToFourth_Point[2].Lng, Square_FirstToFourth_Point[3].Lng) <= IntersectionSecond_Point_Lon
                )
            {

                ///////////////////////////计算多边形面积//////////////////////////////////
                bool first_state = IsInside(IntersectionFirst_Point_Lat, IntersectionFirst_Point_Lon);
                bool second_state = IsInside(IntersectionSecond_Point_Lat, IntersectionSecond_Point_Lon);
                if (first_state == true && second_state==true)
                {
                    return true;
                }
                return false;
            }
            else
            {
                return false;
            }
        }
        public bool IsInside(double x_lat,double y_lng)
        {
            int count = ProjectList_Marker[0].WaypointData.Count;
            if (count < 3)
            {
                return false;
            }
            bool result = false;
            for (int i = 0, j = count - 1; i < count; i++)
            {
                PointLatLng p1 = new PointLatLng();
                PointLatLng p2 = new PointLatLng();	
                p1.Lat = zhf_lat[i];
                p1.Lng = zhf_lon[i];
                p2.Lat = zhf_lat[j];
                p2.Lng = zhf_lon[j];
                if (p1.Lat < x_lat && p2.Lat >= x_lat || p2.Lat < x_lat && p1.Lat >= x_lat)
                {
                    if (p1.Lng + (x_lat - p1.Lat) / (p2.Lat - p1.Lat) * (p2.Lng - p1.Lng) < y_lng)
                    {
                        result = !result;
                    }
                }
                j = i;
            }
            return result;
        }
        private void Function_Obstacle_Area(double Get_Lat_Value,double Get_Lon_Value,double Get_Radius_Value,double Get_Angle)
        {
            ///////////////////////////////四边形四个顶点//////////////////////////////////////////////////////////////////
            UpdateMeterPerDeg(Get_Lat_Value, Get_Lon_Value);//更新每经纬度对应的距离值
            PointLatLng Square_Middle_Point = new PointLatLng();
            /*******************************************求取当前点向前对应半径的目标中间经纬度点***************************************/
            Square_Middle_Point.Lng = Get_Lon_Value + (((double)(Get_Radius_Value) * Math.Sin(Get_Angle)) / (m_dMeterPerDeg_Longitude));
            Square_Middle_Point.Lat = Get_Lat_Value + (((double)(Get_Radius_Value) * Math.Cos(Get_Angle)) / (m_dMeterPerDeg_Latitude));
            /*******************************************求取矩形区域第一个点****************************************************/
            Square_FirstToFourth_Point[0].Lng = Square_Middle_Point.Lng - (((double)Get_Radius_Value * Math.Cos(Get_Angle)) / (m_dMeterPerDeg_Longitude));
            Square_FirstToFourth_Point[0].Lat = Square_Middle_Point.Lat + (((double)Get_Radius_Value * Math.Sin(Get_Angle)) / (m_dMeterPerDeg_Latitude));
            /*********************************************求取矩形区域第二个点*******************************************************/
            Square_FirstToFourth_Point[1].Lng = Square_Middle_Point.Lng + (((double)Get_Radius_Value * Math.Cos(Get_Angle)) / (m_dMeterPerDeg_Longitude));
            Square_FirstToFourth_Point[1].Lat = Square_Middle_Point.Lat - (((double)Get_Radius_Value * Math.Sin(Get_Angle)) / (m_dMeterPerDeg_Latitude));
            /*******************************************求取当前点向后对应半径的目标中间经纬度点***************************************/
            Square_Middle_Point.Lng = Get_Lon_Value - (((double)(Get_Radius_Value) * Math.Sin(Get_Angle)) / (m_dMeterPerDeg_Longitude));
            Square_Middle_Point.Lat = Get_Lat_Value - (((double)(Get_Radius_Value) * Math.Cos(Get_Angle)) / (m_dMeterPerDeg_Latitude));
            /*******************************************求取矩形区域第三个点****************************************************/
            Square_FirstToFourth_Point[2].Lng = Square_Middle_Point.Lng + (((double)Get_Radius_Value * Math.Cos(Get_Angle)) / (m_dMeterPerDeg_Longitude));
            Square_FirstToFourth_Point[2].Lat = Square_Middle_Point.Lat - (((double)Get_Radius_Value * Math.Sin(Get_Angle)) / (m_dMeterPerDeg_Latitude));
            /*********************************************求取矩形区域第四个点*******************************************************/
            Square_FirstToFourth_Point[3].Lng = Square_Middle_Point.Lng - (((double)Get_Radius_Value * Math.Cos(Get_Angle)) / (m_dMeterPerDeg_Longitude));
            Square_FirstToFourth_Point[3].Lat = Square_Middle_Point.Lat + (((double)Get_Radius_Value * Math.Sin(Get_Angle)) / (m_dMeterPerDeg_Latitude));

            //AutoWing_MissionDel_X(0);//这边是区域marker基准点
            //AutoWingMarkerMessionAdd_X();//这边是区域marker基准点
            //for(int i=0;i<4;i++)
            //{

            //    PointLatLng Waypoint = new PointLatLng();
            //    Waypoint.Lat = Square_FirstToFourth_Point[i].Lat;
            //    Waypoint.Lng = Square_FirstToFourth_Point[i].Lng;
            //    Autowing_WaypointAndPathAdd2_X(Waypoint, 0);		// Waypoint追加
            //}
        }
/// <summary>
        /// /距离换算每经纬度
/// </summary>
        private void UpdateMeterPerDeg(double Org_Latitude,double Org_Longitude)
        {	
	        const double	GPS_ELLIPSOID_A	= 6378137.0;
	        const double	GPS_ELLIPSOID_F	= 0.00335281066475;
	        const double	GPS_ELLIPSOID_B	= (GPS_ELLIPSOID_A*(1 - GPS_ELLIPSOID_F) );
	        double	dPseudoLatitudeRad, dDistanceFromCE;
	        double	dSin, dCos;
	        if(Org_Latitude == 90.0 || Org_Latitude == -90.0)
		        dPseudoLatitudeRad	= Org_Latitude*2.0*3.14159265358979/360.0;
	        else
		        dPseudoLatitudeRad	= Math.Atan((1.0 - GPS_ELLIPSOID_F)*(1.0 - GPS_ELLIPSOID_F)*Math.Tan(Org_Latitude*2.0*3.14159265358979/360.0) );
	        dSin	= Math.Sin(dPseudoLatitudeRad);
	        dCos	= Math.Cos(dPseudoLatitudeRad);
	        dDistanceFromCE	= GPS_ELLIPSOID_A*GPS_ELLIPSOID_B/Math.Sqrt(GPS_ELLIPSOID_A*GPS_ELLIPSOID_A*dSin*dSin + GPS_ELLIPSOID_B*GPS_ELLIPSOID_B*dCos*dCos);
	        m_dMeterPerDeg_Latitude	= (2.0*3.14159265358979/360.0)*dDistanceFromCE;
	        m_dMeterPerDeg_Longitude	= m_dMeterPerDeg_Latitude*dCos;
        }
        private void Function_Area_BeyondFifty(int Area_All_Field_Point)
        {
            double usedarea_lat=0.0;
            double usedarea_lon=0.0;
            int Center_First_ID = 0;
            int Center_Second_ID = 0;
            Area_Count = (int)(Area_All_Field_Point / 100.0);
            if((Area_All_Field_Point % 100.0)>0.0)
            {
                Area_Count = (Area_Count + 1);
            }
            for(int i=0;i<Area_Count;i++)
            {
                switch (i)
                {
                    case 0:
                        // 大于0小于100个点
                        if (Area_All_Field_Point>100)
                        {
                             usedarea_lat = (make_road_lat[49] + make_road_lat[50]) / 2.0;
                             usedarea_lon = (make_road_lon[49] + make_road_lon[50]) / 2.0;
                             AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);
                        }
                        else
                        {
                             Center_First_ID = (int)((Area_All_Field_Point) / 2.0);
                             Center_Second_ID = (Center_First_ID-2);
                             usedarea_lat = (make_road_lat[Center_First_ID] + make_road_lat[Center_Second_ID]) / 2.0;
                             usedarea_lon = (make_road_lon[Center_First_ID] + make_road_lon[Center_Second_ID]) / 2.0;
                             AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);
                        }
                        break;
                    case 1:
                        // 大于100小于200个点
                        if (Area_All_Field_Point > 200)
                        {
                            usedarea_lat = (make_road_lat[149] + make_road_lat[150]) / 2.0;
                            usedarea_lon = (make_road_lon[149] + make_road_lon[150]) / 2.0;
                            AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);
                        }
                        else
                        {
                           Center_First_ID = (99+(int)((Area_All_Field_Point - 99) / 2.0));
                           Center_Second_ID = ((Center_First_ID-2));
                           usedarea_lat = (make_road_lat[Center_First_ID] + make_road_lat[Center_Second_ID]) / 2.0;
                           usedarea_lon = (make_road_lon[Center_First_ID] + make_road_lon[Center_Second_ID]) / 2.0;
                           AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);
                        }
                        break;
                    case 2:
                        // 大于200小于300个点
                        if (Area_All_Field_Point > 300)
                        {
                           usedarea_lat = (make_road_lat[249] + make_road_lat[250]) / 2.0;
                           usedarea_lon = (make_road_lon[249] + make_road_lon[250]) / 2.0;
                           AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);
                        }
                        else
                        {
                           Center_First_ID = (199 + (int)((Area_All_Field_Point - 199) / 2.0));
                           Center_Second_ID = ((Center_First_ID -2));
                           usedarea_lat = (make_road_lat[Center_First_ID] + make_road_lat[Center_Second_ID]) / 2.0;
                           usedarea_lon = (make_road_lon[Center_First_ID] + make_road_lon[Center_Second_ID]) / 2.0;
                           AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);
                        }
                        break;
                    case 3:
                        // 大于150小于200个点
                        if (Area_All_Field_Point > 400)
                        {
                           usedarea_lat = (make_road_lat[349] + make_road_lat[350]) / 2.0;
                           usedarea_lon = (make_road_lon[349] + make_road_lon[350]) / 2.0;
                           AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);
                        }
                        else
                        {

                            Center_First_ID = (299 + (int)((Area_All_Field_Point - 299) / 2.0));
                            Center_Second_ID = ((Center_First_ID -2));
                            usedarea_lat = (make_road_lat[Center_First_ID] + make_road_lat[Center_Second_ID]) / 2.0;
                            usedarea_lon = (make_road_lon[Center_First_ID] + make_road_lon[Center_Second_ID]) / 2.0;
                            AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);

                        }
                        break;
                    case 4:
                        // 大于200小于250个点
                        if (Area_All_Field_Point > 500)
                        {


                            usedarea_lat = (make_road_lat[449] + make_road_lat[450]) / 2.0;
                            usedarea_lon = (make_road_lon[449] + make_road_lon[450]) / 2.0;
                            AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);


                        }
                        else
                        {


                            Center_First_ID = (399 + (int)((Area_All_Field_Point - 399) / 2.0));
                            Center_Second_ID = ((Center_First_ID - 2));
                            usedarea_lat = (make_road_lat[Center_First_ID] + make_road_lat[Center_Second_ID]) / 2.0;
                            usedarea_lon = (make_road_lon[Center_First_ID] + make_road_lon[Center_Second_ID]) / 2.0;
                            AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);

                        }
                        break;
                    //case 5:
                    //    // 大于250个点小于300个点
                    //    if (Area_All_Field_Point > 300)
                    //    {


                    //            usedarea_lat = (make_road_lat[274] + make_road_lat[275]) / 2.0;
                    //            usedarea_lon = (make_road_lon[274] + make_road_lon[275]) / 2.0;
                    //            AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);


                    //    }
                    //    else
                    //    {


                    //        Center_First_ID = (249 + (int)((Area_All_Field_Point - 249) / 2.0));
                    //        Center_Second_ID = ((Center_First_ID -2));
                    //        usedarea_lat = (make_road_lat[Center_First_ID] + make_road_lat[Center_Second_ID]) / 2.0;
                    //        usedarea_lon = (make_road_lon[Center_First_ID] + make_road_lon[Center_Second_ID]) / 2.0;
                    //        AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);

                    //    }
                    //    break;
                    //case 6:
                    //    // 大于300个点小于350个点
                    //    if (Area_All_Field_Point > 350)
                    //    {



                    //            usedarea_lat = (make_road_lat[324] + make_road_lat[325]) / 2.0;
                    //            usedarea_lon = (make_road_lon[324] + make_road_lon[325]) / 2.0;
                    //            AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);


                    //    }
                    //    else
                    //    {

                    //        Center_First_ID = (299 + (int)((Area_All_Field_Point - 299) / 2.0));
                    //        Center_Second_ID = ((Center_First_ID -2));
                    //        usedarea_lat = (make_road_lat[Center_First_ID] + make_road_lat[Center_Second_ID]) / 2.0;
                    //        usedarea_lon = (make_road_lon[Center_First_ID] + make_road_lon[Center_Second_ID]) / 2.0;
                    //        AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);

                    //    }
                    //    break;
                    //case 7:
                    //    // 大于350个点小于400个点
                    //    if (Area_All_Field_Point > 400)
                    //    {

                    //            usedarea_lat = (make_road_lat[374] + make_road_lat[375]) / 2.0;
                    //            usedarea_lon = (make_road_lon[374] + make_road_lon[375]) / 2.0;
                    //            AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);


                    //    }
                    //    else
                    //    {


                    //        Center_First_ID = (349 + (int)((Area_All_Field_Point - 349) / 2.0));
                    //        Center_Second_ID = ((Center_First_ID -2));
                    //        usedarea_lat = (make_road_lat[Center_First_ID] + make_road_lat[Center_Second_ID]) / 2.0;
                    //        usedarea_lon = (make_road_lon[Center_First_ID] + make_road_lon[Center_Second_ID]) / 2.0;
                    //        AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);

                    //    }
                    //    break;
                    //case 8:
                    //    // 大于400个点小于450个点
                    //    if (Area_All_Field_Point > 450)
                    //    {


                    //            usedarea_lat = (make_road_lat[424] + make_road_lat[425]) / 2.0;
                    //            usedarea_lon = (make_road_lon[424] + make_road_lon[425]) / 2.0;
                    //            AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);


                    //    }
                    //    else
                    //    {


                    //        Center_First_ID = (399 + (int)((Area_All_Field_Point - 399) / 2.0));
                    //        Center_Second_ID = ((Center_First_ID -2));
                    //        usedarea_lat = (make_road_lat[Center_First_ID] + make_road_lat[Center_Second_ID]) / 2.0;
                    //        usedarea_lon = (make_road_lon[Center_First_ID] + make_road_lon[Center_Second_ID]) / 2.0;
                    //        AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);

                    //    }
                    //    break;
                    //case 9:
                    //    // 大于450个点小于500个点
                    //    if (Area_All_Field_Point > 500)
                    //    {


                    //            usedarea_lat = (make_road_lat[474] + make_road_lat[475]) / 2.0;
                    //            usedarea_lon = (make_road_lon[474] + make_road_lon[475]) / 2.0;
                    //            AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);


                    //    }
                    //    else
                    //    {
                    //        Center_First_ID = (449 + (int)((Area_All_Field_Point - 449) / 2.0));
                    //        Center_Second_ID = ((Center_First_ID -2));
                    //        usedarea_lat = (make_road_lat[Center_First_ID] + make_road_lat[Center_Second_ID]) / 2.0;
                    //        usedarea_lon = (make_road_lon[Center_First_ID] + make_road_lon[Center_Second_ID]) / 2.0;
                    //        AreaChoose_WaypointAndPathAdd_X(usedarea_lat, usedarea_lon);

                    //    }
                    //    break;
                    default:
                        break;
                }
            }
        }

        private void WaypointAndPathMakeAdd_X(PointLatLng Waypoint, int _baseSelect)
        {
            try
            {
                int _id = ProjectList_X[BaseSelect].WaypointData.Count + 1;
                WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                WaypointMarkerAdd_X(ProjectList_X[BaseSelect].WaypointData[_id - 1], _id);	// WaypointMarker追加
                WaypointPathAdd_X(ProjectList_X[BaseSelect].WaypointMarker[_id - 1]);	// Path追加
            }
            catch
            {

            }
        }
        private double Land_Distance(double lat1, double lng1, double lat2, double lng2)
        {
            double radLat1 = radian(lat1);
            double radLat2 = radian(lat2);
            double a = radLat1 - radLat2;
            double b = radian(lng1) - radian(lng2);
            double dst = 0.0;
            dst = 2 * Math.Asin((Math.Sqrt(Math.Pow(Math.Sin(a / 2), 2) + Math.Cos(radLat1) * Math.Cos(radLat2) * Math.Pow(Math.Sin(b / 2), 2))));
            dst = dst * 6378.137;
            dst = Math.Round(dst * 10000) / 10000;
            return dst;
        }
        private double radian(double d)
        {
            return d * 3.1415926 / 180.0;   //角度1˚ = π / 180 
        }
        private void Button_PlanSave_Click(object sender, RoutedEventArgs e)
        {
            SavePlanMissionDocument();
        }
        private void SavePlanMissionDocument(string _filePath = "")
        {
            try
            {
                if (Constants.Style_Change_HangPaiAndZhiBao_Flag==0)
                {
                    if (ProjectList_Marker.Count > 0)
                    {
                        if (ProjectList_Marker[0].WaypointData.Count > 0)
                        {
                            // Configure save file dialog
                            Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog();
                            dlg.FileName = "FlightPlanning_" + DateTime.Now.Year.ToString("0000")
                                                    + DateTime.Now.Month.ToString("00")
                                                    + DateTime.Now.Day.ToString("00")
                                                    + "_" + DateTime.Now.Hour.ToString("00")
                                                    + DateTime.Now.Minute.ToString("00");   // Default file name
                            dlg.DefaultExt = ".txt";					                            // Default file extension
                            dlg.InitialDirectory = "C:\\AutoWing\\";
                            dlg.Filter = "MultiWaypoint Project|*.txt";//"Y-Planner Project|*.txt|MultiWaypoint Project|*.txt";	                                    // Filter files by extension
                            _logger.Info("SaveDocument:" + _filePath);
                            // Show save file dialog
                            if (_filePath != "")
                            {

                            }
                            else
                            {
                                Nullable<bool> result = dlg.ShowDialog();
                                // Process save file dialog results
                                if (result == true)
                                {
                                    // 另存为
                                    FilePath = dlg.FileName;
                                    StreamWriter sw = new StreamWriter(FilePath);
                                    sw.WriteLine("Waypoints File");//可用文件的标识
                                    if (ProjectList_Marker[0].WaypointData.Count < 3)
                                    {
                                        Fly_PenSa_Radius = 0.0;
                                    }
                                    sw.WriteLine(Fly_PenSa_Radius.ToString("#0"));//保存喷洒半径
                                    for (int i = 0; i < ProjectList_Marker[0].WaypointData.Count; i++)
                                    {
                                        sw.WriteLine(ProjectList_Marker[0].WaypointData[i].Longitude.ToString());//保存经度
                                        sw.WriteLine(ProjectList_Marker[0].WaypointData[i].Latitude.ToString());//保存纬度
                                    }
                                    ///////////////////////////////////////////////保存障碍点及障碍半径//////////////////////////////////////////////////////////
                                    sw.WriteLine(Constants.Used_Obstacle_Lng.ToString());//保存经度
                                    sw.WriteLine(Constants.Used_Obstacle_Lat.ToString());//保存纬度
                                    sw.WriteLine(Constants.Used_Obstacle_Radius.ToString());//半径
                                    ////////////////////////////////////////////////保存内缩半径/////////////////////////////////////////////////////////////////
                                    sw.WriteLine(Constants.Retracted_Dis.ToString());//内缩半径
                                    sw.Flush();
                                    sw.Close();
                                    System.Windows.MessageBox.Show("Save Success");
                                }
                            }
                        }
                        else
                        {
                            System.Windows.MessageBox.Show("Have No Correct Plan");
                        }

                    }
                    else
                    {
                        System.Windows.MessageBox.Show("Please Make The Plan To Save");
                    }
                }
                else
                {
                    if (ProjectList_X.Count > 0)
                    {
                        if (ProjectList_X[0].WaypointData.Count > 0)
                        {
                            // Configure save file dialog
                            Microsoft.Win32.SaveFileDialog dlg = new Microsoft.Win32.SaveFileDialog();
                            dlg.FileName = "FlightPlanningHangPai_" + DateTime.Now.Year.ToString("0000")
                                                    + DateTime.Now.Month.ToString("00")
                                                    + DateTime.Now.Day.ToString("00")
                                                    + "_" + DateTime.Now.Hour.ToString("00")
                                                    + DateTime.Now.Minute.ToString("00");   // Default file name

                            dlg.DefaultExt = ".txt";					                            // Default file extension
                            dlg.InitialDirectory = "C:\\AutoWing\\";
                            dlg.Filter = "MultiWaypoint Project|*.txt";//"Y-Planner Project|*.ypp|MultiWaypoint Project|*.txt";	                                    // Filter files by extension
                            _logger.Info("SaveDocument:" + _filePath);
                            // Show save file dialog
                            if (_filePath != "")
                            {

                            }
                            else
                            {
                                Nullable<bool> result = dlg.ShowDialog();
                                if (result == true)
                                {
                                    FilePath = dlg.FileName;
                                    StreamWriter sw = new StreamWriter(FilePath);
                                    sw.WriteLine("Aerial File");//可用文件的标识
                                    for (int i = 0; i < ProjectList_X[0].WaypointData.Count; i++)
                                    {
                                        sw.WriteLine(ProjectList_X[0].WaypointData[i].Longitude.ToString());//保存经度
                                        sw.WriteLine(ProjectList_X[0].WaypointData[i].Latitude.ToString());//保存纬度
                                        //////////////////////////////////////////////路点设置、保留、高度、航向、横向速度、纵上速度、纵下速度、悬停、保留////////////////////////////////
                                        sw.WriteLine(WayPoint_SetIndex[i].ToString());
                                        sw.WriteLine(WayPoint_KeepIndex1[i].ToString());
                                        sw.WriteLine(WayPoint_Height[i].ToString());
                                        sw.WriteLine(WayPoint_Yaw[i].ToString());
                                        sw.WriteLine(WayPoint_HengxiangSudu[i].ToString());
                                        sw.WriteLine(WayPoint_ZongshangSudu[i].ToString());
                                        sw.WriteLine(WayPoint_ZongxiaSudu[i].ToString());
                                        sw.WriteLine(WayPoint_HoverTimer[i].ToString());
                                        sw.WriteLine(WayPoint_KeepIndex2[i].ToString());
                                    }
                                    sw.Flush();
                                    sw.Close();
                                    System.Windows.MessageBox.Show("Save Success");
                                }
                            }
                        }
                        else
                        {
                            System.Windows.MessageBox.Show("Have No Correct Plan");
                        }
                    }
                    else
                    {
                        System.Windows.MessageBox.Show("Please Make The Plan To Save");
                    }
                }
 
            }
            catch (Exception ex)
            {
                System.Windows.MessageBox.Show("(403) FlightPlanning Save Error : " + ex.Message);
                _logger.Error("(403) FlightPlanning Save Error : " + ex.Message);
            }

        }
        private void textBox1_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            Regex re = new Regex("[^0-9.-]+");
            e.Handled = re.IsMatch(e.Text);
        }
        private double Rotation_Angle(float radian_to_angle)
        {
            double real_angle = 0.0;
            if (-3.1415926 <= radian_to_angle && radian_to_angle <= 0)
            {
                real_angle = (-radian_to_angle) * 180 / 3.1415926;
            }
            else
            {
                real_angle = 360.0 - radian_to_angle * 180 / 3.1415926;
            }
            return real_angle;
        }
        private void Uav_WayPoint_X(object sender, MouseButtonEventArgs e)
        {
            if (Lock_Marker_Flag == false)
            {
                Marker_Set_Heading = 0.0;
                Marker_Set_Height = 0.0;
                Marker_Set_Velocity = 0.0;
                if (ProjectList_X.Count != 0)
                {
                    if (ProjectList_X[BaseSelect].WaypointData.Count >= _maxMultiWaypoint_X)
                    {
                        System.Windows.MessageBox.Show("(000) The Number Of Navigational Points Has Reached The Upper Limit");
                        return;
                    }
                    if (DrawMode_X == 0)
                    {
                        p1_X = new System.Windows.Point();
                        p1_X = e.GetPosition(MainMap);
                    }
                    WaypointDraw_X(DrawMode_X, e.LeftButton, p1_X, p2_X);
                }
            }
        }
        private void WaypointDraw_X(int _mode, MouseButtonState _bState, System.Windows.Point _p1, System.Windows.Point _p2)
        {
            try
            {
                switch (_mode)
                {
                    case 0:
                        // 标准
                        if (PointCount == 0) StandardDraw_X(_p1, _bState);
                        break;
                    //case 1:
                    //    // 线
                    //    if (PointCount >= 1) LineDraw(_p1, _p2, (int)NumberOfPartitionsValue1.Value, true);
                    //    break;
                    //case 2:
                    //    // 四角
                    //    if (PointCount >= 1) RectangleDraw(_p1, _p2, (int)NumberOfPartitionsValue1.Value, (int)NumberOfPartitionsValue2.Value);
                    //    break;
                    //case 3:
                    //    // 圆
                    //    if (PointCount >= 1) CircleDraw(_p1, _p2, (int)NumberOfPartitionsValue1.Value);
                    //    break;
                    //case 4:
                    //    // 往复1
                    //    if (PointCount >= 1) ReturnDraw1(_p1, _p2, (int)NumberOfPartitionsValue1.Value, (int)NumberOfPartitionsValue2.Value);
                    //    break;
                    //case 5:
                    //    // 往復2
                    //    if (PointCount >= 1) ReturnDraw2(_p1, _p2, (int)NumberOfPartitionsValue1.Value, (int)NumberOfPartitionsValue2.Value);
                    //    break;
                    default:
                        break;
                }
                //  AltitudePropertyValue.AltitudeUpdate();
                // ProjectRecord.Add(ProjectDeepCopy(ProjectList));
                //  WaypointValueChanged(BaseSelect);
            }
            catch
            {

            }
        }
        private void StandardDraw_X(System.Windows.Point _p, MouseButtonState _bState)
        {
            if (Keyboard.Modifiers != ModifierKeys.Control)
            {
                WaypointSelect_X.Clear();
            }
            if ((_bState == MouseButtonState.Pressed) /*&& (SettingData.DeviceMode == true)*/)
            {
                if (ProjectList_X.Count > 0)
                {

                    if (Constants.Style_Change_HangPaiAndZhiBao_Flag == 0)
                    {
                        if (Constants.Obstacle_StartAdd_Flag == 0)///障碍点功能未开启时才能调用
                        {
                            WaypointAndPathAdd_X(_p, BaseSelect);		// Waypoint追加
                            ////////////////////////////增加手动点击的marker////////////////////////////////////////////
                            Autowing_WaypointAndPathAdd_X(_p, 0);		// Waypoint追加
                            if (ProjectList_Marker[0].WaypointData.Count > 2)
                            {
                                Make_MultiPenSa_Plan();
                            }
                            ////////////////////////////增加距离的marker//////////////////////////////////////////////////
                            if (ProjectList_Marker[0].WaypointData.Count > 1)
                            {
                                Distance_WaypointAndPathAdd_X();		// Waypoint追加
                            }
                        }
                        else//障碍点功能开启的话就只添加障碍点
                        {
                            //////////////////////////////////////////////////先将相关的障碍点的值在属性框中显示/////////////////////////////////////////////
                            for (int i = 0; i < Container.Children.Count; i++)
                            {
                                if (OptionWindowEvent)
                                {
                                    break;
                                }
                                if (Container.Children[i].Content.GetType() == typeof(Plan_FineTuning))
                                {
                                    PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                                    Waypoint = MainMap.FromLocalToLatLng((int)_p.X, (int)_p.Y); //地图上的位置
                                    Constants.Used_Obstacle_Lat = Waypoint.Lat;//障碍点纬度
                                    Constants.Used_Obstacle_Lng = Waypoint.Lng;//障碍点经度
                                    Plan_FineTuning Child1 = (Plan_FineTuning)Container.Children[i].Content;
                                    Child1.Function_ChooseObstacleLatAndLng_Show();
                                    Constants.Used_Obstacle_Radius = Child1.Function_Get_ObstacleRadius();
                                    if (Constants.Used_Obstacle_Radius == 0)
                                    {
                                        Constants.Used_Obstacle_Radius = 1;
                                    }
                                }
                            }
                            ////////////////////////////有方案的话就将marker点的添加放在方案添加里面生成并且显示////////////////////////
                            if (ProjectList_Marker[0].WaypointData.Count > 2)
                            {
                                Make_MultiPenSa_Plan();
                                Obstacle_MissionDel_X(0);//这边是障碍点基准点
                                ObstacleMarkerMessionAdd_X();//这边是障碍点基准点
                                Obstacle_WaypointAndPathAdd_X(_p, 0);		// 障碍点追加
                            }
                            else
                            {
                                Obstacle_MissionDel_X(0);//这边是障碍点基准点
                                ObstacleMarkerMessionAdd_X();//这边是障碍点基准点
                                Obstacle_WaypointAndPathAdd_X(_p, 0);		// 障碍点追加
                            }
                            ////////////////////////////无方案的话就只添加障碍点的标识符并且将相关值传递给障碍点界面显示////////////////////////////////////////////////
                        }
                    }
                    else
                    {
                        WaypointAndPathAdd_X(_p, BaseSelect);		// Waypoint追加
                    }


                }
            }
            if (ProjectList_X[BaseSelect].WaypointMarker.Count > 0)
            {
                for (int i = 0; i < ProjectList_X[BaseSelect].WaypointMarker.Count; i++)
                {
                    if (WaypointSelect_X.Count > 0)
                    {
                        if (WaypointSelect_X[0] != ProjectList_X[BaseSelect].WaypointMarker[i].ID)
                        {
                            ProjectList_X[BaseSelect].WaypointMarker[i].Mode = -1;
                        }
                    }
                }
            }
        }
/// <summary>
/// 障碍点通过属性框添加
/// </summary>
        public void Function_Option_ObstacleAdd()
        {
            ////////////////////////////有方案的话就将marker点的添加放在方案添加里面生成并且显示////////////////////////
            if (ProjectList_X.Count > 0)
            {
                if (ProjectList_Marker[0].WaypointData.Count > 2)
                {
                    Make_MultiPenSa_Plan();
                    Obstacle_MissionDel_X(0);//这边是障碍点基准点
                    ObstacleMarkerMessionAdd_X();//这边是障碍点基准点
                    Obstacle_WaypointAndPathAdd_X2(Constants.Used_Obstacle_Lat, Constants.Used_Obstacle_Lng, 0);

                }
                else
                {
                    Obstacle_MissionDel_X(0);//这边是障碍点基准点
                    ObstacleMarkerMessionAdd_X();//这边是障碍点基准点
                    Obstacle_WaypointAndPathAdd_X2(Constants.Used_Obstacle_Lat, Constants.Used_Obstacle_Lng, 0);
                }
            }
            ////////////////////////////无方案的话就只添加障碍点的标识符并且将相关值传递给障碍点界面显示////////////////////////////////////////////////
        }
      /// <summary>
      /// 障碍点通过属性框删除
      /// </summary>
 
        public void Function_Option_ObstacleDelete()
        {
            ////////////////////////////有方案的话就将marker点的添加放在方案添加里面生成并且显示////////////////////////
            if (ProjectList_X.Count > 0)
            {
                if (ProjectList_Marker[0].WaypointData.Count > 2)
                {
                    Make_MultiPenSa_Plan();
                    Obstacle_MissionDel_X(0);//这边是障碍点基准点
                    ObstacleMarkerMessionAdd_X();//这边是障碍点基准点
                }
                else
                {
                    Obstacle_MissionDel_X(0);//这边是障碍点基准点
                    ObstacleMarkerMessionAdd_X();//这边是障碍点基准点
                }
            }
            ////////////////////////////无方案的话就只添加障碍点的标识符并且将相关值传递给障碍点界面显示////////////////////////////////////////////////
        }
        private void Autowing_WaypointAndPathAdd_X(System.Windows.Point _point, int _baseSelect)
        {
            try
            {
                PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                Waypoint = MainMap.FromLocalToLatLng((int)_point.X, (int)_point.Y); //地图上的位置
                int _id = ProjectList_Marker[0].WaypointData.Count + 1;
                AutoWing_WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                AutoWing_WaypointMarkerAdd_X(ProjectList_Marker[0].WaypointData[_id - 1], _id);	// WaypointMarker追加
            }
            catch
            {

            }
        }
        private void Obstacle_WaypointAndPathAdd_X(System.Windows.Point _point, int _baseSelect)
        {
            try
            {
                PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                Waypoint = MainMap.FromLocalToLatLng((int)_point.X, (int)_point.Y); //地图上的位置
                int _id = 1;
                Obstacle_WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                Obstacle_WaypointMarkerAdd_X(ProjectList_ObstacleInfo[0].WaypointData[_id - 1], _id);	// WaypointMarker追加
            }
            catch
            {

            }
        }
        private void Obstacle_WaypointAndPathAdd_X2(double lat ,double lon, int _baseSelect)
        {
            try
            {
                PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                Waypoint.Lat = lat;
                Waypoint.Lng = lon;
                int _id = 1;
                Obstacle_WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                Obstacle_WaypointMarkerAdd_X(ProjectList_ObstacleInfo[0].WaypointData[_id - 1], _id);	// WaypointMarker追加
            }
            catch
            {

            }
        }

        private void Distance_WaypointAndPathAdd_X()
        {
            try
            {
                /////////////清除之前的距离marker
                if (ProjectList_Distance.Count > 0)
                {
                    MapToMarkerClear_X(ProjectList_Distance[0].BaseMarker);
                    for (int j = 0; j < ProjectList_Distance[0].WaypointMarker.Count; j++)
                    {
                        MapToMarkerClear_X(ProjectList_Distance[0].WaypointMarker[j]);
                    }
                    MapToMarkerClear_X(ProjectList_Distance[0].WaypointPath);
                }
                DistanceMarkerMessionAdd_X();//这边是距离marker基准点

                for (int ii = 1; ii < ProjectList_Marker[0].WaypointData.Count; ii++)
                {
                    PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                    //////////////////////////////////计算两点之间的距离////////////////////////////////////////////////////////////
                    Extern_TwoPointDis = Land_Distance(ProjectList_Marker[0].WaypointData[ii - 1].Latitude, ProjectList_Marker[0].WaypointData[ii - 1].Longitude, ProjectList_Marker[0].WaypointData[ii].Latitude, ProjectList_Marker[0].WaypointData[ii].Longitude) * 1000.0;
                    Waypoint.Lat = (ProjectList_Marker[0].WaypointData[ii - 1].Latitude + ProjectList_Marker[0].WaypointData[ii].Latitude) / 2.0;
                    Waypoint.Lng = (ProjectList_Marker[0].WaypointData[ii - 1].Longitude + ProjectList_Marker[0].WaypointData[ii].Longitude) / 2.0;
                    int _id = ProjectList_Distance[0].WaypointData.Count + 1;
                    Distance_WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                    Distance_WaypointMarkerAdd_X(ProjectList_Distance[0].WaypointData[_id - 1], _id);	// WaypointMarker追加
                }
                ///////////////针对超过两个点的时候要把第一个点和最后一个点连接
                if (ProjectList_Marker[0].WaypointData.Count > 2)
                {
                    PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                    Extern_TwoPointDis = Land_Distance(ProjectList_Marker[0].WaypointData[0].Latitude, ProjectList_Marker[0].WaypointData[0].Longitude, ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Latitude, ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Longitude) * 1000.0;
                    Waypoint.Lat = (ProjectList_Marker[0].WaypointData[0].Latitude + ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Latitude) / 2.0;
                    Waypoint.Lng = (ProjectList_Marker[0].WaypointData[0].Longitude + ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Longitude) / 2.0;
                    int _id = ProjectList_Distance[0].WaypointData.Count + 1;
                    Distance_WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                    Distance_WaypointMarkerAdd_X(ProjectList_Distance[0].WaypointData[_id - 1], _id);	// WaypointMarker追加
                }



                //if(ProjectList_Marker[0].WaypointData.Count>1)
                //{
                //    PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                //    //////////////////////////////////计算两点之间的距离////////////////////////////////////////////////////////////
                //    Extern_TwoPointDis = Land_Distance(ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 2].Latitude, ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 2].Longitude, ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Latitude, ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Longitude)*1000.0;
                //    Waypoint.Lat = (ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 2].Latitude + ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count-1].Latitude) / 2.0;
                //    Waypoint.Lng = (ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 2].Longitude + ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count-1].Longitude) / 2.0;
                //    int _id = ProjectList_Distance[0].WaypointData.Count + 1;
                //    Distance_WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                //    Distance_WaypointMarkerAdd_X(ProjectList_Distance[0].WaypointData[_id - 1], _id);	// WaypointMarker追加
                //}
                /////////////////针对超过两个点的时候要把第一个点和最后一个点连接
                //if(ProjectList_Marker[0].WaypointData.Count>2)
                //{
                //    PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                //    Extern_TwoPointDis = Land_Distance(ProjectList_Marker[0].WaypointData[0].Latitude, ProjectList_Marker[0].WaypointData[0].Longitude, ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Latitude, ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Longitude) * 1000.0;
                //    Waypoint.Lat = (ProjectList_Marker[0].WaypointData[0].Latitude + ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Latitude) / 2.0;
                //    Waypoint.Lng = (ProjectList_Marker[0].WaypointData[0].Longitude + ProjectList_Marker[0].WaypointData[ProjectList_Marker[0].WaypointData.Count - 1].Longitude) / 2.0;
                //    int _id = ProjectList_Distance[0].WaypointData.Count + 1;
                //    Distance_WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                //    Distance_WaypointMarkerAdd_X(ProjectList_Distance[0].WaypointData[_id - 1], _id);	// WaypointMarker追加
                //}
            }
            catch
            {

            }
        }

        private void AreaChoose_WaypointAndPathAdd_X(double areachoose_lat,double areachoose_lon)
        {
            try
            {
                if (ProjectList_AreaChoose.Count > 0)//ProjectList_X.Count 
                {
                    PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                    //////////////////////////////////计算两点之间的距离////////////////////////////////////////////////////////////
                    Waypoint.Lat = areachoose_lat;
                    Waypoint.Lng = areachoose_lon;
                    int _id = ProjectList_AreaChoose[0].WaypointData.Count + 1;
                    AreaChoose_WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                    AreaChoose_WaypointMarkerAdd_X(ProjectList_AreaChoose[0].WaypointData[_id - 1], _id);	// WaypointMarker追加
                }
            }
            catch
            {

            }
        }


        private void Autowing_WaypointAndPathAdd2_X(PointLatLng Waypoint, int _baseSelect)
        {

            try
            {
                int _id = ProjectList_Marker[BaseSelect].WaypointData.Count + 1;
                AutoWing_WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                AutoWing_WaypointMarkerAdd_X(ProjectList_Marker[BaseSelect].WaypointData[_id - 1], _id);	// WaypointMarker追加
            }
            catch
            {

            }
        }

        private void WaypointAndPathAdd2_X(PointLatLng Waypoint, int _baseSelect)
        {
            try
            {
                int _id = ProjectList_X[BaseSelect].WaypointData.Count + 1;
                WaypointAdd_X(Waypoint, _id);											// Wapoint管理情報追加
                WaypointMarkerAdd_X(ProjectList_X[BaseSelect].WaypointData[_id - 1], _id);	// WaypointMarker追加
                WaypointPathAdd_X(ProjectList_X[BaseSelect].WaypointMarker[_id - 1]);	// Path追加
            }
            catch
            {

            }
        }


        private void AutoWing_WaypointMarkerAdd_X(FlightPlanning.Waypoint _waypoint, int _id)
        {
            GMapMarker _marker = new GMapMarker(new PointLatLng(_waypoint.Latitude, _waypoint.Longitude));
            {
                _marker.Altitude = _waypoint.Height;
                _marker.Azimuth = _waypoint.Heading + ProjectList_Marker[0].MissionData.Rotation;
                _marker.Speed = _waypoint.Speed;
                _marker.Shape = new CustomMarkers.Waypoint(this, _marker, SettingData.DeviceMode, _id, false);
                _marker.Offset = new System.Windows.Point(-25, -40);
                _marker.ZIndex = int.MaxValue;
            }
            ProjectList_Marker[0].WaypointMarker.Add(_marker);
            MainMap.Markers.Add(ProjectList_Marker[0].WaypointMarker[_id - 1]);
        }

        private void Obstacle_WaypointMarkerAdd_X(FlightPlanning.Waypoint _waypoint, int _id)
        {
            GMapMarker _marker = new GMapMarker(new PointLatLng(_waypoint.Latitude, _waypoint.Longitude));
            {
                _marker.Altitude = _waypoint.Height;
                _marker.Azimuth = _waypoint.Heading + ProjectList_ObstacleInfo[0].MissionData.Rotation;
                _marker.Speed = _waypoint.Speed;
                _marker.Shape = new CustomMarkers.Obstacle_Marker(this, _marker, SettingData.DeviceMode, _id, false);
                _marker.Offset = new System.Windows.Point(-25, -40);
                _marker.ZIndex = int.MaxValue;
            }
            ProjectList_ObstacleInfo[0].WaypointMarker.Add(_marker);
            MainMap.Markers.Add(ProjectList_ObstacleInfo[0].WaypointMarker[_id - 1]);
        }
        /// <summary>
        /// 显示距离的marker
        /// </summary>
        /// <param name="_waypoint"></param>
        /// <param name="_id"></param>
        private void Distance_WaypointMarkerAdd_X(FlightPlanning.Waypoint _waypoint, int _id)
        {
            GMapMarker _marker = new GMapMarker(new PointLatLng(_waypoint.Latitude, _waypoint.Longitude));
            {
                _marker.Altitude = _waypoint.Height;
                _marker.Azimuth = _waypoint.Heading + ProjectList_Distance[0].MissionData.Rotation;
                _marker.Speed = _waypoint.Speed;
                _marker.Shape = new Marker_TwoPointDistance(this, _marker, Extern_TwoPointDis); ;
                _marker.Offset = new System.Windows.Point(0, -20);
                _marker.ZIndex = int.MaxValue;
            }
            ProjectList_Distance[0].WaypointMarker.Add(_marker);
            MainMap.Markers.Add(ProjectList_Distance[0].WaypointMarker[_id - 1]);
        }
        private void AreaChoose_WaypointMarkerAdd_X(FlightPlanning.Waypoint _waypoint, int _id)
        {
            GMapMarker _marker = new GMapMarker(new PointLatLng(_waypoint.Latitude, _waypoint.Longitude));
            {
                _marker.Altitude = _waypoint.Height;
                _marker.Azimuth = _waypoint.Heading + ProjectList_AreaChoose[0].MissionData.Rotation;
                _marker.Speed = _waypoint.Speed;
                if (_id==1)
                {
                    _marker.Shape = new Area_Choose(this, _marker, SettingData.DeviceMode, _id, true);//this, _marker, SettingData.DeviceMode, _id, false
                }
                else
                {
                    _marker.Shape = new Area_Choose(this, _marker, SettingData.DeviceMode, _id, false);//this, _marker, SettingData.DeviceMode, _id, false
                }

                _marker.Offset = new System.Windows.Point(0, -20);
                _marker.ZIndex = int.MaxValue;
            }
            ProjectList_AreaChoose[0].WaypointMarker.Add(_marker);
            MainMap.Markers.Add(ProjectList_AreaChoose[0].WaypointMarker[_id - 1]);
        }



        private void AutoWing_WaypointAdd_X(PointLatLng _point, int _id)
        {
            try
            {
                var _waypoint = new FlightPlanning.Waypoint();
                System.Windows.Point _p = FlightPlanXML.MeterPerLatLng(ProjectList_Marker[0].BaseMarker.Position, _point);
                int _count = ProjectList_Marker[0].WaypointData.Count;
                if (_count > 0)
                {
                    FlightPlanning.Waypoint _waypointList = new FlightPlanning.Waypoint()
                    {
                        ID = _id,
                        Name = "",
                        Latitude = _point.Lat,
                        Longitude = _point.Lng,
                        x = Math.Round(_p.X, 3, MidpointRounding.AwayFromZero),
                        y = Math.Round(_p.Y, 3, MidpointRounding.AwayFromZero),
                        Height = Marker_Set_Height,
                        Heading = Marker_Set_Heading,
                        ThreasholdH = ProjectList_Marker[0].WaypointData[_count - 1].ThreasholdH,
                        ThreasholdV = ProjectList_Marker[0].WaypointData[_count - 1].ThreasholdV,
                        Wait = ProjectList_Marker[0].WaypointData[_count - 1].Wait,
                        Function = 0,
                        Speed = Marker_Set_Velocity
                    };
                    ProjectList_Marker[0].WaypointData.Add(_waypointList);
                }
                else
                {
                    FlightPlanning.Waypoint _waypointList = new FlightPlanning.Waypoint()
                    {
                        ID = _id,
                        Name = "",
                        Latitude = _point.Lat,
                        Longitude = _point.Lng,
                        x = Math.Round(_p.X, 3, MidpointRounding.AwayFromZero),
                        y = Math.Round(_p.Y, 3, MidpointRounding.AwayFromZero),
                        Height = Marker_Set_Height,
                        Heading = Marker_Set_Heading,
                        Function = 0,
                        Speed = Marker_Set_Velocity
                    };
                    ProjectList_Marker[0].WaypointData.Add(_waypointList);
                }
            }
            catch
            {

            }
        }
      private void Obstacle_WaypointAdd_X(PointLatLng _point, int _id)
      {
            try
            {
                var _waypoint = new FlightPlanning.Waypoint();
                System.Windows.Point _p = FlightPlanXML.MeterPerLatLng(ProjectList_ObstacleInfo[0].BaseMarker.Position, _point);
                int _count = ProjectList_ObstacleInfo[0].WaypointData.Count;
                if (_count > 0)
                {
                    FlightPlanning.Waypoint _waypointList = new FlightPlanning.Waypoint()
                    {
                        ID = _id,
                        Name = "",
                        Latitude = _point.Lat,
                        Longitude = _point.Lng,
                        x = Math.Round(_p.X, 3, MidpointRounding.AwayFromZero),
                        y = Math.Round(_p.Y, 3, MidpointRounding.AwayFromZero),
                        Height = Marker_Set_Height,
                        Heading = Marker_Set_Heading,
                        ThreasholdH = ProjectList_ObstacleInfo[0].WaypointData[_count - 1].ThreasholdH,
                        ThreasholdV = ProjectList_ObstacleInfo[0].WaypointData[_count - 1].ThreasholdV,
                        Wait = ProjectList_ObstacleInfo[0].WaypointData[_count - 1].Wait,
                        Function = 0,
                        Speed = Marker_Set_Velocity
                    };
                    ProjectList_ObstacleInfo[0].WaypointData.Add(_waypointList);
                }
                else
                {
                    FlightPlanning.Waypoint _waypointList = new FlightPlanning.Waypoint()
                    {
                        ID = _id,
                        Name = "",
                        Latitude = _point.Lat,
                        Longitude = _point.Lng,
                        x = Math.Round(_p.X, 3, MidpointRounding.AwayFromZero),
                        y = Math.Round(_p.Y, 3, MidpointRounding.AwayFromZero),
                        Height = Marker_Set_Height,
                        Heading = Marker_Set_Heading,
                        Function = 0,
                        Speed = Marker_Set_Velocity
                    };
                    ProjectList_ObstacleInfo[0].WaypointData.Add(_waypointList);
                }
            }
            catch
            {

            }
      }
/// <summary>
/// 显示距离的marker
/// </summary>
/// <param name="sender"></param>
/// <param name="e"></param>
        private void Distance_WaypointAdd_X(PointLatLng _point, int _id)
        {
            try
            {
                var _waypoint = new FlightPlanning.Waypoint();
                System.Windows.Point _p = FlightPlanXML.MeterPerLatLng(ProjectList_Distance[0].BaseMarker.Position, _point);
                int _count = ProjectList_Distance[0].WaypointData.Count;
                if (_count > 0)
                {
                    FlightPlanning.Waypoint _waypointList = new FlightPlanning.Waypoint()
                    {
                        ID = _id,
                        Name = "",
                        Latitude = _point.Lat,
                        Longitude = _point.Lng,
                        x = Math.Round(_p.X, 3, MidpointRounding.AwayFromZero),
                        y = Math.Round(_p.Y, 3, MidpointRounding.AwayFromZero),
                        Height = Marker_Set_Height,
                        Heading = Marker_Set_Heading,
                        ThreasholdH = ProjectList_Distance[0].WaypointData[_count - 1].ThreasholdH,
                        ThreasholdV = ProjectList_Distance[0].WaypointData[_count - 1].ThreasholdV,
                        Wait = ProjectList_Marker[0].WaypointData[_count - 1].Wait,
                        Function = 0,
                        Speed = Marker_Set_Velocity
                    };
                    ProjectList_Distance[0].WaypointData.Add(_waypointList);
                }
                else
                {
                    FlightPlanning.Waypoint _waypointList = new FlightPlanning.Waypoint()
                    {
                        ID = _id,
                        Name = "",
                        Latitude = _point.Lat,
                        Longitude = _point.Lng,
                        x = Math.Round(_p.X, 3, MidpointRounding.AwayFromZero),
                        y = Math.Round(_p.Y, 3, MidpointRounding.AwayFromZero),
                        Height = Marker_Set_Height,
                        Heading = Marker_Set_Heading,
                        Function = 0,
                        Speed = Marker_Set_Velocity
                    };
                    ProjectList_Distance[0].WaypointData.Add(_waypointList);
                }
            }
            catch
            {

            }
        }

        private void AreaChoose_WaypointAdd_X(PointLatLng _point, int _id)
        {
            try
            {
                var _waypoint = new FlightPlanning.Waypoint();
                System.Windows.Point _p = FlightPlanXML.MeterPerLatLng(ProjectList_AreaChoose[0].BaseMarker.Position, _point);
                int _count = ProjectList_AreaChoose[0].WaypointData.Count;
                if (_count > 0)
                {
                    FlightPlanning.Waypoint _waypointList = new FlightPlanning.Waypoint()
                    {
                        ID = _id,
                        Name = "",
                        Latitude = _point.Lat,
                        Longitude = _point.Lng,
                        x = Math.Round(_p.X, 3, MidpointRounding.AwayFromZero),
                        y = Math.Round(_p.Y, 3, MidpointRounding.AwayFromZero),
                        Height = Marker_Set_Height,
                        Heading = Marker_Set_Heading,
                        ThreasholdH = ProjectList_AreaChoose[0].WaypointData[_count - 1].ThreasholdH,
                        ThreasholdV = ProjectList_AreaChoose[0].WaypointData[_count - 1].ThreasholdV,
                        Wait = ProjectList_AreaChoose[0].WaypointData[_count - 1].Wait,
                        Function = 0,
                        Speed = Marker_Set_Velocity
                    };
                    ProjectList_AreaChoose[0].WaypointData.Add(_waypointList);
                }
                else
                {
                    FlightPlanning.Waypoint _waypointList = new FlightPlanning.Waypoint()
                    {
                        ID = _id,
                        Name = "",
                        Latitude = _point.Lat,
                        Longitude = _point.Lng,
                        x = Math.Round(_p.X, 3, MidpointRounding.AwayFromZero),
                        y = Math.Round(_p.Y, 3, MidpointRounding.AwayFromZero),
                        Height = Marker_Set_Height,
                        Heading = Marker_Set_Heading,
                        Function = 0,
                        Speed = Marker_Set_Velocity
                    };
                    ProjectList_AreaChoose[0].WaypointData.Add(_waypointList);
                }
            }
            catch
            {

            }
        }

        private void Button_ChangePoint_Click(object sender, RoutedEventArgs e)
        {
            if (Click_Point_Start_Flag == 0)
            {

                Click_Point_Start_Flag = 1;
                Hand_Point.Visibility = Visibility.Visible;
                ludianxiugai.Content = "CloseColl";
            }
            else
            {
                Click_Point_Start_Flag = 0;
                Hand_Point.Visibility = Visibility.Hidden;
                ludianxiugai.Content = "OpenColl";
            }
        }
        double Rotationtwo_Angle(double first_destination_la,double first_destination_lo,double second_destination_la,double second_destination_lo)
        {
            double Actual_angle = 0.0;
            double Actual_C = 0.0;
            double Actual_A = 0.0;

            Actual_C = Math.Cos((90 - second_destination_la) * 3.1415926 / 180.0) * Math.Cos((90 - first_destination_la) * 3.1415926 / 180.0) + Math.Sin((90 - second_destination_la) * 3.1415926 / 180.0) * Math.Sin((90 - first_destination_la) * 3.1415926 / 180.0) * Math.Cos((second_destination_lo - first_destination_lo) * 3.1415926 / 180.0);
            Actual_A = Math.Sqrt((1 - Actual_C * Actual_C));
            if (Actual_A != 0)
            {
                Actual_angle = Math.Asin(((Math.Sin((90 - second_destination_la) * 3.1415926 / 180.0)) * Math.Sin((second_destination_lo - first_destination_lo) * 3.1415926 / 180.0)) / Actual_A);

                Actual_angle = Actual_angle * 180.0 / 3.1415926;
                ////////////////////////////////四个象限/////////////////////////////////////////////////////////////
                if (second_destination_la > first_destination_la && second_destination_lo > first_destination_lo)
                {
                    Actual_angle = -Actual_angle;
                }
                if (second_destination_la < first_destination_la && second_destination_lo > first_destination_lo)
                {
                    Actual_angle = -180 + Actual_angle;
                }
                if (second_destination_la < first_destination_la && second_destination_lo < first_destination_lo)
                {
                    Actual_angle = 180 + Actual_angle;
                }
                if (second_destination_la > first_destination_la && second_destination_lo < first_destination_lo)
                {
                    Actual_angle = -Actual_angle;
                }
                ///////////////////////////////四个象限////////////////////////////////////////////////////////////////
            }
            if (second_destination_la == first_destination_la && second_destination_lo >= first_destination_lo)
            {
                Actual_angle = -90;
            }
            if (second_destination_la == first_destination_la && second_destination_lo <= first_destination_lo)
            {
                Actual_angle = 90;
            }
            if (second_destination_la >= first_destination_la && second_destination_lo == first_destination_lo)
            {
                Actual_angle = 0;
            }
            if (second_destination_la <= first_destination_la && second_destination_lo == first_destination_lo)
            {
                Actual_angle = 180;
            }
            return Actual_angle;
            //double Angle_First = 0.0;
            //double Actual_angle = 0.0;
            //Angle_First = Math.Atan2((((second_destination_lo - first_destination_lo) * Math.Cos(second_destination_la)) * 3.1415926 / 180.0), ((second_destination_la - first_destination_la) * 3.1415926 / 180.0)) * 180 / 3.1415;
            //Actual_angle = Angle_First;
            //return Actual_angle;
        }
        private void CheckBox_Checked(object sender, RoutedEventArgs e)
        {
            System.Windows.Controls.CheckBox chk = (System.Windows.Controls.CheckBox)sender;
            if (chk.IsChecked == true)
            {
                Start_Cover_Flag = true;
            }
        }
        private void UncheckBox_UnChecked(object sender, RoutedEventArgs e)
        {
            System.Windows.Controls.CheckBox chk = (System.Windows.Controls.CheckBox)sender;
            if (chk.IsChecked == false)
            {
                Start_Cover_Flag = false;
            }
        }
        private void Function_ABAndMagangle_Refsh(int New_AB_Point_Alloffset)
        {
            byte High_Byte = Convert.ToByte(((New_AB_Point_Alloffset & 0x0000ff00) >> 8));//接收到的高8位
            sbyte Low_Byte = (sbyte)Convert.ToByte(New_AB_Point_Alloffset & 0x000000ff);//接收到的低8位
            byte Low1_Byte = (byte)Convert.ToByte(New_AB_Point_Alloffset & 0x000000ff);//接收到的低8位
            switch(High_Byte)
            {
                case 0://磁偏角
                     Constants.Mag_Offset_Angle_Show = Low_Byte;//磁偏角 
                    break;
                case 1://追线距离限幅
                     Constants.AB_ApproachLine_Range_Show = (float)(Low1_Byte/10.0);//追线距离限幅   
                    break;
                case 2://追线距离死区
                     Constants.AB_ApproachLine_DeadZone_Show = (float)(Low1_Byte/10.0);//追线距离死区
                    break;
                case 3://追点距离限幅
                     Constants.AB_ApproachPoint_Range_Show = (float)(Low1_Byte/10.0);//追点距离限幅
                    break;
                case 4://AB点平移时加速度
                    Constants.AB_HorizoMove_Acc_Show = (float)(Low1_Byte/10.0);//AB点平移时加速度
                    break;
                case 5://AB点平移距离限幅
                    Constants.AB_HorizoMove_Range_Show = (float)(Low1_Byte);//AB点平移距离限幅
                    break;
                case 6://AB点前行时加速度
                    Constants.AB_FowardMove_Acc_Show = (float)(Low1_Byte/10.0);//AB点前行时加速度 
                    break;
                case 7://速度到位置比例系数
                     Constants.AB_VelToPosition_Percent_Show = (float)(Low1_Byte/100.0);//速度到位置比例系数  
                    break;
                case 8://AB点B点到达Threshold比例
                     Constants.AB_BToThreshold_Percent_Show = (float)(Low1_Byte/10.0);//AB点B点到达Threshold比例  
                    break;
                case 9://AB点A点到达Threshold比例
                     Constants.AB_AToThreshold_Percen_Show = (float)(Low1_Byte/10.0); //AB点A点到达Threshold比例     
                    break;
                case 10://返航阈值
                    Constants.AB_BackThreshold_Show = (float)(Low1_Byte/10.0); //方航阈值
                    break;
                default:
                    break;
            }
        }
        private void Function_Pump_DataRefsh(int New_Param_Headfile_Num)
        {
            byte High_Byte = Convert.ToByte(((New_Param_Headfile_Num & 0x0000ff00) >> 8));//接收到的高8位
            byte Low_Byte = Convert.ToByte(New_Param_Headfile_Num & 0x000000ff);//接收到的低8位
            int pump_style = High_Byte;
            switch (pump_style)
            {
                case 0:
                    ///////////////////////////////////泵设置相关的数据更新////////////////////////////////////////////////////////////////////
                    if (Low_Byte >= 0 && Low_Byte <= 100)
                    {
                        Constants.Fixed_Motor_Value_Show = Low_Byte;
                    }
                    else
                    {
                        Constants.Fixed_Motor_Value_Show = 0;
                    }

                    break;
                case 1:
                    if (Low_Byte >= 0 && Low_Byte <= 100)
                    {
                        Constants.Fixed_Pump_Value_Show = Low_Byte;
                    }
                    else
                    {
                        Constants.Fixed_Pump_Value_Show = 0;
                    }
                    break;
                case 2:
                    if (Low_Byte >= 0 && Low_Byte <= 100)
                    {
                        Constants.Intelligent_Motor_Value_Show = Low_Byte;
                    }
                    else
                    {
                        Constants.Intelligent_Motor_Value_Show = 0;
                    }
                    break;
                case 3:
                    if (Low_Byte >= 0 && Low_Byte <= 100)
                    {
                        Constants.Intelligent_Vel_MinValue_Show = Low_Byte;
                    }
                    else
                    {
                        Constants.Intelligent_Vel_MinValue_Show = 0;
                    }
                    break;
                case 4:
                    if (Low_Byte >= 0 && Low_Byte <= 100)
                    {
                        Constants.Intelligent_Pump_MinValue_Show = Low_Byte;
                    }
                    else
                    {
                        Constants.Intelligent_Pump_MinValue_Show = 0;
                    }
                    break;
                case 5:
                    if (Low_Byte >= 0 && Low_Byte <= 100)
                    {
                        Constants.Intelligent_Vel_MaxValue_Show = Low_Byte;
                    }
                    else
                    {
                        Constants.Intelligent_Vel_MaxValue_Show = 0;
                    }
                    break;
                case 6:
                    if (Low_Byte >= 0 && Low_Byte <= 100)
                    {
                        Constants.Intelligent_Pump_MaxValue_Show = Low_Byte;
                    }
                    else
                    {
                        Constants.Intelligent_Pump_MaxValue_Show = 0;
                    }
                    break;

                case 7:
                    if (Low_Byte >= 0 && Low_Byte <= 100)
                    {
                        Constants.Show_shuiben_duanyao_action = Low_Byte;
                    }
                    else
                    {
                        Constants.Show_shuiben_duanyao_action = 0;
                    }
                    break;
                default:
                    break;
            }
        }
        private void Function_Version_Analyze(int Recv_Version_Data)
        {


            byte High_Byte = Convert.ToByte(((Recv_Version_Data & 0x0000ff00) >> 8));//接收到的高8位
            byte Low_Byte = Convert.ToByte(Recv_Version_Data & 0x000000ff);//接收到的低8位
            int Equipment_Type = 0;//设备的类型（IMU、AP、LED、MAG、GPS、DTU）
            int Equipment_String_Num = 0;//具体填充的是哪一个数组
            byte Equipment_Value = 0;//往数组中填充的具体是什么值
            Equipment_Type = High_Byte;//获取到实际的Type值（0=IMU;1=AP;2=LED;3=MAG;4=GPS;5=FDR;6=DTU）
            Equipment_Value = Convert.ToByte((Low_Byte & 0x7f));//具体收到的值
            Equipment_String_Num = (High_Byte%10);//具体对应的是数组的那个坑
            if (Equipment_Value == 0)
            {
                Equipment_Value = 32;
            }
            switch (Equipment_Type/10)
            {
                case 0:                     //AP软硬件编号的解析
                    if (Equipment_String_Num < 20)
                    {
                        All_Equipment_Info.AP_HardWare_Version[Equipment_String_Num] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 20 && Equipment_String_Num < 40)
                    {
                        All_Equipment_Info.AP_SoftWare_Version[Equipment_String_Num - 20] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 40)
                    {
                        All_Equipment_Info.AP_Equipment_ID[Equipment_String_Num - 40] = Equipment_Value;
                    }
                    Constants.AP_HardWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.AP_HardWare_Version);
                    Constants.AP_SoftWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.AP_SoftWare_Version);
                    Constants.AP_EquipmentID_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.AP_Equipment_ID);
                    Constants.AP_SHOWID_String = Constants.AP_EquipmentID_VersionShow;//将ap的id赋值给要显示的变量
                    break;
                case 1:						//IMU软硬件编号的解析
                    if (Equipment_String_Num < 20)
                    {
                        All_Equipment_Info.IMU_HardWare_Version[Equipment_String_Num] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 20 && Equipment_String_Num < 40)
                    {
                        All_Equipment_Info.IMU_SoftWare_Version[Equipment_String_Num - 20] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 40)
                    {
                        All_Equipment_Info.IMU_Equipment_ID[Equipment_String_Num - 40] = Equipment_Value;
                    }
                    Constants.IMU_HardWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.IMU_HardWare_Version);
                    Constants.IMU_SoftWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.IMU_SoftWare_Version);
                    Constants.IMU_EquipmentID_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.IMU_Equipment_ID);
                    break;
                case 2:						//GPS软硬件编号的解析
                    if (Equipment_String_Num < 20)
                    {
                        All_Equipment_Info.GPS_HardWare_Version[Equipment_String_Num] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 20 && Equipment_String_Num < 40)
                    {
                        All_Equipment_Info.GPS_SoftWare_Version[Equipment_String_Num - 20] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 40)
                    {
                        All_Equipment_Info.GPS_Equipment_ID[Equipment_String_Num - 40] = Equipment_Value;
                    }
                    Constants.GPS_HardWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.GPS_HardWare_Version);
                    Constants.GPS_SoftWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.GPS_SoftWare_Version);
                    Constants.GPS_EquipmentID_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.GPS_Equipment_ID);
                    break;
                case 3:						//HUB软硬件编号的解析
                    if (Equipment_String_Num < 20)
                    {
                        All_Equipment_Info.HUB_HardWare_Version[Equipment_String_Num] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 20 && Equipment_String_Num < 40)
                    {
                        All_Equipment_Info.HUB_SoftWare_Version[Equipment_String_Num - 20] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 40)
                    {
                        All_Equipment_Info.HUB_Equipment_ID[Equipment_String_Num - 40] = Equipment_Value;
                    }
                    Constants.HUB_HardWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.HUB_HardWare_Version);
                    Constants.HUB_SoftWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.HUB_SoftWare_Version);
                    Constants.HUB_EquipmentID_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.HUB_Equipment_ID);
                    break;
                case 4:					//mag软硬件编号的解析
                    if (Equipment_String_Num < 20)
                    {
                        All_Equipment_Info.MAG_HardWare_Version[Equipment_String_Num] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 20 && Equipment_String_Num < 40)
                    {
                        All_Equipment_Info.MAG_SoftWare_Version[Equipment_String_Num - 20] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 40)
                    {
                        All_Equipment_Info.MAG_Equipment_ID[Equipment_String_Num - 40] = Equipment_Value;
                    }
                    Constants.MAG_HardWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.MAG_HardWare_Version);
                    Constants.MAG_SoftWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.MAG_SoftWare_Version);
                    Constants.MAG_EquipmentID_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.MAG_Equipment_ID);
                    break;
                case 5:					//led软硬件编号的解析
                    if (Equipment_String_Num < 20)
                    {
                        All_Equipment_Info.LED_HardWare_Version[Equipment_String_Num] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 20 && Equipment_String_Num < 40)
                    {
                        All_Equipment_Info.LED_SoftWare_Version[Equipment_String_Num - 20] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 40)
                    {
                        All_Equipment_Info.LED_Equipment_ID[Equipment_String_Num - 40] = Equipment_Value;
                    }
                    Constants.LED_HardWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.LED_HardWare_Version);
                    Constants.LED_SoftWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.LED_SoftWare_Version);
                    Constants.LED_EquipmentID_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.LED_Equipment_ID);
                    break;
                case 6:					//FDR软硬件编号的解析
                    if (Equipment_String_Num < 20)
                    {
                        All_Equipment_Info.FDR_HardWare_Version[Equipment_String_Num] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 20 && Equipment_String_Num < 40)
                    {
                        All_Equipment_Info.FDR_SoftWare_Version[Equipment_String_Num - 20] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 40)
                    {
                        All_Equipment_Info.FDR_Equipment_ID[Equipment_String_Num - 40] = Equipment_Value;
                    }
                    Constants.FDR_HardWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.FDR_HardWare_Version);
                    Constants.FDR_SoftWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.FDR_SoftWare_Version);
                    Constants.FDR_EquipmentID_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.FDR_Equipment_ID);
                    break;
                case 7:					//DTU版本
                    if (Equipment_String_Num < 20)
                    {
                        All_Equipment_Info.DTU_HardWare_Version[Equipment_String_Num] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 20 && Equipment_String_Num < 40)
                    {
                        All_Equipment_Info.DTU_SoftWare_Version[Equipment_String_Num - 20] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 40)
                    {
                        All_Equipment_Info.DTU_Equipment_ID[Equipment_String_Num - 40] = Equipment_Value;
                    }
                    Constants.DTU_HardWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.DTU_HardWare_Version);
                    Constants.DTU_SoftWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.DTU_SoftWare_Version);
                    Constants.DTU_EquipmentID_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.DTU_Equipment_ID);
                    break;
                case 8:					//RTK版本
                    if (Equipment_String_Num < 20)
                    {
                        All_Equipment_Info.RTK_HardWare_Version[Equipment_String_Num] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 20 && Equipment_String_Num < 40)
                    {
                        All_Equipment_Info.RTK_SoftWare_Version[Equipment_String_Num - 20] = Equipment_Value;
                    }
                    else if (Equipment_String_Num >= 40)
                    {
                        All_Equipment_Info.RTK_Equipment_ID[Equipment_String_Num - 40] = Equipment_Value;
                    }
                    Constants.DTU_HardWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.RTK_HardWare_Version);
                    Constants.DTU_SoftWare_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.RTK_SoftWare_Version);
                    Constants.DTU_EquipmentID_VersionShow = System.Text.Encoding.Default.GetString(All_Equipment_Info.RTK_Equipment_ID);
                    break;


                default:
                    break;
            }
        }
        public void Function_Wait()
        {
            Thread t = new Thread(new ThreadStart(() =>
            {
                Dispatcher.BeginInvoke(new Action(() =>
                {
                    dlg = new WaitProgressWindow();
                    dlg.ShowDialog();
                }));
            }));
            t.Start();
        }
        public void Open_Wifi_Function()
        {
            #region 等待显示
            if (Wifi_Success_Connect_Flag != true)
            {
                Function_Wait();
            }
            #endregion
            #region 连接线程
            // ================================================================================
            // 异步处理线程[.NET Framework 4样式]
            Task.Factory.StartNew(() =>
            {
                try
                {
                    if (Wifi_Success_Connect_Flag != true)
                    {
                        Wifi_Socket = new System.Net.Sockets.Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                        //获取ip对象
                        string ip_name = Constants.User_Wifi_Set_IP;
                        IPAddress address = IPAddress.Parse(ip_name);//获取设置好的ip
                        //创建IP和端口
                        IPEndPoint endpoint = new IPEndPoint(address, int.Parse(Constants.User_Wifi_Set_Port));
                        try
                        {
                            Wifi_Socket.Connect(endpoint);
                            Thread.Sleep(1000);//次线程休眠1秒
                            this.Dispatcher.Invoke(new Action(delegate
                            {
                                dlg.Close();
                            }));
                            System.Windows.MessageBox.Show("wifi Connect Success");
                            Dat_Save_Flag = 1;
                            Constants.Motor_Show_Flag = 1;
                            Wifi_Success_Connect_Flag = true;
                        }
                        catch (Exception)
                        {
                            Thread.Sleep(1000);//次线程休眠1秒
                            this.Dispatcher.Invoke(new Action(delegate
                            {
                                dlg.Close();
                            }));
                            System.Windows.MessageBox.Show("Can Not Connect Server");
                            Wifi_Socket.Close();//关闭打开的socket
                            Wifi_Success_Connect_Flag = false;
                            return;
                        }
                        threadWatch = new Thread(ReceiveMsg);//创建线程接收函数
                        threadWatch.IsBackground = true;
                        threadWatch.Start();
                    }
                    else
                    {
                        System.Windows.MessageBox.Show("Can Not Repeat Connect");
                        return;
                    }
                }
                catch (Exception ex)
                {
                    System.Windows.MessageBox.Show("(304) Alert Error: " + ex.Message);
                    _logger.Error("(304) Alert Error: " + ex.Message);
                }
                _logger.Info("watch-E");
            });
            #endregion
        }
        public void ReceiveMsg()
        {
            byte[] arrMsgRec = new byte[512];//定义缓存控件用于接受wifi数据
            Int32 wifi_data_length = 0;//wifi接收到的数据长度
            while (true)
            {
                try
                {
                    if (Wifi_Success_Connect_Flag == true)
                    {
                        wifi_data_length = 0;//wifi接收到的数据长度
                        wifi_data_length = Wifi_Socket.Receive(arrMsgRec);
                        for (int i = 0; i < wifi_data_length; i++)
                        {
                            cRxData = arrMsgRec[i];
                            if (cRxDataflg == true)
                            {
                                //将数组存储的缓冲区
                                m_RxData[nRxDataCount++] = cRxData;//找到头之后往数组中存数据
                                if (nRxDataCount >= nPacketSize)//一旦存满一个包的数据量
                                {
                                    cRxDataflg = false;//将标志位复位
                                    //校验和计算
                                    UInt16 Bcc = 0;
                                    UInt16 Bcc2 = 0;
                                    for (int ii = 2; ii < (nPacketSize - 2); ii++)
                                    {
                                        Bcc += Convert.ToUInt16((Convert.ToUInt16(m_RxData[ii]) & 0x00FF));//求取校验和存储在无符号16位
                                    }
                                    Bcc2 = Convert.ToUInt16((((Convert.ToUInt16(m_RxData[nPacketSize - 2])) << 8) & 0xFF00) | ((Convert.ToUInt16(m_RxData[nPacketSize - 1])) & 0x00FF));
                                    //检查校验结果
                                    if (Bcc == Bcc2)
                                    {
                                        if (Constants.Play_Data_Back_Flag == false)
                                        {
                                            UpDate();
                                        }
                                    }
                                }
                            }
                            else
                            {
                                cIndexHeader[0] = cIndexHeader[1];
                                cIndexHeader[1] = cIndexHeader[2];
                                cIndexHeader[2] = cIndexHeader[3];
                                cIndexHeader[3] = cIndexHeader[4];
                                cIndexHeader[4] = cRxData;
                                if (cIndexHeader[0] == (byte)0xB5 && cIndexHeader[1] == (byte)0x5B)
                                {
                                    //接收头部分
                                    for (int j = 0; j < 5; j++)
                                    {
                                        m_RxData[j] = cIndexHeader[j];
                                    }
                                    //头清零
                                    for (int k = 0; k < 5; k++)
                                    {
                                        cIndexHeader[k] = 0;
                                    }
                                    //数据计数器初始化
                                    nRxDataCount = 5;
                                    //采集的数据包的大小
                                    nPacketSize = m_RxData[2];
                                    //设置接收标志
                                    if (nPacketSize != 0)
                                    {
                                        cRxDataflg = true;
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception)
                {
                    Wifi_Success_Connect_Flag = false;

                    //  System.Windows.Forms.MessageBox.Show("无法连接到服务端");
                    ShowMessage("");

                    Thread.Sleep(1000);//次线程休眠1秒
                    Wifi_Socket.Close();
                    threadWatch.Abort();
                    threadWatch.Join();
                }
            }
        }


        public void ShowMessage(string msg)
        {

            this.Dispatcher.Invoke(new MessageBoxShow(MessageBoxShow_F), new object[] { msg });

        }

        delegate void MessageBoxShow(string msg);

        void MessageBoxShow_F(string msg)
        {

            System.Windows.MessageBox.Show("Can Not Connect The Server");

        }

        /// <summary>
        /// 5hz下默认发送
        /// </summary>
        /// <param name="Value"></param>
        public void wifi_Send5HZData(int Value)
        {
            byte[] TxData = new byte[7];
            ushort SBcc = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x07;
            TxData[3] = 0x00;
            TxData[4] = (byte)(Value);
            for (int i = 2; i <= 4; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[5] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[6] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }

        }
        /// <summary>
        /// 50hz下的上层pid设置
        /// </summary>
        /// <param name="Value"></param>
        public void wifi_Send50HZPIDData(int Value)
        {
            byte[] TxData = new byte[7];
            ushort SBcc = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x07;
            TxData[3] = 0x61;
            TxData[4] = (byte)(Value);
            for (int i = 2; i <= 4; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[5] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[6] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }

        }
        /// <summary>
        /// 50hz下的默认数据
        /// </summary>
        /// <param name="Value"></param>
        public void wifi_Send50HZData(int Value)
        {
            byte[] TxData = new byte[7];
            ushort SBcc = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x07;
            TxData[3] = 0x21;
            TxData[4] = (byte)(Value);
            for (int i = 2; i <= 4; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[5] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[6] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }

        }
/// <summary>
/// 作业参数设置
/// </summary>
/// <param name="Set_work_speed"></param>
/// <param name="Set_work_radius"></param>
/// <param name="Set_pensa_radius"></param>
/// <param name="Set_work_height"></param>
        public void Wifi_SendSheZhiCanShu(float Set_UAV_Speed, float Set_UAV_Height, float Set_UAV_Upspeed, float Set_UAV_Downspeed, float Set_UAV_Attituderange)
        {
            byte[] TxData = new byte[16];
            ushort SBcc = 0;
            short sTemp =0;
	        TxData[0] = 0x3A;
	        TxData[1] = 0xA3;
	        TxData[2] = 0x10;
	        TxData[3] = 0x1C;
            sTemp = (short)((Set_UAV_Speed + 0.05) * 10.0);
	        TxData[4] = (byte)((sTemp&0xFF00)>>8);
	        TxData[5]=(byte)(sTemp&0x00FF);
            sTemp = (short)((Set_UAV_Height + 0.05) * 10.0);
	        TxData[6] = (byte)((sTemp&0xFF00)>>8);
	        TxData[7]=(byte)(sTemp&0x00FF);
            sTemp = (short)((Set_UAV_Upspeed + 0.05) * 10.0);
	        TxData[8] = (byte)((sTemp&0xFF00)>>8);
	        TxData[9]=(byte)(sTemp&0x00FF);
            sTemp = (short)((Set_UAV_Downspeed + 0.05) * 10.0);
	        TxData[10] = (byte)((sTemp&0xFF00)>>8);
	        TxData[11]=(byte)(sTemp&0x00FF);
            sTemp = (short)((Set_UAV_Attituderange + 0.05) * 10.0);
            TxData[12] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[13] = (byte)(sTemp & 0x00FF);
            for (int i = 2; i <= 13; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[14] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[15] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }



        /// <summary>
        /// 植保参数设置
        /// </summary>
        /// <param name="Set_work_speed"></param>
        /// <param name="Set_work_radius"></param>
        /// <param name="Set_pensa_radius"></param>
        /// <param name="Set_work_height"></param>
        public void Wifi_SendZhiBaoCanShu(float Set_UAV_ZhiBaoSpeed, float Set_UAV_ZhiBaoFuDu)
        {
            byte[] TxData = new byte[10];
            ushort SBcc = 0;
            short sTemp = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x0A;
            TxData[3] = 0x08;
            sTemp = (short)((Set_UAV_ZhiBaoSpeed + 0.05) * 10.0);
            TxData[4] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[5] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_UAV_ZhiBaoFuDu + 0.05) * 10.0);
            TxData[6] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[7] = (byte)(sTemp & 0x00FF);
            for (int i = 2; i <= 7; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[8] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[9] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }

        /// <summary>
        /// 航拍参数设置
        /// </summary>
        /// <param name="Set_work_speed"></param>
        /// <param name="Set_work_radius"></param>
        /// <param name="Set_pensa_radius"></param>
        /// <param name="Set_work_height"></param>
        public void Wifi_SendHangPaiCanShu(float Set_UAV_HangPaiSpeed, float Set_UAV_M9Low, float Set_UAV_M9Middle, float Set_UAV_M9High, float Set_UAV_M10Low, float Set_UAV_M10Middle, float Set_UAV_M10High)
        {
            byte[] TxData = new byte[14];
            ushort SBcc = 0;
            short sTemp = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x0E;
            TxData[3] = 0x1B;
            sTemp = (short)((Set_UAV_HangPaiSpeed + 0.05) * 10.0);
            TxData[4] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[5] = (byte)(sTemp & 0x00FF);
            sTemp = (short)(Set_UAV_M9Low);
            TxData[6] = (byte)(sTemp & 0x00FF);
            sTemp = (short)(Set_UAV_M9Middle);
            TxData[7] = (byte)(sTemp & 0x00FF);
            sTemp = (short)(Set_UAV_M9High);
            TxData[8] = (byte)(sTemp & 0x00FF);
            sTemp = (short)(Set_UAV_M10Low);
            TxData[9] = (byte)(sTemp & 0x00FF);
            sTemp = (short)(Set_UAV_M10Middle);
            TxData[10] = (byte)(sTemp & 0x00FF);
            sTemp = (short)(Set_UAV_M10High);
            TxData[11] = (byte)(sTemp & 0x00FF);
            for (int i = 2; i <= 11; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[12] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[13] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }


        /// <summary>
        /// 安全策略设置
        /// </summary>
        /// <param name="Set_work_speed"></param>
        /// <param name="Set_work_radius"></param>
        /// <param name="Set_pensa_radius"></param>
        /// <param name="Set_work_height"></param>
        public void Wifi_SendAnQuanCeLueCanShu(float Set_UAV_Noticefirstvolt, float Set_UAV_Noticesecondvolt, float Set_UAV_Noticesecondaction, float Set_UAV_Noticedistance, float Set_UAV_Noticeheight, float Set_UAV_Noticelosecontrolaction, float Set_UAV_Noticefanhanggaodu)
        {
            byte[] TxData = new byte[18];
            ushort SBcc = 0;
            short sTemp = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x12;
            TxData[3] = 0x1A;
            sTemp = (short)((Set_UAV_Noticefirstvolt + 0.05) * 10.0);
            TxData[4] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[5] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_UAV_Noticesecondvolt + 0.05) * 10.0);
            TxData[6] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[7] = (byte)(sTemp & 0x00FF);
            sTemp = (short)(Set_UAV_Noticesecondaction);
            TxData[8] = (byte)(sTemp & 0x00FF);
            sTemp = (short)(Set_UAV_Noticelosecontrolaction);
            TxData[9] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_UAV_Noticedistance + 0.05) * 10.0);
            TxData[10] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[11] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_UAV_Noticeheight + 0.05) * 10.0);
            TxData[12] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[13] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_UAV_Noticefanhanggaodu + 0.05) * 10.0);
            TxData[14] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[15] = (byte)(sTemp & 0x00FF);
            for (int i = 2; i <= 15; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[16] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[17] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }
        /// <summary>
        /// 植保航拍切换
        /// </summary>
        /// <param name="Set_work_speed"></param>
        /// <param name="Set_work_radius"></param>
        /// <param name="Set_pensa_radius"></param>
        /// <param name="Set_work_height"></param>
        public void Wifi_SendZhiBaoAndHangPai(int Set_UAV_CurrentStyle)
        {
            byte[] TxData = new byte[7];
            ushort SBcc = 0;
            short sTemp = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x07;
            TxData[3] = 0x19;
            sTemp = (short)(Set_UAV_CurrentStyle);
       //     TxData[4] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[4] = (byte)(sTemp & 0x00FF);
            for (int i = 2; i <= 4; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[5] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[6] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }
/// <summary>
/// 机型设置
/// </summary>
/// <param name="DataSelect_QUADE"></param>
/// <param name="tape_speedvalue"></param>
        public void Wifi_SendQudeSet(int DataSelect_QUADE,int tape_speedvalue)
        {

                    byte[] TxData = new byte[10];
                    ushort SBcc = 0;
                    short sTemp =0;
                    sTemp = (short)DataSelect_QUADE;
	                TxData[0] = 0x3A;
	                TxData[1] = 0xA3;
	                TxData[2] = 0x0A;
	                TxData[3] = 0x0C;
	                TxData[4] = (byte)((sTemp&0xFF00)>>8);
	                TxData[5]=(byte)(sTemp&0x00FF);
	                TxData[6]=(byte)(tape_speedvalue&0x000000FF);
	                TxData[7] = 0x00;
                    for (int i = 2; i <= 7; i++)
                    {
                        SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
                    }
                    TxData[8] = (byte)((SBcc >> 8) & 0x00FF);
                    TxData[9] = (byte)(SBcc & 0x00FF);
                    try
                    {
                        Wifi_Socket.Send(TxData);
                    }
                    catch (Exception)
                    {
                        Wifi_Success_Connect_Flag = false;
                        System.Windows.MessageBox.Show("Can Not Connect The Server");
                    }
        }
        /// <summary>
        /// 遥控器校准指令
        /// </summary>
        /// <param name="TakeOff_Flag"></param>
        public void wifi_SendAutoykqjz_Start(int Tel_Steps, int Tel_StepsValue)
        {
            byte[] TxData = new byte[8];
            ushort SBcc = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x08;
            TxData[3] = 0x4A;
            TxData[4] = Convert.ToByte((Tel_Steps & 0x000000FF));
            TxData[5] = Convert.ToByte((Tel_StepsValue & 0x000000FF));
            for (int i = 2; i <= 5; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[6] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[7] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }
        /// <summary>
        /// 遥控器方向确认
        /// </summary>
        /// <param name="TakeOff_Flag"></param>
        public void wifi_SendYaoKongQiJZ_Sure(int ykqfxqr_Flag)
        {
            byte[] TxData = new byte[7];
            ushort SBcc = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x07;
            TxData[3] = 0x51;
            TxData[4] = Convert.ToByte((ykqfxqr_Flag & 0x000000FF));
            for (int i = 2; i <= 4; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[5] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[6] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }

/// <summary>
/// 遥控器校准完成指令
/// </summary>
/// <param name="ykqjz_Flag"></param>
        public void wifi_SendAutoykqjz_End(int ykqjzend_Flag)
        {
            byte[] TxData = new byte[7];
            ushort SBcc = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x07;
            TxData[3] = 0x4B;
            TxData[4] = Convert.ToByte((ykqjzend_Flag & 0x000000FF));
            for (int i = 2; i <= 4; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[5] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[6] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }

        /// <summary>
        /// 上层pid设置
        /// </summary>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <param name="?"></param>
        /// <param name="?"></param>
        public void Wifi_SendSetShangcengPID(float Set_zitai_p, float Set_zitai_i, float Set_zitai_d, float Set_hangxiang_p, float Set_hangxiang_i, float Set_hangxiang_d, float Set_sudu_p, float Set_sudu_i, float Set_sudu_d, float Set_gaodu_p, float Set_gaodu_i, float Set_gaodu_d)
        {
            byte[] TxData = new byte[30];
            ushort SBcc = 0;
            short sTemp;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x1E;
            TxData[3] = 0x75;
            sTemp = (short)((Set_zitai_p));
            TxData[4] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[5] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_zitai_i));
            TxData[6] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[7] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_zitai_d));
            TxData[8] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[9] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_hangxiang_p));
            TxData[10] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[11] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_hangxiang_i));
            TxData[12] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[13] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_hangxiang_d));
            TxData[14] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[15] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_gaodu_p));
            TxData[16] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[17] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_gaodu_i));
            TxData[18] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[19] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_gaodu_d));
            TxData[20] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[21] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_sudu_p));
            TxData[22] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[23] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_sudu_i));
            TxData[24] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[25] = (byte)(sTemp & 0x00FF);
            sTemp = (short)((Set_sudu_d));
            TxData[26] = (byte)((sTemp & 0xFF00) >> 8);
            TxData[27] = (byte)(sTemp & 0x00FF);
            for (int i = 2; i <= 27; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[28] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[29] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }

        /// <summary>
        /// PID设置
        /// </summary>
        /// <param name="gyro_kp_rp"></param>
        /// <param name="gyro_ki_rp"></param>
        /// <param name="gyro_kd_rp"></param>
        /// <param name="gyro_kp_y"></param>
        /// <param name="gyro_ki_y"></param>
        /// <param name="gyro_kd_y"></param>
        /// <param name="prop_kp_rp"></param>
        /// <param name="prop_ki_rp"></param>
        /// <param name="prop_kp_y"></param>
        /// <param name="prop_ki_y"></param>
        public void Wifi_SendSetPID(float gyro_kp_rp,float gyro_ki_rp,float gyro_kd_rp,float gyro_kp_y,float gyro_ki_y,float gyro_kd_y,float prop_kp_rp,float prop_ki_rp,float prop_kp_y,float prop_ki_y)
        {
                    byte[] TxData = new byte[26];
                    ushort SBcc = 0;
    	            short sTemp;
	                TxData[0] = 0x3A;
	                TxData[1] = 0xA3;
	                TxData[2] = 0x1A;
	                TxData[3] = 0x2F;
	                sTemp = (short)((gyro_kp_rp+0.005) * 100.0);
	                TxData[4] = (byte)((sTemp&0xFF00)>>8);
	                TxData[5]=(byte)(sTemp&0x00FF);
	                sTemp = (short)((gyro_ki_rp+0.005) * 100.0);
	                TxData[6] = (byte)((sTemp&0xFF00)>>8);
	                TxData[7]=(byte)(sTemp&0x00FF);
	                sTemp = (short)((gyro_kd_rp+0.005) * 100.0);
	                TxData[8] = (byte)((sTemp&0xFF00)>>8);
	                TxData[9]=(byte)(sTemp&0x00FF);
	                sTemp = (short)((gyro_kp_y+0.005) * 100.0);
	                TxData[10] = (byte)((sTemp&0xFF00)>>8);
	                TxData[11]=(byte)(sTemp&0x00FF);
	                sTemp = (short)((gyro_ki_y+0.005) * 100.0);
	                TxData[12] = (byte)((sTemp&0xFF00)>>8);
	                TxData[13]=(byte)(sTemp&0x00FF);
	                sTemp = (short)((gyro_kd_y+0.005) * 100.0);
	                TxData[14] = (byte)((sTemp&0xFF00)>>8);
	                TxData[15]=(byte)(sTemp&0x00FF);
	                sTemp = (short)((prop_kp_rp+0.005) * 100.0);
	                TxData[16] = (byte)((sTemp&0xFF00)>>8);
	                TxData[17]=(byte)(sTemp&0x00FF);
	                sTemp = (short)((prop_ki_rp+0.005) * 100.0);
	                TxData[18] = (byte)((sTemp&0xFF00)>>8);
	                TxData[19]=(byte)(sTemp&0x00FF);
	                sTemp = (short)((prop_kp_y+0.005) * 100.0);
	                TxData[20] = (byte)((sTemp&0xFF00)>>8);
	                TxData[21]=(byte)(sTemp&0x00FF);
	                sTemp = (short)((prop_ki_y+0.005) * 100.0);
	                TxData[22] = (byte)((sTemp&0xFF00)>>8);
	                TxData[23]=(byte)(sTemp&0x00FF);
                    for (int i = 2; i <= 23; i++)
                    {
                        SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
                    }
                    TxData[24] = (byte)((SBcc >> 8) & 0x00FF);
                    TxData[25] = (byte)(SBcc & 0x00FF);
                    try
                    {
                        Wifi_Socket.Send(TxData);
                    }
                    catch (Exception)
                    {
                        Wifi_Success_Connect_Flag = false;
                        System.Windows.MessageBox.Show("Can Not Connect The Server");
                    }
        }

        /// <summary>
        /// 自主起飞
        /// </summary>
        /// <param name="TakeOff_Flag"></param>
        public void wifi_SendAutoTakeOff(int TakeOff_Flag)
        {
            byte[] TxData = new byte[7];
            ushort SBcc = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x07;
            TxData[3] = 0x02;
            TxData[4] = Convert.ToByte(TakeOff_Flag);
            for (int i = 2; i <= 4; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[5] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[6] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }
        /// <summary>
        /// 测试电机
        /// </summary>
        /// <param name="FlightLanding_Flag"></param>
        public void wifi_SendMotorTest(int Motor1_Test_Index, int Motor2_Test_Index)
        {
            byte[] TxData = new byte[8];
            ushort SBcc = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x08;
            TxData[3] = 0x13;
            TxData[4] = (byte)(Motor1_Test_Index);
            TxData[5] = (byte)(Motor2_Test_Index);
            for (int i = 2; i <= 5; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[6] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[7] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }
        /// <summary>
        /// 飞控编号设置
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// 
        public void wifi_SendAPID_Set(string AP_ID)
        {
            int string_length = AP_ID.Length;
            byte[] String_TxData = new byte[14];
            for (int i = 0; i < 14; i++)
            {
                String_TxData[i] = 0;
            }
            StringReader apid_stringreader = new StringReader(AP_ID);
            for (int j = 0; j < string_length; j++)
            {
                String_TxData[j] = (byte)apid_stringreader.Read();
            }
            byte[] TxData = new byte[20];
            ushort SBcc = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x14;
            TxData[3] = 0x0B;
            TxData[4] = String_TxData[0];
            TxData[5] = String_TxData[1];
            TxData[6] = String_TxData[2];
            TxData[7] = String_TxData[3];
            TxData[8] = String_TxData[4];
            TxData[9] = String_TxData[5];
            TxData[10] = String_TxData[6];
            TxData[11] = String_TxData[7];
            TxData[12] = String_TxData[8];
            TxData[13] = String_TxData[9];
            TxData[14] = String_TxData[10];
            TxData[15] = String_TxData[11];
            TxData[16] = String_TxData[12];
            TxData[17] = String_TxData[13];
            for (int i = 2; i <= 17; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[18] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[19] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }
/// <summary>
/// 飞行转弯参数设置
/// </summary>
/// <param name="Intelligent_Pump_MaxValue_Set"></param>
/// <param name="Intelligent_Pump_MinValue_Set"></param>
/// <param name="Intelligent_Vel_MaxValue_Set"></param>
/// <param name="Intelligent_Vel_MinValue_Set"></param>
/// <param name="Intelligent_Motor_Value_Set"></param>
/// <param name="Fixed_Pump_Value_Set"></param>
/// <param name="Fixed_Motor_Value_Set"></param>
        public void wifi_SendFlightTurn_Set(float Offset_Angle_Set, float ApproachLine_Range_Set, float ApproachLine_DeadZone_Set, float ApproachPoint_Range_Set
            , float HorizoMove_Acc_Set, float HorizoMove_Range_Set, float FowardMove_Acc_Set, float VelToPosition_Percent_Set, float BToThreshold_Percent_Set, float AToThreshold_Percen_Set,float AB_BackThreshold_Set)
        {
            byte[] TxData = new byte[18];
            ushort SBcc = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x12;
            TxData[3] = 0x11;
            TxData[4] = (byte)Offset_Angle_Set;
            TxData[5] = (byte)ApproachLine_Range_Set;
            TxData[6] = (byte)ApproachLine_DeadZone_Set;
            TxData[7] = (byte)ApproachPoint_Range_Set;
            TxData[8] = (byte)HorizoMove_Acc_Set;
            TxData[9] = (byte)HorizoMove_Range_Set;
            TxData[10] = (byte)FowardMove_Acc_Set;
            TxData[11] = (byte)VelToPosition_Percent_Set;
            TxData[12] = (byte)BToThreshold_Percent_Set;
            TxData[13] = (byte)AToThreshold_Percen_Set;
            TxData[14] = (byte)AB_BackThreshold_Set;
            TxData[15] = 0;
            for (int i = 2; i <= 15; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[16] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[17] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }






        public void wifi_SendPumpTest(int Intelligent_Pump_MaxValue_Set, int Intelligent_Pump_MinValue_Set,
                                    int Intelligent_Vel_MaxValue_Set, int Intelligent_Vel_MinValue_Set,
                                    int Intelligent_Motor_Value_Set, int Fixed_Pump_Value_Set, int Fixed_Motor_Value_Set,int Set_shuiben_duanyao_action)
        {
            byte[] TxData = new byte[14];
            ushort SBcc = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x0E;
            TxData[3] = 0x18;
            TxData[4] = (byte)(Fixed_Motor_Value_Set);//
            TxData[5] = (byte)(Fixed_Pump_Value_Set);//
            TxData[6] = (byte)(Intelligent_Motor_Value_Set);//
            TxData[7] = (byte)(Intelligent_Vel_MinValue_Set);//
            TxData[8] = (byte)(Intelligent_Pump_MinValue_Set);//
            TxData[9] = (byte)(Intelligent_Vel_MaxValue_Set);//
            TxData[10] = (byte)(Intelligent_Pump_MaxValue_Set);//
            TxData[11] = (byte)(Set_shuiben_duanyao_action);//
            for (int i = 2; i <= 11; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[12] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[13] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }      
        /// <summary>
        /// 自主着陆
        /// </summary>
        /// <param name="FlightLanding_Flag"></param>
        public void wifi_SendAutoLanding(int FlightLanding_Flag)
        {
            byte[] TxData = new byte[7];
            ushort SBcc = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x07;
            TxData[3] = 0x03;
            TxData[4] = (byte)(FlightLanding_Flag);
            for (int i = 2; i <= 4; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[5] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[6] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }
        /// <summary>
        /// 路点发送
        /// </summary>
        public void wifi_SendRefData(int Plan_Flag, int TakePhoto_Flag, double Lat_Value
            , double Lon_Value, double Height_Value, double Yaw_Value, int Road_Num, int Which_Road
            , float Vel_Flag, float Vel_Value, int WhichData_Bag, int SetCameraAngle_Flag)
        {
            short STemp;
            ushort SBcc = 0;
            byte[] TxData = new byte[36];
            byte[] LatData = new byte[8];
            byte[] LonData = new byte[8];
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x24;
            TxData[3] = 0x06;
            TxData[4] = (byte)TakePhoto_Flag;
            TxData[5] = (byte)Plan_Flag;
            TxData[6] = (byte)WhichData_Bag;
            TxData[7] = (byte)Road_Num;
            TxData[8] = (byte)Which_Road;
            LatData = BitConverter.GetBytes(Lat_Value);
            LatData.CopyTo(TxData, 9);
            LonData = BitConverter.GetBytes(Lon_Value);
            LonData.CopyTo(TxData, 17);
            /*****************************高度****************/
            STemp = (short)(Height_Value + 100.0);
            TxData[25] = (byte)((STemp & 0xFF00) >> 8);
            TxData[26] = (byte)(STemp & 0x00FF);
            /*****************************偏航****************/
            STemp = (short)((Yaw_Value + 10.0) * 100.0);
            TxData[27] = (byte)((STemp & 0xFF00) >> 8);
            TxData[28] = (byte)(STemp & 0x00FF);
            /***************************速度标志位***********/
            STemp = (short)(Vel_Flag * 10.0 + 100.0);
            TxData[29] = (byte)((STemp & 0xFF00) >> 8);
            TxData[30] = (byte)(STemp & 0x00FF);
            /*************************速度********************/
            STemp = (short)(Vel_Value * 10.0 + 100.0);
            TxData[31] = (byte)((STemp & 0xFF00) >> 8);
            TxData[32] = (byte)(STemp & 0x00FF);
            /***********************机头定向******************/
            TxData[33] = (byte)SetCameraAngle_Flag;
            for (int i = 2; i <= 33; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[34] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[35] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }
        /// <summary>
        /// //一键返航
        /// </summary>
        public void wifi_SendOneKeyToReturn_Line(int FlightReturn_Flag)
        {
            byte[] TxData = new byte[7];
            ushort SBcc = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x07;
            TxData[3] = 0x04;
            TxData[4] = (byte)(FlightReturn_Flag);
            for (int i = 2; i <= 4; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[5] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[6] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }
        /// <summary>
        /// 一键原路径返航
        /// </summary>
        /// <param name="FlightReturn_Flag"></param>
        public void wifi_SendOneKeyToReturn_Path(int FlightReturn_Flag)
        {
            byte[] TxData = new byte[7];
            ushort SBcc = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x07;
            TxData[3] = 0x05;
            TxData[4] = (byte)(FlightReturn_Flag);
            for (int i = 2; i <= 4; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[5] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[6] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }
        /// <summary>
        /// /发送修改某一个路点的指令
        /// </summary>
        public void wifi_SendModifyRefData(int ChoooseID, double Lat_Value, double Lon_Value)
        {
            ushort SBcc = 0;
            byte[] TxData = new byte[23];
            byte[] LatData = new byte[8];
            byte[] LonData = new byte[8];
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x17;
            TxData[3] = 0x12;
            TxData[4] = (byte)ChoooseID;
            LatData = BitConverter.GetBytes(Lat_Value);
            LatData.CopyTo(TxData, 5);
            LonData = BitConverter.GetBytes(Lon_Value);
            LonData.CopyTo(TxData, 13);
            for (int i = 2; i <= 20; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[21] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[22] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }
        /// <summary>
        /// led调节
        /// </summary>
        /// <param name="ledstate"></param>
        public void wifi_SendLedAdjust(int ledstate)
        {
            byte[] TxData = new byte[7];
            ushort SBcc = 0;
            TxData[0] = 0x3A;
            TxData[1] = 0xA3;
            TxData[2] = 0x07;
            TxData[3] = 0x07;
            TxData[4] = (byte)(ledstate);
            for (int i = 2; i <= 4; i++)
            {
                SBcc += (ushort)((ushort)TxData[i] & 0x00FF);
            }
            TxData[5] = (byte)((SBcc >> 8) & 0x00FF);
            TxData[6] = (byte)(SBcc & 0x00FF);
            try
            {
                Wifi_Socket.Send(TxData);
            }
            catch (Exception)
            {
                Wifi_Success_Connect_Flag = false;
                System.Windows.MessageBox.Show("Can Not Connect The Server");
            }
        }

        private void Hand_Point_Click(object sender, RoutedEventArgs e)
        {
            int Count = 0;
            if (AllAerocraftData.AutoWingLongitude > 30.0)
            {
                if (ProjectList_Marker.Count > 0 && Lock_Marker_Flag == false)
                {
                    if (ProjectList_Marker[0].WaypointData.Count < 50)
                    {
                        PointLatLng Waypoint = new PointLatLng();							//Waypoint位置
                        Waypoint.Lat = AllAerocraftData.AutoWingLatitude;
                        Waypoint.Lng = AllAerocraftData.AutoWingLongitude;
                        WaypointAndPathAdd2_X(Waypoint, 0);
                        Autowing_WaypointAndPathAdd2_X(Waypoint, 0);
                        Count = ProjectList_Marker[0].WaypointData.Count;
                        if (ProjectList_Marker[0].WaypointData.Count > 2)
                        {
                            Make_MultiPenSa_Plan();
                        }

                        ////////////////////////////增加距离的marker//////////////////////////////////////////////////
                        if (ProjectList_Marker[0].WaypointData.Count > 1)
                        {
                            Distance_WaypointAndPathAdd_X();		// Waypoint追加
                        }

                        System.Windows.MessageBox.Show("The" + Count.ToString() + "Point Success");
                    }
                    else
                    {
                        System.Windows.MessageBox.Show("The Points Must Below 50");
                        return;
                    }
                }
                else
                {
                    System.Windows.MessageBox.Show("Please New The Plan");
                    return;
                }
            }
            else
            {
                System.Windows.MessageBox.Show("Please Keep The Connect Correct And Stars Enough");
            }
        }
        private void FunctionSetDialog_DataUpdate()
        {
       //     Constants.Show_work_speed = AllAerocraftData.Set_Pensa_Sudu;//作业速度
       //     Constants.Show_work_radius = AllAerocraftData.Set_Pensa_Juli;//作业距离
       //     Constants.Show_pensa_radius = AllAerocraftData.Set_Pensa_Banjing;//喷洒幅度
       //     Constants.Show_work_height = AllAerocraftData.Set_Pensa_Gaodu;//作业高度




            Constants.Show_DataSelect_QUADE = (int)AllAerocraftData.New_Frame_Type;//机型组合值
            Constants.Show_tape_speedvalue = (int)AllAerocraftData.New_Motor_Starting_Percent;//怠速值
            Constants.Show_gyro_kp_rp = AllAerocraftData.Gyro_RP_KP;
            Constants.Show_gyro_ki_rp = AllAerocraftData.Gyro_RP_KI;
            Constants.Show_gyro_kd_rp = AllAerocraftData.Gyro_RP_KD;
            Constants.Show_gyro_kp_y = AllAerocraftData.Gyro_Y_KP;
            Constants.Show_gyro_ki_y = AllAerocraftData.Gyro_Y_KI;
            Constants.Show_gyro_kd_y = AllAerocraftData.Gyro_Y_KD;
            Constants.Show_prop_kp_rp = AllAerocraftData.Prop_RP_KP;
            Constants.Show_prop_ki_rp = AllAerocraftData.Prop_RP_KI;
            Constants.Show_prop_kp_y = AllAerocraftData.Prop_Y_KP;
            Constants.Show_prop_ki_y = AllAerocraftData.Prop_Y_KI;

            Constants.Show_New_YK_roll = AllAerocraftData.New_YK_roll;//New_YK_roll
            Constants.Show_New_YK_pitch = AllAerocraftData.New_YK_pitch;//New_YK_pitch
            Constants.Show_New_YK_throttle = AllAerocraftData.New_YK_throttle;//New_YK_throttle
            Constants.Show_New_YK_yaw = AllAerocraftData.New_YK_yaw;//New_YK_yaw
            Constants.Show_New_YK_switch1 = AllAerocraftData.New_YK_switch1;//New_YK_switch1
            Constants.Show_New_YK_switch2 = AllAerocraftData.New_YK_switch2;//New_YK_switch2
            Constants.Show_New_YK_switch3 = AllAerocraftData.New_YK_switch3;//New_YK_switch3
            Constants.Show_New_YK_switch4 = AllAerocraftData.New_YK_switch4;//New_YK_switch4
            Constants.Show_New_YK_Minroll = AllAerocraftData.New_YK_Minroll;//New_YK_Minroll
            Constants.Show_New_YK_Minpitch = AllAerocraftData.New_YK_Minpitch;//New_YK_Minpitch
            Constants.Show_New_YK_Minthrottle = AllAerocraftData.New_YK_Minthrottle;//New_YK_Minthrottle
            Constants.Show_New_YK_MinYaw = AllAerocraftData.New_YK_MinYaw;//New_YK_MinYaw
            Constants.Show_New_YK_Minswitch1 = AllAerocraftData.New_YK_Minswitch1;//New_YK_Minswitch1
            Constants.Show_New_YK_Minswitch2 = AllAerocraftData.New_YK_Minswitch2;//New_YK_Minswitch2
            Constants.Show_New_YK_Minswitch3 = AllAerocraftData.New_YK_Minswitch3;//New_YK_Minswitch3
            Constants.Show_New_YK_Minswitch4 = AllAerocraftData.New_YK_Minswitch4;//New_YK_Minswitch4
            Constants.Show_New_YK_Maxroll = AllAerocraftData.New_YK_Maxroll;//New_YK_Maxroll
            Constants.Show_New_YK_Maxpitch = AllAerocraftData.New_YK_Maxpitch;//New_YK_Maxpitch
            Constants.Show_New_YK_Maxthrottle = AllAerocraftData.New_YK_Maxthrottle;//New_YK_Maxthrottle
            Constants.Show_New_YK_MaxYaw = AllAerocraftData.New_YK_MaxYaw;//New_YK_MaxYaw
            Constants.Show_New_YK_Maxswitch1 = AllAerocraftData.New_YK_Maxswitch1;//New_YK_Maxswitch1
            Constants.Show_New_YK_Maxswitch2 = AllAerocraftData.New_YK_Maxswitch2;//New_YK_Maxswitch2
            Constants.Show_New_YK_Maxswitch3 = AllAerocraftData.New_YK_Maxswitch3;//New_YK_Maxswitch3
            Constants.Show_New_YK_Maxswitch4 = AllAerocraftData.New_YK_Maxswitch4;//New_YK_Maxswitch4
            Constants.Show_SuccessOrFail = AllAerocraftData.SuccessOrFail;//SuccessOrFail
            Constants.Show_RebackOrNotReback = AllAerocraftData.RebackOrNotReback;//是否反向


            ///////////////////////////////归一化之后的变量////////////////////////////////////////////////////////////

            Constants.Show_guiyi_YK_roll = AllAerocraftData.Change_New_YK_roll;
            Constants.Show_guiyi_YK_pitch = AllAerocraftData.Change_New_YK_pitch;
            Constants.Show_guiyi_YK_throttle = AllAerocraftData.Change_New_YK_throttle;
            Constants.Show_guiyi_YK_yaw = AllAerocraftData.Change_New_YK_yaw;
            Constants.Show_guiyi_YK_switch1 = AllAerocraftData.Change_New_YK_switch1;
            Constants.Show_guiyi_YK_switch2 = AllAerocraftData.Change_New_YK_switch2;
            Constants.Show_guiyi_YK_switch3 = AllAerocraftData.Change_New_YK_switch3;
            Constants.Show_guiyi_YK_switch4 = AllAerocraftData.Change_New_YK_switch4;

            Constants.Show_zitai_p = AllAerocraftData.ZiTai_P;
            Constants.Show_zitai_i = AllAerocraftData.ZiTai_I;
            Constants.Show_zitai_d = AllAerocraftData.ZiTai_D;
            Constants.Show_hangxiang_p = AllAerocraftData.HangXiang_P;
            Constants.Show_hangxiang_i = AllAerocraftData.HangXiang_I;
            Constants.Show_hangxiang_d = AllAerocraftData.HangXiang_D;
            Constants.Show_sudu_p = AllAerocraftData.SuDu_P;
            Constants.Show_sudu_i = AllAerocraftData.SuDu_I;
            Constants.Show_sudu_d = AllAerocraftData.SuDu_D;
            Constants.Show_gaodu_p = AllAerocraftData.GaoDu_P;
            Constants.Show_gaodu_i = AllAerocraftData.GaoDu_I;
            Constants.Show_gaodu_d = AllAerocraftData.GaoDu_D;

            Constants.Acc_Noise_ValueShow = AllAerocraftData.Zacc_Noise;
            Constants.Prop_Failure_Code = AllAerocraftData.Prop_Failure_Code; ;//遥控器解锁错误码
        }

          /// <summary>
        /// Get the target com num.
        /// </summary>
        /// /// <returns></returns>
        public static int GetComNum()
       {
          int comNum = -1;
          string[] strArr = GetHarewareInfo(HardwareEnum.Win32_PnPEntity, "Name");
          foreach (string s in strArr)
          {
             Debug.WriteLine(s);
             if (s.Contains("USB Serial Port"))
             {
                 int start = s.IndexOf("(") + 3;
                 int end = s.IndexOf(")");
                 comNum = Convert.ToInt32(s.Substring(start + 1, end - start - 1));
              }
           }
           return comNum;
        }
         /// <summary>
          /// Get the system devices information with windows api.
          /// </summary>
         /// <param name="hardType">Device type.</param>
          /// <param name="propKey">the property of the device.</param>
          /// <returns></returns>
          private static string[] GetHarewareInfo(HardwareEnum hardType, string propKey)
         {
 
             List<string> strs = new List<string>();
              try
              {
                  using (ManagementObjectSearcher searcher = new ManagementObjectSearcher("select * from " + hardType))
                  {
                     var hardInfos = searcher.Get();
                     foreach (var hardInfo in hardInfos)
                     {
                         if (hardInfo.Properties[propKey].Value != null)
                        {
                              String str = hardInfo.Properties[propKey].Value.ToString();
                              strs.Add(str);
                          }
  
                      }
                 }
                  return strs.ToArray();
              }
              catch
              {
                 return null;
             }
             finally
              { 
                 strs = null;
             }
         }//end of func GetHarewareInfo().
  
      /// <summary>
      /// 枚举win32 api
      /// </summary>
      public enum HardwareEnum
     {
          // 硬件
          Win32_Processor, // CPU 处理器
          Win32_PhysicalMemory, // 物理内存条
          Win32_Keyboard, // 键盘
          Win32_PointingDevice, // 点输入设备，包括鼠标。
          Win32_FloppyDrive, // 软盘驱动器
          Win32_DiskDrive, // 硬盘驱动器
          Win32_CDROMDrive, // 光盘驱动器
          Win32_BaseBoard, // 主板
          Win32_BIOS, // BIOS 芯片
          Win32_ParallelPort, // 并口
          Win32_SerialPort, // 串口
          Win32_SerialPortConfiguration, // 串口配置
          Win32_SoundDevice, // 多媒体设置，一般指声卡。
          Win32_SystemSlot, // 主板插槽 (ISA & PCI & AGP)
          Win32_USBController, // USB 控制器
          Win32_NetworkAdapter, // 网络适配器
          Win32_NetworkAdapterConfiguration, // 网络适配器设置
          Win32_Printer, // 打印机
          Win32_PrinterConfiguration, // 打印机设置
          Win32_PrintJob, // 打印机任务
          Win32_TCPIPPrinterPort, // 打印机端口
          Win32_POTSModem, // MODEM
          Win32_POTSModemToSerialPort, // MODEM 端口
          Win32_DesktopMonitor, // 显示器
          Win32_DisplayConfiguration, // 显卡
          Win32_DisplayControllerConfiguration, // 显卡设置
          Win32_VideoController, // 显卡细节。
          Win32_VideoSettings, // 显卡支持的显示模式。
  
          // 操作系统
         Win32_TimeZone, // 时区
         Win32_SystemDriver, // 驱动程序
         Win32_DiskPartition, // 磁盘分区
         Win32_LogicalDisk, // 逻辑磁盘
         Win32_LogicalDiskToPartition, // 逻辑磁盘所在分区及始末位置。
         Win32_LogicalMemoryConfiguration, // 逻辑内存配置
         Win32_PageFile, // 系统页文件信息
         Win32_PageFileSetting, // 页文件设置
         Win32_BootConfiguration, // 系统启动配置
         Win32_ComputerSystem, // 计算机信息简要
         Win32_OperatingSystem, // 操作系统信息
         Win32_StartupCommand, // 系统自动启动程序
         Win32_Service, // 系统安装的服务
         Win32_Group, // 系统管理组
         Win32_GroupUser, // 系统组帐号
         Win32_UserAccount, // 用户帐号
         Win32_Process, // 系统进程
         Win32_Thread, // 系统线程
         Win32_Share, // 共享
         Win32_NetworkClient, // 已安装的网络客户端
         Win32_NetworkProtocol, // 已安装的网络协议
         Win32_PnPEntity,//all device
     }
     public  void Function_Wait_ExternShow()
    {
        if (Wifi_Success_Connect_Flag == true || Dat_Save_Flag == 1)
        {
            Function_Wait();
        }
    }
        public void Function_Modify_Marker(PointData Modify_WaypointData)
     {
         try
         {
             if (ProjectList_X.Count > 0)
             {
                 if ((WaypointSelect_X[0] - 1) >= 0)
                 {
                     ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Latitude = Modify_WaypointData.Lat;
                     ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Longitude = Modify_WaypointData.Lon;
                     ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Height = Modify_WaypointData.Alt;
                     ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Heading = Modify_WaypointData.Yaw;
                     ProjectList_X[BaseSelect].WaypointData[(WaypointSelect_X[0] - 1)].Speed = Modify_WaypointData.Speed;

                     /********************************先清除地图上的轨迹****************************************************************************/
                     //先清空作为中间存储的空间
                     ProjectList_MiddleSavecount = ProjectList_X[BaseSelect].WaypointData.Count;//记录下路点的个数
                     for (int i = 0; i < ProjectList_X[BaseSelect].WaypointData.Count; i++)//将改变后的数据存储的临时空间
                     {
                         ProjectList_MiddleSavelat[i] = ProjectList_X[BaseSelect].WaypointData[i].Latitude;
                         ProjectList_MiddleSavelon[i] = ProjectList_X[BaseSelect].WaypointData[i].Longitude;
                         ProjectList_MiddleSaveheading[i] = ProjectList_X[BaseSelect].WaypointData[i].Heading;
                         ProjectList_MiddleSaveheight[i] = ProjectList_X[BaseSelect].WaypointData[i].Height;
                         ProjectList_MiddleSavevelocity[i] = ProjectList_X[BaseSelect].WaypointData[i].Speed;
                     }
                     ///////////////////////////////////////////////////////////清空原来的存储空间及地图显示/////////////////////////////////////////////
                     MissionDel_X(BaseSelect);
                     PointCount = 0;
                     MainMonitorClear();
                     DrawTrack_Count = 0;
                     /**********************************先清除地图上的轨迹***********************************************************************/
                     ////////////////////////////重新追加base点/////////////////////////////////////////////////////
                     MissionAndBaseMarkerAdd_X();					// Base追加
                     ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));				// ProjectRecord追加
                     ////////////////////////////重新追加base点/////////////////////////////////////////////////////
                     for (int j = 0; j < ProjectList_MiddleSavecount; j++)//将数据重新装回空间
                     {
                         PointLatLng Waypoint_Middle = new PointLatLng();							//Waypoint位置
                         Waypoint_Middle.Lat = ProjectList_MiddleSavelat[j];
                         Waypoint_Middle.Lng = ProjectList_MiddleSavelon[j];
                         Marker_Set_Heading = ProjectList_MiddleSaveheading[j];
                         Marker_Set_Height = ProjectList_MiddleSaveheight[j];
                         Marker_Set_Velocity = ProjectList_MiddleSavevelocity[j];
                         WaypointAndPathMakeAdd_X(Waypoint_Middle, 0);
                     }

                     ////////////准备修改部分////////////////////
                     if (Constants.If_WaypointReAction_Flag == 1)
                     {
                         for (int ii = 0; ii < 100; ii++)
                         {
                             WayPoint_SetIndex[ii] = (WayPoint_SetIndex[ii] | 0x08);//如果一旦路点是否循环选择了循环，所有点都循环
                         }
                     }
                     else
                     {
                         for (int ii = 0; ii < 100; ii++)
                         {
                             WayPoint_SetIndex[ii] = (WayPoint_SetIndex[ii] & 0xf7);//如果一旦路点是否循环选择了循环，所有点都循环
                         }
                     }

                     if (Constants.If_Reback_Flag == 1)
                     {
                         for (int ii = 0; ii < 100; ii++)
                         {
                             WayPoint_SetIndex[ii] = (WayPoint_SetIndex[ii] | 0x10);//如果一旦路点执行完返航就让所有点置1
                         }
                     }
                     else
                     {
                         for (int ii = 0; ii < 100; ii++)
                         {
                             WayPoint_SetIndex[ii] = (WayPoint_SetIndex[ii] & 0xEF);//如果一旦路点执行完不返航，所有点置0
                         }
                     }


                     WayPoint_SetIndex[(WaypointSelect_X[0] - 1)] = (int)Modify_WaypointData.mmWayPoint_SetIndexEdit;//路点设置
                     WayPoint_KeepIndex1[(WaypointSelect_X[0] - 1)] = (int)Modify_WaypointData.mmWayPoint_KeepIndex1Edit;//保留位1
                     WayPoint_Height[(WaypointSelect_X[0] - 1)] = Modify_WaypointData.mmWayPoint_HeightEdit;//高度
                     WayPoint_Yaw[(WaypointSelect_X[0] - 1)] = Modify_WaypointData.mmWayPoint_YawEdit;//航向
                     WayPoint_HengxiangSudu[(WaypointSelect_X[0] - 1)] = Modify_WaypointData.mmWayPoint_HengxiangSuduEdit;//横向速度
                     WayPoint_ZongshangSudu[(WaypointSelect_X[0] - 1)] = Modify_WaypointData.mmWayPoint_ZongshangSuduEdit;//向上速度
                     WayPoint_ZongxiaSudu[(WaypointSelect_X[0] - 1)] = Modify_WaypointData.mmWayPoint_ZongxiaSuduEdit;//向下速度
                     WayPoint_HoverTimer[(WaypointSelect_X[0] - 1)] = Modify_WaypointData.mmWayPoint_HoverTimerEdit;//悬停时间
                     WayPoint_KeepIndex2[(WaypointSelect_X[0] - 1)] = Modify_WaypointData.mmWayPoint_KeepIndex2Edit;//保留位2
                 }
                 else
                 {
                     System.Windows.MessageBox.Show("Please Set Waypoint First");
                     return;
                 }
             }
             else
             {
                 System.Windows.MessageBox.Show("Please New The Plan");
                 return;
             }
         }
         catch
         {
             System.Windows.MessageBox.Show("Please Set The Waypoint And Choose The Modify Waypoint");
         }
     }
        public void Function_Data_PlayBack()
        {
            String line1 = Constants.History_DataReader_Back.ReadLine();
            if (line1 != null && line1 != "")
            {
                //////////////////////数据回放临时存储的空间///////////////////////////
                    String[] Data_Back = line1.Split(' ');
                    for (int i = 0; i < Data_Back.Length; i++)
                    {
                        if (Data_Back[i] == "" || Data_Back.Length!=90)
                        {
                            return;
                        }
                    }

                        AllAerocraftData.Roll = (float)Convert.ToDouble(Data_Back[0]);//Roll
                        AllAerocraftData.Pitch = (float)Convert.ToDouble(Data_Back[1]);//pitch
                        AllAerocraftData.Yaw = (float)Convert.ToDouble(Data_Back[2]);//Yaw
                        AllAerocraftData.P = (float)Convert.ToDouble(Data_Back[3]);//rollrate
                        AllAerocraftData.Q = (float)Convert.ToDouble(Data_Back[4]);//pitchrate
                        AllAerocraftData.R = (float)Convert.ToDouble(Data_Back[5]);//yawrate
                        AllAerocraftData.XAcc = (float)Convert.ToDouble(Data_Back[6]);//xacc
                        AllAerocraftData.YAcc = (float)Convert.ToDouble(Data_Back[7]);//yacc
                        AllAerocraftData.ZAcc = (float)Convert.ToDouble(Data_Back[8]);//zacc
                        AllAerocraftData.XMag = (float)Convert.ToDouble(Data_Back[9]);//magx
                        AllAerocraftData.YMag = (float)Convert.ToDouble(Data_Back[10]);//magy
                        AllAerocraftData.ZMag = (float)Convert.ToDouble(Data_Back[11]);//magz
                        AllAerocraftData.LRoll = (long)Convert.ToDouble(Data_Back[12]);//prop_roll
                        AllAerocraftData.LPitch = (long)Convert.ToDouble(Data_Back[13]);//prop_pitch
                        AllAerocraftData.LYaw = (long)Convert.ToDouble(Data_Back[14]);//prop_yaw
                        AllAerocraftData.LPower = (long)Convert.ToDouble(Data_Back[15]);//prop_throttle
                        AllAerocraftData.BSw1 = (uint)Convert.ToDouble(Data_Back[16]);//Stitch_A
                        AllAerocraftData.BSw2 = (uint)Convert.ToDouble(Data_Back[17]);//Switch_B
                        AllAerocraftData.BSw3 = (uint)Convert.ToDouble(Data_Back[18]);//Switch_C
                        AllAerocraftData.BSw4 = (uint)Convert.ToDouble(Data_Back[19]);//Switch_D
                        AllAerocraftData.Motor_F = (float)Convert.ToDouble(Data_Back[20]);//Motor_M1
                        AllAerocraftData.Motor_B = (float)Convert.ToDouble(Data_Back[21]);//Motor_M2
                        AllAerocraftData.Motor_L = (float)Convert.ToDouble(Data_Back[22]);//Motor_M3
                        AllAerocraftData.Motor_R = (float)Convert.ToDouble(Data_Back[23]);//Motor_M4
                        AllAerocraftData.Motor_X = (float)Convert.ToDouble(Data_Back[24]);//Motor_M5
                        AllAerocraftData.Motor_Y = (float)Convert.ToDouble(Data_Back[25]);//Motor_M6
                        AllAerocraftData.AutoWingTransverseVelocity = (float)Convert.ToDouble(Data_Back[26]);//GPS_Vn
                        AllAerocraftData.AutoWingLongitudinalVelocity = (float)Convert.ToDouble(Data_Back[27]);//GPS_Ve
                        AllAerocraftData.AutoWingUpAndDownVelocity = (float)Convert.ToDouble(Data_Back[28]);//GPS_Vd
                        AllAerocraftData.AutoWingLongitude = (double)Convert.ToDouble(Data_Back[29]);//GPS_Lon
                        AllAerocraftData.AutoWingLatitude = (double)Convert.ToDouble(Data_Back[30]);//GPS_Lat 
                        AllAerocraftData.AutoWingAltitude = (float)Convert.ToDouble(Data_Back[31]);//GPS_Alt3
                        AllAerocraftData.GPS_Heading = (float)Convert.ToDouble(Data_Back[32]);//GPS_Heading
                        AllAerocraftData.AutoWingStarNum = (int)Convert.ToDouble(Data_Back[33]);//GPS_StarNum
                        AllAerocraftData.New_GPS_Dop = (float)Convert.ToDouble(Data_Back[34]);//GPS_Dop
                        AllAerocraftData.New_Bara_Alt = (float)Convert.ToDouble(Data_Back[35]);//bara_Alt3
                        AllAerocraftData.AutoWingVoltValue = (float)Convert.ToDouble(Data_Back[36]);//Battery
                        AllAerocraftData.AutoWingFlightMode = (int)Convert.ToDouble(Data_Back[37]);//Flight_Mode
                        AllAerocraftData.AutoWingSensorState = (int)Convert.ToDouble(Data_Back[38]);//IMU_State
                        AllAerocraftData.AutoWingCommunitationState = (int)Convert.ToDouble(Data_Back[39]);//Health_State
                        AllAerocraftData.New_Data1_Undefined1 = (int)Convert.ToDouble(Data_Back[40]);//待定值1
                        AllAerocraftData.New_Data1_Undefined2 = (int)Convert.ToDouble(Data_Back[41]);//待定值2
                        AllAerocraftData.New_Data1_Undefined3 = (int)Convert.ToDouble(Data_Back[42]);//待定值3
                        AllAerocraftData.New_Data1_Undefined4 = (int)Convert.ToDouble(Data_Back[43]);//待定值4
                        AllAerocraftData.New_Data1_Undefined5 = (int)Convert.ToDouble(Data_Back[44]);//待定值5
                        AllAerocraftData.New_Frame_Type = (float)Convert.ToDouble(Data_Back[45]);//Frame_Type
                        AllAerocraftData.New_Motor_Starting_Percent = (float)Convert.ToDouble(Data_Back[46]);//Motor_Starting_Percent
                        AllAerocraftData.New_Param_Headfile_Num = (Int32)Convert.ToDouble(Data_Back[47]);//Param_Headfile_Num
                        AllAerocraftData.XbeeRecv = (int)Convert.ToDouble(Data_Back[48]);
                        if (AllAerocraftData.XbeeRecv == 255)
                        {
                            Xbee_Health.Reply();
                        }
                        AllAerocraftData.New_Vesion_AP = (float)Convert.ToDouble(Data_Back[49]);//Vesion_AP
                        AllAerocraftData.New_Vesion_IMU = (float)Convert.ToDouble(Data_Back[50]);//Vesion_IMU
                        AllAerocraftData.AutoWing_Tasete_Hour = (int)Convert.ToDouble(Data_Back[51]);//Cumlative_Hour
                        AllAerocraftData.AutoWing_Tasete_Second = (int)Convert.ToDouble(Data_Back[52]);//Cumlative_Second
                        AllAerocraftData.AutoWingDataPacket = (int)Convert.ToDouble(Data_Back[53]);//Waypoint_Group
                        AllAerocraftData.AutoWingMarkerNums = (int)Convert.ToDouble(Data_Back[54]);//Waypoint_Size
                        AllAerocraftData.AutoWingWhichMarker = (int)Convert.ToDouble(Data_Back[55]);//Waypoint_Num
                        AllAerocraftData.Set_Pensa_Sudu = (float)Convert.ToDouble(Data_Back[56]);//Max_Velocity
                        AllAerocraftData.Set_Pensa_Juli = (float)Convert.ToDouble(Data_Back[57]);//Max_Distance
                        AllAerocraftData.Set_Pensa_Gaodu = (float)Convert.ToDouble(Data_Back[58]);//Max_Altitude
                        AllAerocraftData.Set_Pensa_Banjing = (float)Convert.ToDouble(Data_Back[59]);//Max_Spraying_Swath
                        AllAerocraftData.New_Ref_Roll = (float)Convert.ToDouble(Data_Back[60]);//Ref_Roll
                        Constants.Progres_DataCount++;
            }
            else
            {
                Constants.Play_Data_Back_Flag = false;
                Constants.History_DataReader_Back.Close();
                Constants.History_DataPlay_Back.Close();
                Constants.History_DataPlay_Back.Dispose();
                Constants.Progres_DataCount = 0;
                System.Windows.MessageBox.Show("Playback End");
            }
        }

        private void UnLock_Btn_Click(object sender, RoutedEventArgs e)
        {
            System.Windows.MessageBox.Show("This Function Is Not Open Temporarily");
        }

        private void StopOrReback_Btn_Click(object sender, RoutedEventArgs e)
        {
            System.Windows.MessageBox.Show("This Function Is Not Open Temporarily");
            return;
            if(StopOrReback_Flag==0)
            {
                StopOrReback_Flag = 1;
                StopOrReback_Btn.ToolTip = "恢复之前的任务";
                StopOrReback_Btn.Content = "恢复";
            }
            else if(StopOrReback_Flag==1)
            {
                StopOrReback_Flag = 0;
                StopOrReback_Btn.ToolTip = "紧急暂停当前任务";
                StopOrReback_Btn.Content = "暂停";
            }
        }

        private void Show_Index_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ProjectList_Marker.Count > 0)
            {
                if (ProjectList_Marker[0].WaypointData.Count > 2)
                {
                    Make_MultiPenSa_Plan();
                }
            }
        }
        private void Function_MoveDirection_Clear()
        {
            Lock_Marker_Flag = false;
            AreaChoose_MissionDel_X(0);//这边是ABC区域marker基准点
            AreaChooseMarkerMessionAdd_X();//这边是ABC区域marker基准点
            AutoWing_MissionDel_X(0);//这边是区域marker基准点
            AutoWingMarkerMessionAdd_X();//这边是区域marker基准
            Distance_MissionDel_X(0);//这边是区域marker基准点
            DistanceMarkerMessionAdd_X();//这边是区域marker基
            WayPoint_NumS = 0;
            MissionDel_X(0);
            MissionAndBaseMarkerAdd_X();					// Base追加
            ProjectRecord_X.Add(ProjectDeepCopy_X(ProjectList_X));				// ProjectRecord追加
            DrawTrack_Count = 0;
            Start_DrawRoute_Flag = 1;
            m_make_click = 0;
            fanganshengcheng.Content = "方案生成";
            Work_Record.Content = "";
        }
        private void Function_FourthDirection(int ID, int Area_All_NumCount)
        {
            double[] Direction_Lat = new double[50];
            double[] Direction_Lng = new double[50];
            //////////////////////////////////////////////////////////先清空/////////////////////////////////////////////
            Function_MoveDirection_Clear();
            /////////////////////////////////////////////////////////修改区域点///////////////////////////////////////////
            for (int i = 0; i < Area_All_NumCount; i++)
            {
                UpdateMeterPerDeg(zhf_lat[i], zhf_lon[i]);//更新每经纬度对应的距离值
                if (ID ==0)//前
                {
                    Direction_Lat[i] = zhf_lat[i] + ((1 * Math.Cos(0)) / m_dMeterPerDeg_Latitude);
                    Direction_Lng[i] = zhf_lon[i] + ((1 * Math.Sin(0)) / m_dMeterPerDeg_Longitude);
                }
                if(ID ==1)//后
                {
                    Direction_Lat[i] = zhf_lat[i] - ((1 * Math.Cos(0)) / m_dMeterPerDeg_Latitude);
                    Direction_Lng[i] = zhf_lon[i] - ((1 * Math.Sin(0)) / m_dMeterPerDeg_Longitude);
                }
                if(ID ==2)//左
                {
                    Direction_Lat[i] = zhf_lat[i] + ((1 * Math.Sin(0)) / m_dMeterPerDeg_Latitude);
                    Direction_Lng[i] = zhf_lon[i] - ((1 * Math.Cos(0)) / m_dMeterPerDeg_Longitude);
                }
                if(ID ==3)//右
                {
                    Direction_Lat[i] = zhf_lat[i] - ((1 * Math.Sin(0)) / m_dMeterPerDeg_Latitude);
                    Direction_Lng[i] = zhf_lon[i] + ((1 * Math.Cos(0)) / m_dMeterPerDeg_Longitude);
                }
            }
            /////////////////////////////////////////////////增加手动点击的marker////////////////////////////////////////////
            for (int i = 0; i < Area_All_NumCount; i++)
            {
                PointLatLng Waypoint_Name = new PointLatLng();
                Waypoint_Name.Lng = Direction_Lng[i];//获取保存的经度点
                Waypoint_Name.Lat = Direction_Lat[i];//获取保存的纬度点
                WaypointAndPathAdd2_X(Waypoint_Name, 0);
                Autowing_WaypointAndPathAdd2_X(Waypoint_Name, 0);		// Waypoint追加
                if (ProjectList_Marker[0].WaypointData.Count > 2)
                {
                    Make_MultiPenSa_Plan();
                }
                ////////////////////////////增加距离的marker//////////////////////////////////////////////////
                if (ProjectList_Marker[0].WaypointData.Count > 1)
                {
                    Distance_WaypointAndPathAdd_X();		// Waypoint追加
                }
            }

        }
        public void Function_Reback_Before()
        {
            //////////////////////////////////////////////////////////先清空/////////////////////////////////////////////
            Function_MoveDirection_Clear();
            /////////////////////////////////////////////////增加手动点击的marker////////////////////////////////////////////
            for (int i = 0; i < Reback_Num; i++)
            {
                PointLatLng Waypoint_Name = new PointLatLng();
                Waypoint_Name.Lng = Reback_lon[i];//获取保存的经度点
                Waypoint_Name.Lat = Reback_lat[i];//获取保存的纬度点
                WaypointAndPathAdd2_X(Waypoint_Name, 0);
                Autowing_WaypointAndPathAdd2_X(Waypoint_Name, 0);		// Waypoint追加
                if (ProjectList_Marker[0].WaypointData.Count > 2)
                {
                    Make_MultiPenSa_Plan();
                }
                ////////////////////////////增加距离的marker//////////////////////////////////////////////////
                if (ProjectList_Marker[0].WaypointData.Count > 1)
                {
                    Distance_WaypointAndPathAdd_X();		// Waypoint追加
                }
            }
        }
        public bool Function_Move_FourthDirection(int Direction_ID)
        {
            int Area_All_NumCount = 0;
            if (ProjectList_X.Count > 0)
            {
                if (ProjectList_Marker[0].WaypointData.Count > 2 && ProjectList_Marker[0].WaypointData.Count<51)
                {
                    Area_All_NumCount = ProjectList_Marker[0].WaypointData.Count;
                     if(Constants.WayPointMove_Flag==0)//第一次点的话将经纬度点保存下来
                     {
                         Constants.WayPointMove_Flag = 1;
                         for (int i = 0; i < 50; i++)
                         {
                             Reback_lat[i] = zhf_lat[i];
                             Reback_lon[i] = zhf_lon[i];
                             Reback_Num = Area_All_NumCount;
                         }
                     }

                }
                else
                {
                    return false;
                }
            }
            else
           {
               return false;
           }
            switch (Direction_ID)//四个方向
            {
                case 0://正北方向
                    Function_FourthDirection(0, Area_All_NumCount);
                    return true;
                case 1://正南方向
                    Function_FourthDirection(1, Area_All_NumCount);
                    return true;
                case 2://正西方向
                    Function_FourthDirection(2, Area_All_NumCount);
                    return true;
                case 3://正东方向
                    Function_FourthDirection(3, Area_All_NumCount);
                    return true;
                default:
                    return false;
            }
            
        }

/// <summary>
/// 测试内缩点的算法//////
/// </summary>
        public void Function_NeiSuo()
        {
            PointLatLng[] pList = new PointLatLng[50];//// 原始顶点坐标
            PointLatLng[] dpList = new PointLatLng[50];//// // 边向量dpList［i＋1］－ dpLIst［i］
            PointLatLng[] ndpList = new PointLatLng[50];//// 单位化的边向量 
            PointLatLng[] newList = new PointLatLng[50];//新的折线顶点
            ////////第一个顶点///////
            pList[0].Lat = 31.8873397;
            pList[0].Lng = 118.8706031;
            ///////第二个顶点///////
            pList[1].Lat = 31.8878226;
            pList[1].Lng = 118.8706300;
            ///////第三个顶点///////
            pList[2].Lat = 31.8878977;
            pList[2].Lng = 118.8713729;
            //////第四个顶点///////
            pList[3].Lat = 31.8876540;
            pList[3].Lng = 118.8716975;
            ///////第五个顶点///////
            pList[4].Lat = 31.8873056;
            pList[4].Lng = 118.8715419;
///////////////////////////计算向量差/////////////////////////
            for(int i=0;i<5;i++)
            {
                if(i==4)
                {
                    dpList[4].Lat = (pList[0].Lat - pList[4].Lat);
                    dpList[4].Lng = (pList[0].Lng - pList[4].Lng);
                }
                else
                {
                    dpList[i].Lat = (pList[i + 1].Lat - pList[i].Lat);
                    dpList[i].Lng = (pList[i + 1].Lng - pList[i].Lng);
                }
            }
// 初始化ndpList，单位化两顶点向量差
            for(int i=0;i<5;i++)
            {
                ndpList[i].Lat = (dpList[i].Lat * (1.0 / Math.Sqrt((double)(dpList[i].Lat * dpList[i].Lat + dpList[i].Lng * dpList[i].Lng))));
                ndpList[i].Lng = (dpList[i].Lng * (1.0 / Math.Sqrt((double)(dpList[i].Lat * dpList[i].Lat + dpList[i].Lng * dpList[i].Lng))));
            }
// 计算新顶点， 注意参数为负是向内收缩， 为正是向外扩张
            for(int i=0;i<5;i++)
            {
                PointLatLng point = new PointLatLng();//新的折线顶点
                PointLatLng vector = new PointLatLng();//新的折线顶点
                int startIndex;
                int endIndex;
                double sina = 0.0;
                double length =0.0;
                startIndex = i;
                if(startIndex==0)
                {
                    startIndex = 4;
                }
                else
                {
                    startIndex = i-1;
                }
                endIndex = i;
                sina = (ndpList[startIndex].Lat * ndpList[endIndex].Lng - ndpList[startIndex].Lng * ndpList[endIndex].Lat);


                UpdateMeterPerDeg(ndpList[startIndex].Lat, ndpList[endIndex].Lng);//更新每经纬度对应的距离值
                double m_dMeterPerDeg_LatLng = 0.0;
                m_dMeterPerDeg_LatLng = Math.Sqrt((m_dMeterPerDeg_Latitude*m_dMeterPerDeg_Latitude+m_dMeterPerDeg_Longitude*m_dMeterPerDeg_Longitude));
                double dist =  (-10)*(1.0 / m_dMeterPerDeg_LatLng);

                length = dist / sina;
                vector.Lat = (ndpList[endIndex].Lat - ndpList[startIndex].Lat);
                vector.Lng = (ndpList[endIndex].Lng - ndpList[startIndex].Lng);
                point.Lat = (pList[i].Lat + vector.Lat * length);
                point.Lng = (pList[i].Lng + vector.Lng * length);
                newList[i].Lat = point.Lat;
                newList[i].Lng = point.Lng;
            }

        }



        public void Function_ObstacleAndPath_Plan()
        {
///////////////////////////////////第一种情况少于三个点的话直接添加障碍点即可///////////////////////////////////////////////////
            if (ProjectList_X.Count > 0)
            {
                if (ProjectList_Marker[0].WaypointData.Count > 2 && ProjectList_Marker[0].WaypointData.Count < 51)
                {

                }
                else if (ProjectList_Marker[0].WaypointData.Count < 3)
                {

                }
            }
///////////////////////////////////第二种情况大于等于三个点的话需要将障碍点考虑进去添加////////////////////////////////////////////////
        }
        public bool Function_Retraction_Area()
        {
            if (ProjectList_X.Count > 0)
            {
                if (ProjectList_Marker[0].WaypointData.Count > 2)
                {
                    Make_MultiPenSa_Plan();
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        public bool Function_NewMake_Plan()
        {
            if (ProjectList_X.Count > 0)
            {
                if (ProjectList_Marker[0].WaypointData.Count > 2 && ProjectList_Marker[0].WaypointData.Count < 51)
                {
                    ////////////////根据选中的ID将区域点重新排序/////////////
                    double[] New_Area_Lat = new double[50];
                    double[] New_Area_Lng = new double[50];
                    int new_area_count = 0;
                    for(int i=0;i<(ProjectList_Marker[0].WaypointData.Count-Constants.Start_ChooseID);i++)
                    {
                        New_Area_Lat[i] = zhf_lat[i + Constants.Start_ChooseID];
                        New_Area_Lng[i] = zhf_lon[i + Constants.Start_ChooseID];
                    }
                    for(int j=0;j<Constants.Start_ChooseID;j++)
                    {
                        New_Area_Lat[ProjectList_Marker[0].WaypointData.Count - Constants.Start_ChooseID+j] = zhf_lat[j];
                        New_Area_Lng[ProjectList_Marker[0].WaypointData.Count - Constants.Start_ChooseID+j] = zhf_lon[j];
                    }
                    //////////////////////////////////////////////////////////先清空/////////////////////////////////////////////
                    new_area_count = ProjectList_Marker[0].WaypointData.Count;
                    Function_MoveDirection_Clear();
                    /////////////////////////////////////////////////增加手动点击的marker////////////////////////////////////////////
                    for (int i = 0; i < new_area_count; i++)
                    {
                        PointLatLng Waypoint_Name = new PointLatLng();
                        Waypoint_Name.Lng = New_Area_Lng[i];//获取保存的经度点
                        Waypoint_Name.Lat = New_Area_Lat[i];//获取保存的纬度点
                        WaypointAndPathAdd2_X(Waypoint_Name, 0);
                        Autowing_WaypointAndPathAdd2_X(Waypoint_Name, 0);		// Waypoint追加
                        if (ProjectList_Marker[0].WaypointData.Count > 2)
                        {
                            Make_MultiPenSa_Plan();
                        }
                        ////////////////////////////增加距离的marker//////////////////////////////////////////////////
                        if (ProjectList_Marker[0].WaypointData.Count > 1)
                        {
                            Distance_WaypointAndPathAdd_X();		// Waypoint追加
                        }
                    }
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }  
        }

        private void zuoyuan_Click(object sender, RoutedEventArgs e)
        {
            if (Constants.Style_Change_HangPaiAndZhiBao_Flag==0)
            {
                back_color.Width = 896.0;
                banjingwrite.Width = 100;
                ludianxiugai.Width = 100;
                youyuan.Visibility = Visibility.Visible;
                MapRotate.Visibility = Visibility.Visible;
                ludianxiugai.Visibility = Visibility.Visible;
                guijiqingchu.Visibility = Visibility.Visible;
                ludianshangchuan.Visibility = Visibility.Visible;
                fanganbaocun.Visibility = Visibility.Visible;
                dandianshanchu.Visibility = Visibility.Visible;
                jizhunset.Visibility = Visibility.Visible;
                line_one.Visibility = Visibility.Visible;
                pesabanjingtitle.Visibility = Visibility.Visible;
                Show_Index.Visibility = Visibility.Visible;
                zuoyuan.Visibility = Visibility.Visible;
                TotolFlowName.Visibility = Visibility.Visible;
                CurrentFlowRateName.Visibility = Visibility.Visible;
            }
            else
            {
                back_color.Width = 696.0;
                banjingwrite.Width = 0;
                ludianxiugai.Width = 0;
                youyuan.Visibility = Visibility.Visible;
                MapRotate.Visibility = Visibility.Visible;
                ludianxiugai.Visibility = Visibility.Visible;
                guijiqingchu.Visibility = Visibility.Visible;
                ludianshangchuan.Visibility = Visibility.Visible;
                fanganbaocun.Visibility = Visibility.Visible;
                dandianshanchu.Visibility = Visibility.Visible;
                jizhunset.Visibility = Visibility.Visible;
                line_one.Visibility = Visibility.Visible;
                pesabanjingtitle.Visibility = Visibility.Visible;
                Show_Index.Visibility = Visibility.Visible;
                zuoyuan.Visibility = Visibility.Visible;
                TotolFlowName.Visibility = Visibility.Hidden;
                CurrentFlowRateName.Visibility = Visibility.Hidden;
            }

        }
        public void Function_ZhiBao_Show()
        {
            back_color.Width = 896.0;
            banjingwrite.Width = 100;
            ludianxiugai.Width = 100;
            youyuan.Visibility = Visibility.Visible;
            MapRotate.Visibility = Visibility.Visible;
            ludianxiugai.Visibility = Visibility.Visible;
            guijiqingchu.Visibility = Visibility.Visible;
            ludianshangchuan.Visibility = Visibility.Visible;
            fanganbaocun.Visibility = Visibility.Visible;
            dandianshanchu.Visibility = Visibility.Visible;
            jizhunset.Visibility = Visibility.Visible;
            line_one.Visibility = Visibility.Visible;
            pesabanjingtitle.Visibility = Visibility.Visible;
            Show_Index.Visibility = Visibility.Visible;
            zuoyuan.Visibility = Visibility.Visible;
            TotolFlowName.Visibility = Visibility.Visible;
            CurrentFlowRateName.Visibility = Visibility.Visible;
        }
        public void Function_Hangpai_Show()
        {
            back_color.Width = 696.0;
            banjingwrite.Width = 0;
            ludianxiugai.Width = 0;
            youyuan.Visibility = Visibility.Visible;
            MapRotate.Visibility = Visibility.Visible;
            ludianxiugai.Visibility = Visibility.Visible;
            guijiqingchu.Visibility = Visibility.Visible;
            ludianshangchuan.Visibility = Visibility.Visible;
            fanganbaocun.Visibility = Visibility.Visible;
            dandianshanchu.Visibility = Visibility.Visible;
            jizhunset.Visibility = Visibility.Visible;
            line_one.Visibility = Visibility.Visible;
            pesabanjingtitle.Visibility = Visibility.Visible;
            Show_Index.Visibility = Visibility.Visible;
            zuoyuan.Visibility = Visibility.Visible;
            TotolFlowName.Visibility = Visibility.Hidden;
            CurrentFlowRateName.Visibility = Visibility.Hidden;
        }
        private void youyuan_Click(object sender, RoutedEventArgs e)
        {
            back_color.Width = 50.0;
            youyuan.Visibility = Visibility.Hidden;
            MapRotate.Visibility = Visibility.Hidden;
            ludianxiugai.Visibility = Visibility.Hidden;
            guijiqingchu.Visibility = Visibility.Hidden;
            ludianshangchuan.Visibility = Visibility.Hidden;
            fanganbaocun.Visibility = Visibility.Hidden;
            dandianshanchu.Visibility = Visibility.Hidden;
            jizhunset.Visibility = Visibility.Hidden;
            line_one.Visibility = Visibility.Hidden;
            pesabanjingtitle.Visibility = Visibility.Hidden;
            Show_Index.Visibility = Visibility.Hidden;
            zuoyuan.Visibility = Visibility.Visible;
                      
        }
        public void Function_AnQuanCeLue_Refsh(int code,int value)
        {
            switch (code)
            {
                case 0:
                    Constants.Show_UAV_Noticefirstvolt = (float)(value/100.0);
                    break;
                case 1:
                    Constants.Show_UAV_Noticesecondvolt = (float)(value/100.0);
                    break;
                case 2:
                    Constants.Show_UAV_Noticesecondaction = (value);
                    break;
                case 3:
                    Constants.Show_UAV_Noticelosecontrolaction = (value);
                    break;
                case 4:
                    Constants.Show_UAV_Noticedistance = (float)(value);
                    break;
                case 5:
                    Constants.Show_UAV_Noticeheight = (float)(value);
                    break;
                case 6:
                    Constants.Show_UAV_Noticefanhanggaodu = (float)(value / 10.0);
                    break;
                default:
                    break;
            }
        }
         public void Function_HangPaiCanShu_Refsh(int code,int value)
        {
            switch (code)
            {
                case 0:
                    Constants.Show_UAV_HangPaiSpeed = (float)(value / 10.0);
                    break;
                case 1:
                    Constants.Show_UAV_HangPaiUpSpeed = (float)(value / 10.0);//上升速度
                    break;
                case 2:
                    Constants.Show_UAV_HangPaiDownSpeed = (float)(value / 10.0);//下降速度
                    break;
                case 3:
                    Constants.Show_UAV_M9Low = (float)(value / 100.0);
                    break;
                case 4:
                    Constants.Show_UAV_M9Middle = (float)(value / 100.0);
                    break;
                case 5:
                    Constants.Show_UAV_M9High = (float)(value / 100.0);
                    break;
                case 6:
                    Constants.Show_UAV_M10Low = (float)(value / 100.0);//低
                    break;
                case 7:
                    Constants.Show_UAV_M10Middle = (float)(value / 100.0);//高
                    break;
                case 8:
                    Constants.Show_UAV_M10High = (float)(value / 10.0);//保持
                    break;
                default:
                    break;
            }
        }
        public void Function_FeiXingSheZhi_Refsh(int code,int value)
         {
            switch (code)
            {
                case 0:
                    Constants.Show_UAV_Speed = (float)(value / 10.0);
                    break;
                case 1:
                    Constants.Show_UAV_UpSpeed = (float)(value / 10.0);
                    break;
                case 2:
                    Constants.Show_UAV_DownSpeed = (float)(value / 10.0);
                    break;
                case 3:
                    Constants.Show_UAV_Height = (float)(value / 10.0);
                    break;
                case 4:
                    Constants.Show_UAV_AttitudeRange = (float)(value);
                    break;
                case 5:
                    Constants.Show_UAV_Maxhangxiangjiaosudu = (float)(value);//最大航向角速度
                    break;
                default:
                    break;
            }
         }
        public void Function_PlantOperationConfig(int Id_And_Value)
        {
            byte High_Byte = Convert.ToByte(((Id_And_Value & 0x0000ff00) >> 8));//接收到的高8位
            byte Low_Byte = Convert.ToByte(Id_And_Value & 0x000000ff);//接收到的低8位
            int operation_style = High_Byte;
            switch (operation_style)
            {
                case 0://作业速度
                    Constants.Show_UAV_ZhiBaoSpeed = (float)(Low_Byte / 10.0);
                    break;
                case 1://喷洒幅度
                    Constants.Show_UAV_ZhiBaoFuDu = (float)(Low_Byte / 10.0);
                    break;
                case 2://地形跟随
                    Constants.Show_UAV_ZhiBaoAction = Low_Byte;
                    break;
                default:
                    break;
            }
        }
            public void Function_zhibaohangpai_Refsh(int value)
            {
                Constants.Show_UAV_CurrentStyle = AllAerocraftData.Hangpaizhibao_Value;
            }
    }

    public static class DeepCopyHelper_X
    {
        public static T DeepCopy<T>(T target)
        {

            T result;
            BinaryFormatter b = new BinaryFormatter();

            MemoryStream mem = new MemoryStream();

            try
            {
                b.Serialize(mem, target);
                mem.Position = 0;
                result = (T)b.Deserialize(mem);
            }
            finally
            {
                mem.Close();
            }

            return result;

        }
    }
}