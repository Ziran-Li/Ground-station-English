//
//		DataConv.h
//
//		通信用データ変換関数
//
//		'08/10/08	Ver 1.00	初版                                      by iwakura
//		'08/12/10	Ver 1.00.1	cppファイルに一部移行                     by iwakura
//		'09/04/09	Ver 1.01	ConvRadTo2Byte, Dec2ByteToRad 関数を追加  by iwakura
//		'12/05/03	Ver 1.02	Conv1To2Byte, Dec2ByteTo1 関数を追加      by iwakura
//
//

#ifndef INCLUDED_DATACONV_H
#define INCLUDED_DATACONV_H

#include "common/CompatibleDefine/typedefine.h"
#include "Globaldef.h"

//*******************************************************************************
//	角度値を5バイトのデータに変換する．
//
//	引数：
//		degree - 角度値．-180〜180の範囲で指定．
//
//	Note:
//		緯度経度の角度情報の保存には5バイトで十分．
//		発生する距離の誤差は大きく見積もっても 100マイクロメートル．
//*******************************************************************************
inline _SQWORD ConvDegTo5Byte(double degree)
{
	return (_SQWORD)((degree + 180.0) * 3054198966.0444444444444444444444) & (_SQWORD)0x000000FFFFFFFFFF;
}

//*******************************************************************************
//	5バイトのデータから角度値を復元する
//
//	引数：
//		data - ConvDegTo5Byteで変換した5バイトのデータ
//*******************************************************************************
inline double Dec5ByteToDeg(_SQWORD data)
{
	return (data & (_SQWORD)0x000000FFFFFFFFFF) * 3.274180926382541656494140625e-10 - 180.0;
}

//*******************************************************************************
//	角度値を2バイトのデータに変換する．
//
//	引数：
//		degree - 角度値．-180〜180の範囲で指定．
//
//	Note:
//		最大誤差は約0.00549
//*******************************************************************************
inline _SWORD ConvDegTo2Byte(double degree)
{
	return (_SWORD)(degree * 182.04444444444444444444444444444);
}

//*******************************************************************************
//	2バイトのデータから角度値を復元する
//
//	引数：
//		data - ConvDegTo2Byteで変換した2バイトのデータ
//*******************************************************************************
inline double Dec2ByteToDeg(_SWORD data)
{
	return data * 0.0054931640625;
}

//*******************************************************************************
//	ラジアン単位の角度値を2バイトのデータに変換する．
//
//	引数：
// 		radian - 角度値．-π〜πの範囲で指定．
//
//	Note:
//		最大誤差は約0.0000959
//*******************************************************************************
inline _SWORD ConvRadTo2Byte(double radian)
{
	return (_SWORD)(radian * 10430.378350470452724949566316381);
}

//*******************************************************************************
//	2バイトのデータからラジアン単位の角度値を復元する
//
//	引数：
//		data - ConvRadTo2Byteで変換した2バイトのデータ
//*******************************************************************************
inline double Dec2ByteToRad(_SWORD data)
{
	return data * 9.5873799242852576857380474343247e-5;
}

//*******************************************************************************
//	±1の範囲のdouble型データを2バイトのデータに変換する
//
//	引数：
//		value - double型のデータ
//
//	Note:
//		最大誤差は約0.0000305
//*******************************************************************************
inline _SWORD Conv1To2Byte(double value)
{
	return (_SWORD)(value * 32768.0);
}

//*******************************************************************************
//	2バイトのデータから±1の範囲の値を復元する
//
//	引数：
//		data - Conv100To2Byteで変換した2バイトのデータ
//*******************************************************************************
inline double Dec2ByteTo1(_SWORD data)
{
	return data / 32768.0;
}

//*******************************************************************************
//	±100の範囲のdouble型データを2バイトのデータに変換する
//
//	引数：
//		value - double型のデータ
//
//	Note:
//		最大誤差は約0.00305
//*******************************************************************************
inline _SWORD Conv100To2Byte(double value)
{
	return (_SWORD)(value * 327.68);
}

//*******************************************************************************
//	2バイトのデータから±100の範囲の値を復元する
//
//	引数：
//		data - Conv100To2Byteで変換した2バイトのデータ
//*******************************************************************************
inline double Dec2ByteTo100(_SWORD data)
{
	return data / 327.68;
}

//*******************************************************************************
//	±10000の範囲のdouble型データを3バイトのデータに変換する
//
//	引数：
//		value - double型のデータ
//
//	Note:
//		最大誤差は約0.0012
//*******************************************************************************
inline _SDWORD Conv10000To3Byte(double value)
{
	return (_SDWORD)((value + 10000.0) * 838.8608) & (_SDWORD)0xFFFFFF;
}

//*******************************************************************************
//	3バイトのデータから±10000の範囲の値を復元する
//
//	引数：
//		data - Conv10000To3Byteで変換した3バイトのデータ
//*******************************************************************************
inline double Dec3ByteTo10000(_SDWORD data)
{
	return (data & (_SDWORD)0xFFFFFF) / 838.8608 - 10000.0;
}

//*******************************************************************************
//	プロポデータを5バイトのデータに変換する
//
//	引数：
//		pPropo	プロポデータのポインタ
//
//	Note:
//		スティック情報9ビット×4 + スイッチ情報4ビット
//		ビットフィールドは処理系に依存するので使わない
//*******************************************************************************
inline unsigned int Fix9bit(int value) // 値を0〜511にする
{
	if( value < 0 ) return 0;
	if( value > 511 ) return 511;
	return value;
}

_UQWORD ConvPropoPacket(const PropoData* pPropo);

//*******************************************************************************
//	5バイトのデータからプロポデータを復元する
//
//	引数：
//		data   - ConvPropoPacketで変換した5バイトのデータ
//		pPropo - 復元したデータの格納先
//*******************************************************************************
void DecPropoPacket(_UQWORD data, PropoData* pPropo);

#endif